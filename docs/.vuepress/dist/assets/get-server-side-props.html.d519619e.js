import{_ as o,r as p,o as c,c as r,b as n,d as s,e,a as t}from"./app.1ad2624e.js";const l={},i=n("h1",{id:"getserversideprops",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#getserversideprops","aria-hidden":"true"},"#"),s(" getServerSideProps")],-1),u=n("details",{class:"custom-container details"},[n("summary",null,"示例"),n("p",null,"Version History")],-1),d=n("strong",null,"Note",-1),k=n("code",null,"app/",-1),h={href:"https://beta.nextjs.org/docs/data-fetching/fundamentals",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"use",-1),y=n("code",null,"fetch",-1),f={href:"https://beta.nextjs.org/docs/upgrade-guide",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"app/",-1),_=t(`<p>When exporting a function called<code>getServerSideProps</code>(Server-Side Rendering) from a page, Next.js will pre-render this page on each request using the data returned by<code>getServerSideProps</code>. This is useful if you want to fetch data that changes often, and have the page update to show the most current data.</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getServerSideProps</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// will be passed to the page component as props</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div><p>You can import modules in top-level scope for use in<code>getServerSideProps</code>. Imports used will<strong>not be bundled for the client-side</strong>. This means you can write<strong>server-side code directly in<code>getServerSideProps</code></strong>, including fetching data from your database.</p><h2 id="context-parameter" tabindex="-1"><a class="header-anchor" href="#context-parameter" aria-hidden="true">#</a> Context parameter</h2><p>The<code>context</code>parameter is an object containing the following keys:</p>`,5),m=n("code",null,"params",-1),v=n("a",{href:"/docs/guide/routing/dynamic-routes"},"dynamic route",-1),S=n("code",null,"params",-1),x=n("code",null,"[id].js",-1),b=n("code",null,"params",-1),P=n("code",null,"{ id: ... }",-1),j=n("code",null,"req",-1),T={href:"https://nodejs.org/api/http.html#http_class_http_incomingmessage",target:"_blank",rel:"noopener noreferrer"},I=n("code",null,"HTTP",-1),D=n("code",null,"cookies",-1),G=n("code",null,"res",-1),N={href:"https://nodejs.org/api/http.html#http_class_http_serverresponse",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"HTTP",-1),z=n("code",null,"query",-1),F=n("code",null,"preview",-1),L=n("code",null,"preview",-1),R=n("code",null,"true",-1),V=n("a",{href:"/docs/guide/advanced-features/preview-mode"},"Preview Mode",-1),H=n("code",null,"false",-1),U=n("code",null,"previewData",-1),W=n("a",{href:"/docs/guide/advanced-features/preview-mode"},"preview",-1),A=n("code",null,"setPreviewData",-1),B=n("code",null,"resolvedUrl",-1),C=n("code",null,"URL",-1),E=n("code",null,"_next/data",-1),J=n("code",null,"locale",-1),O=n("code",null,"locales",-1),M=n("code",null,"defaultLocale",-1),Y=n("h2",{id:"getserversideprops-return-values",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#getserversideprops-return-values","aria-hidden":"true"},"#"),s(" getServerSideProps return values")],-1),K=n("p",null,[s("The"),n("code",null,"getServerSideProps"),s("function should return an object with"),n("strong",null,"any one of the following"),s("properties:")],-1),Q=n("h3",{id:"props",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#props","aria-hidden":"true"},"#"),s(" props")],-1),X=n("code",null,"props",-1),Z={href:"https://developer.mozilla.org/en-US/docs/Glossary/Serialization",target:"_blank",rel:"noopener noreferrer"},$={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify",target:"_blank",rel:"noopener noreferrer"},nn=n("code",null,"JSON.stringify",-1),sn=t(`<div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getServerSideProps</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Next.js is awesome</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// will be passed to the page component as props</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div><h3 id="notfound" tabindex="-1"><a class="header-anchor" href="#notfound" aria-hidden="true">#</a> notFound</h3><p>The<code>notFound</code>boolean allows the page to return a<code>404</code>status and<a href="/docs/guide/advanced-features/custom-error-page#404-page">404 Page</a>. With<code>notFound: true</code>, the page will return a<code>404</code>even if there was a successfully generated page before. This is meant to support use cases like user-generated content getting removed by its author.</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getServerSideProps</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://.../data</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">notFound</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// will be passed to the page component as props</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div><h3 id="redirect" tabindex="-1"><a class="header-anchor" href="#redirect" aria-hidden="true">#</a> redirect</h3><p>The<code>redirect</code>object allows redirecting to internal and external resources. It should match the shape of<code>{ destination: string, permanent: boolean }</code>. In some rare cases, you might need to assign a custom status code for older<code>HTTP</code>clients to properly redirect. In these cases, you can use the<code>statusCode</code>property instead of the<code>permanent</code>property, but not both.</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getServerSideProps</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://.../data</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">destination</span><span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">permanent</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// will be passed to the page component as props</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div><h3 id="getserversideprops-with-typescript" tabindex="-1"><a class="header-anchor" href="#getserversideprops-with-typescript" aria-hidden="true">#</a> getServerSideProps with TypeScript</h3><p>The type of<code>getServerSideProps</code>can be specified using<code>GetServerSideProps</code>from<code>next</code>:</p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> GetServerSideProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;next&#39;</span>

<span class="token keyword">type</span> <span class="token class-name">Data</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> getServerSideProps<span class="token operator">:</span> GetServerSideProps<span class="token operator">&lt;</span><span class="token punctuation">{</span> data<span class="token operator">:</span> Data <span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://.../data&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> data<span class="token operator">:</span> Data <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    props<span class="token operator">:</span> <span class="token punctuation">{</span>
      data<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div><p>If you want to get inferred typings for your props, you can use<code>InferGetServerSidePropsType&lt;typeof getServerSideProps&gt;</code>:</p><div class="language-tsx" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> InferGetServerSidePropsType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;next&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> GetServerSideProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;next&#39;</span>

<span class="token keyword">type</span> <span class="token class-name">Data</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> getServerSideProps<span class="token operator">:</span> GetServerSideProps<span class="token operator">&lt;</span><span class="token punctuation">{</span> data<span class="token operator">:</span> Data <span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://.../data&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> data<span class="token operator">:</span> Data <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    props<span class="token operator">:</span> <span class="token punctuation">{</span>
      data<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span> data <span class="token punctuation">}</span><span class="token operator">:</span> InferGetServerSidePropsType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> getServerSideProps<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// will resolve data to type Data</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> Page

</code></pre></div><p>Implicit typing for<code>getServerSideProps</code>will also work properly:</p><div class="language-tsx" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> InferGetServerSidePropsType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;next&#39;</span>

<span class="token keyword">type</span> <span class="token class-name">Data</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getServerSideProps</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://.../data&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> data<span class="token operator">:</span> Data <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    props<span class="token operator">:</span> <span class="token punctuation">{</span>
      data<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span> data <span class="token punctuation">}</span><span class="token operator">:</span> InferGetServerSidePropsType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> getServerSideProps<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// will resolve data to type Data</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> Page

</code></pre></div><h2 id="related" tabindex="-1"><a class="header-anchor" href="#related" aria-hidden="true">#</a> Related</h2><p>For more information on what to do next, we recommend the following sections:</p>`,16);function an(en,tn){const a=p("ExternalLinkIcon");return c(),r("div",null,[i,u,n("blockquote",null,[n("p",null,[d,s(": Next.js 13 introduces the"),k,s("directory (beta). This new directory has support for"),n("a",h,[s("colocated data fetching"),e(a)]),s("at the component level, using the new React"),g,s("hook and an extended"),y,s("Web API."),n("a",f,[s("Learn more about incrementally adopting"),w,e(a)]),s(".")])]),_,n("ul",null,[n("li",null,[m,s(": If this page uses a"),v,s(","),S,s("contains the route parameters. If the page name is"),x,s(", then"),b,s("will look like"),P,s(".- "),j,s(":"),n("a",T,[s("The"),I,s("IncomingMessage object"),e(a)]),s(", with an additional"),D,s("prop, which is an object with string keys mapping to string values of cookies.- "),G,s(":"),n("a",N,[s("The"),q,s("response object"),e(a)]),s(".- "),z,s(": An object representing the query string, including dynamic route parameters.- "),F,s(":"),L,s("is"),R,s("if the page is in the"),V,s("and"),H,s("otherwise.- "),U,s(": The"),W,s("data set by"),A,s(".- "),B,s(": A normalized version of the request"),C,s("that strips the"),E,s("prefix for client transitions and includes original query values.- "),J,s("contains the active locale (if enabled).- "),O,s("contains all supported locales (if enabled).- "),M,s("contains the configured default locale (if enabled).")])]),Y,K,Q,n("p",null,[s("The"),X,s("object is a key-value pair, where each value is received by the page component. It should be a"),n("a",Z,[s("serializable object"),e(a)]),s("so that any props passed, could be serialized with"),n("a",$,[nn,e(a)]),s(".")]),sn])}const pn=o(l,[["render",an],["__file","get-server-side-props.html.vue"]]);export{pn as default};
