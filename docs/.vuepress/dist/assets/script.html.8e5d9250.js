import{_ as p,r as o,o as c,c as l,b as n,d as a,e,a as s}from"./app.1ad2624e.js";const r={},i=s(`<h1 id="next-script" tabindex="-1"><a class="header-anchor" href="#next-script" aria-hidden="true">#</a> next/script</h1><details class="custom-container details"><summary>示例</summary><p>Version History</p></details><p>This API reference will help you understand how to use<a href="#props">props</a>available for the Script Component. For features and usage, please see the<a href="/docs/guide/basic-features/script">Optimizing Scripts</a>page.</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> Script <span class="token keyword">from</span> <span class="token string">&#39;next/script&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Dashboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Script</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://example.com/script.js<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre></div><h2 id="props" tabindex="-1"><a class="header-anchor" href="#props" aria-hidden="true">#</a> Props</h2><p>Here&#39;s a summary of the props available for the Script Component:</p><h2 id="required-props" tabindex="-1"><a class="header-anchor" href="#required-props" aria-hidden="true">#</a> Required Props</h2><p>The<code>&lt;Script /&gt;</code>component requires the following properties.</p><h3 id="src" tabindex="-1"><a class="header-anchor" href="#src" aria-hidden="true">#</a> src</h3><p>A path string specifying the URL of an external script. This can be either an absolute external URL or an internal path.</p><blockquote><p>**Note:**The<code>src</code>property is required unless an inline script is used.</p></blockquote><h2 id="optional-props" tabindex="-1"><a class="header-anchor" href="#optional-props" aria-hidden="true">#</a> Optional Props</h2><p>The<code>&lt;Script /&gt;</code>component accepts a number of additional properties beyond those which are required.</p><h3 id="strategy" tabindex="-1"><a class="header-anchor" href="#strategy" aria-hidden="true">#</a> strategy</h3><p>The loading strategy of the script. There are four different strategies that can be used:</p><ul><li><code>beforeInteractive</code>: Load before any Next.js code and before any page hydration occurs.- <code>afterInteractive</code>: (<strong>default</strong>) Load early but after some hydration on the page occurs.- <code>lazyOnload</code>: Load during browser idle time.- <code>worker</code>: (experimental) Load in a web worker.</li></ul><h4 id="beforeinteractive" tabindex="-1"><a class="header-anchor" href="#beforeinteractive" aria-hidden="true">#</a> beforeInteractive</h4><p>Scripts that load with the<code>beforeInteractive</code>strategy are injected into the initial HTML from the server, downloaded before any Next.js module, and executed in the order they are placed beforeanyhydration occurs on the page.</p><p>Scripts denoted with this strategy are preloaded and fetched before any first-party code, but their execution does not block page hydration from occuring.</p><p><code>beforeInteractive</code>scripts must be placed inside<code>pages/_app.js</code>and are designed to load scripts that are needed by the entire site (i.e. the script will load when any page in the application has been loaded server-side).</p><p><strong>This strategy should only be used for critical scripts that need to be fetched before any part of the page becomes interactive.</strong></p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> Script <span class="token keyword">from</span> <span class="token string">&#39;next/script&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">MyApp</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> Component<span class="token punctuation">,</span> pageProps <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Script</span></span>
        <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://example.com/script.js<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">strategy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>beforeInteractive<span class="token punctuation">&quot;</span></span>
      <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>pageProps<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre></div><blockquote><p><strong>Note</strong>: Scripts with<code>beforeInteractive</code>will always be injected inside the<code>head</code>of the HTML document regardless of where it&#39;s placed in the component.</p></blockquote><p>Some examples of scripts that should be loaded as soon as possible with<code>beforeInteractive</code>include:</p><ul><li>Bot detectors- Cookie consent managers</li></ul><h4 id="afterinteractive" tabindex="-1"><a class="header-anchor" href="#afterinteractive" aria-hidden="true">#</a> afterInteractive</h4><p>Scripts that use the<code>afterInteractive</code>strategy are injected into the HTML client-side and will load after some (or all) hydration occurs on the page.<strong>This is the default strategy</strong>of the Script component and should be used for any script that needs to load as soon as possible but not before any first-party Next.js code.</p><p><code>afterInteractive</code>scripts can be placed inside of any page or layout and will only load and execute when that page (or group of pages) is opened in the browser.</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> Script <span class="token keyword">from</span> <span class="token string">&#39;next/script&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Script</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://example.com/script.js<span class="token punctuation">&quot;</span></span> <span class="token attr-name">strategy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>afterInteractive<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre></div><p>Some examples of scripts that are good candidates for<code>afterInteractive</code>include:</p><ul><li>Tag managers- Analytics</li></ul><h4 id="lazyonload" tabindex="-1"><a class="header-anchor" href="#lazyonload" aria-hidden="true">#</a> lazyOnload</h4><p>Scripts that use the<code>lazyOnload</code>strategy are injected into the HTML client-side during browser idle time and will load after all resources on the page have been fetched. This strategy should be used for any background or low priority scripts that do not need to load early.</p><p><code>lazyOnload</code>scripts can be placed inside of any page or layout and will only load and execute when that page (or group of pages) is opened in the browser.</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> Script <span class="token keyword">from</span> <span class="token string">&#39;next/script&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Script</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://example.com/script.js<span class="token punctuation">&quot;</span></span> <span class="token attr-name">strategy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>lazyOnload<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre></div><p>Examples of scripts that do not need to load immediately and can be fetched with<code>lazyOnload</code>include:</p><ul><li>Chat support plugins- Social media widgets</li></ul><h4 id="worker" tabindex="-1"><a class="header-anchor" href="#worker" aria-hidden="true">#</a> worker</h4><blockquote><p>**Note:**The<code>worker</code>strategy is not yet stable and does not yet work with the<a href="/docs/guide/routing/defining-routes"><code>app/</code></a>directory. Use with caution.</p></blockquote><p>Scripts that use the<code>worker</code>strategy are off-loaded to a web worker in order to free up the main thread and ensure that only critical, first-party resources are processed on it. While this strategy can be used for any script, it is an advanced use case that is not guaranteed to support all third-party scripts.</p><p>To use<code>worker</code>as a strategy, the<code>nextScriptWorkers</code>flag must be enabled in<code>next.config.js</code>:</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">experimental</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">nextScriptWorkers</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

</code></pre></div><p><code>worker</code>scripts can<strong>only currently be used in the<code>pages/</code>directory</strong>:</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> Script <span class="token keyword">from</span> <span class="token string">&#39;next/script&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Home</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Script</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://example.com/script.js<span class="token punctuation">&quot;</span></span> <span class="token attr-name">strategy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>worker<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre></div><h3 id="onload" tabindex="-1"><a class="header-anchor" href="#onload" aria-hidden="true">#</a> onLoad</h3>`,45),u=n("strong",null,"Note:",-1),k=n("code",null,"onLoad",-1),d=n("code",null,"beforeInteractive",-1),h=n("code",null,"onReady",-1),g=n("code",null,"onLoad",-1),f={href:"https://beta.nextjs.org/docs/optimizing/scripts#onload",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"app/",-1),m=s(`<p>Some third-party scripts require users to run JavaScript code once after the script has finished loading in order to instantiate content or call a function. If you are loading a script with either afterInteractive or lazyOnload as a loading strategy, you can execute code after it has loaded using the onLoad property.</p><p>Here&#39;s an example of executing a lodash method only after the library has been loaded.</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> Script <span class="token keyword">from</span> <span class="token string">&#39;next/script&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Script</span></span>
        <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.20/lodash.min.js<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">onLoad</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">sample</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
      <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre></div><h3 id="onready" tabindex="-1"><a class="header-anchor" href="#onready" aria-hidden="true">#</a> onReady</h3>`,4),x=n("code",null,"onReady",-1),b={href:"https://beta.nextjs.org/docs/optimizing/scripts#onready",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"app/",-1),v=s(`<p>Some third-party scripts require users to run JavaScript code after the script has finished loading and every time the component is mounted (after a route navigation for example). You can execute code after the script&#39;s load event when it first loads and then after every subsequent component re-mount using the onReady property.</p><p>Here&#39;s an example of how to re-instantiate a Google Maps JS embed everytime the component is mounted:</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useRef <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
<span class="token keyword">import</span> Script <span class="token keyword">from</span> <span class="token string">&#39;next/script&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> mapRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>mapRef<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      &lt;Script
        id=&quot;google-maps&quot;
        src=&quot;https://maps.googleapis.com/maps/api/js&quot;
        onReady=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">new</span> <span class="token class-name">google<span class="token punctuation">.</span>maps<span class="token punctuation">.</span>Map</span><span class="token punctuation">(</span>mapRef<span class="token punctuation">.</span>current<span class="token punctuation">,</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">center</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">lat</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">34.397</span><span class="token punctuation">,</span> <span class="token literal-property property">lng</span><span class="token operator">:</span> <span class="token number">150.644</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token literal-property property">zoom</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token plain-text">
      /&gt;
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre></div><h3 id="onerror" tabindex="-1"><a class="header-anchor" href="#onerror" aria-hidden="true">#</a> onError</h3>`,4),_=n("strong",null,"Note:",-1),q=n("code",null,"onError",-1),j=n("code",null,"beforeInteractive",-1),S=n("code",null,"onError",-1),I={href:"https://beta.nextjs.org/docs/optimizing/scripts#onError",target:"_blank",rel:"noopener noreferrer"},L=n("code",null,"app/",-1),T=s(`<p>Sometimes it is helpful to catch when a script fails to load. These errors can be handled with the onError property:</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> Script <span class="token keyword">from</span> <span class="token string">&#39;next/script&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Script</span></span>
        <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://example.com/script.js<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">onError</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Script failed to load&#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
      <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre></div><h2 id="next-steps" tabindex="-1"><a class="header-anchor" href="#next-steps" aria-hidden="true">#</a> Next Steps</h2>`,3);function z(N,R){const t=o("ExternalLinkIcon");return c(),l("div",null,[i,n("blockquote",null,[n("p",null,[u,k,a("can't be used with"),d,a("– consider using"),h,a("instead. Learn more about usage of"),g,a("in the"),n("a",f,[y,a("directory"),e(t)]),a(".")])]),m,n("blockquote",null,[n("p",null,[a("**Note:**Learn more about usage of"),x,a("in the"),n("a",b,[w,a("directory"),e(t)]),a(".")])]),v,n("blockquote",null,[n("p",null,[_,q,a("cannot be used with the"),j,a("loading strategy. Learn more about usage of"),S,a("in the"),n("a",I,[L,a("directory"),e(t)]),a(".")])]),T])}const E=p(r,[["render",z],["__file","script.html.vue"]]);export{E as default};
