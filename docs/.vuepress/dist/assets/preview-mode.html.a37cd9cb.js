import{_ as o,r,o as p,c,b as a,d as e,e as n,a as t}from"./app.1ad2624e.js";const i={},l=a("h1",{id:"preview-mode",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#preview-mode","aria-hidden":"true"},"#"),e(" Preview Mode")],-1),u=a("blockquote",null,[a("p",null,[e("This document is for Next.js versions 9.3 and up. If you’re using older versions of Next.js, refer to our"),a("a",{href:"/docs/tag/v9.2.2/basic-features/pages"},"previous documentation"),e(".")])],-1),d={class:"custom-container details"},h=a("summary",null,"示例",-1),k={href:"https://github.com/vercel/next.js/tree/canary/examples/cms-wordpress",target:"_blank",rel:"noopener noreferrer"},m={href:"https://next-blog-wordpress.vercel.app",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/vercel/next.js/tree/canary/examples/cms-datocms",target:"_blank",rel:"noopener noreferrer"},f={href:"https://next-blog-datocms.vercel.app/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://github.com/vercel/next.js/tree/canary/examples/cms-takeshape",target:"_blank",rel:"noopener noreferrer"},v={href:"https://next-blog-takeshape.vercel.app/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/vercel/next.js/tree/canary/examples/cms-sanity",target:"_blank",rel:"noopener noreferrer"},y={href:"https://next-blog-sanity.vercel.app/",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github.com/vercel/next.js/tree/canary/examples/cms-prismic",target:"_blank",rel:"noopener noreferrer"},_={href:"https://next-blog-prismic.vercel.app/",target:"_blank",rel:"noopener noreferrer"},P={href:"https://github.com/vercel/next.js/tree/canary/examples/cms-contentful",target:"_blank",rel:"noopener noreferrer"},j={href:"https://next-blog-contentful.vercel.app/",target:"_blank",rel:"noopener noreferrer"},S={href:"https://github.com/vercel/next.js/tree/canary/examples/cms-strapi",target:"_blank",rel:"noopener noreferrer"},D={href:"https://next-blog-strapi.vercel.app/",target:"_blank",rel:"noopener noreferrer"},I={href:"https://github.com/vercel/next.js/tree/canary/examples/cms-prepr",target:"_blank",rel:"noopener noreferrer"},q={href:"https://next-blog-prepr.vercel.app/",target:"_blank",rel:"noopener noreferrer"},M={href:"https://github.com/vercel/next.js/tree/canary/examples/cms-agilitycms",target:"_blank",rel:"noopener noreferrer"},C={href:"https://next-blog-agilitycms.vercel.app/",target:"_blank",rel:"noopener noreferrer"},T={href:"https://github.com/vercel/next.js/tree/canary/examples/cms-cosmic",target:"_blank",rel:"noopener noreferrer"},A={href:"https://next-blog-cosmic.vercel.app/",target:"_blank",rel:"noopener noreferrer"},E={href:"https://github.com/vercel/next.js/tree/canary/examples/cms-buttercms",target:"_blank",rel:"noopener noreferrer"},R={href:"https://next-blog-buttercms.vercel.app/",target:"_blank",rel:"noopener noreferrer"},N={href:"https://github.com/vercel/next.js/tree/canary/examples/cms-storyblok",target:"_blank",rel:"noopener noreferrer"},U={href:"https://next-blog-storyblok.vercel.app/",target:"_blank",rel:"noopener noreferrer"},L={href:"https://github.com/vercel/next.js/tree/canary/examples/cms-graphcms",target:"_blank",rel:"noopener noreferrer"},F={href:"https://next-blog-graphcms.vercel.app/",target:"_blank",rel:"noopener noreferrer"},B={href:"https://github.com/vercel/next.js/tree/canary/examples/cms-kontent",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://next-blog-kontent.vercel.app//",target:"_blank",rel:"noopener noreferrer"},H={href:"https://github.com/vercel/next.js/tree/canary/examples/cms-umbraco-heartcore",target:"_blank",rel:"noopener noreferrer"},W={href:"https://next-blog-umbraco-heartcore.vercel.app/",target:"_blank",rel:"noopener noreferrer"},z={href:"https://github.com/vercel/next.js/tree/canary/examples/cms-plasmic",target:"_blank",rel:"noopener noreferrer"},G={href:"https://nextjs-plasmic-example.vercel.app/",target:"_blank",rel:"noopener noreferrer"},V={href:"https://github.com/vercel/next.js/tree/canary/examples/cms-enterspeed",target:"_blank",rel:"noopener noreferrer"},K={href:"https://next-blog-demo.enterspeed.com/",target:"_blank",rel:"noopener noreferrer"},O={href:"https://github.com/vercel/next.js/tree/canary/examples/cms-makeswift",target:"_blank",rel:"noopener noreferrer"},$={href:"https://nextjs-makeswift-example.vercel.app/",target:"_blank",rel:"noopener noreferrer"},J=t(`<p>In the<a href="/docs/guide/basic-features/pages">Pages documentation</a>and the<a href="/docs/guide/basic-features/data-fetching/overview">Data Fetching documentation</a>, we talked about how to pre-render a page at build time (<strong>Static Generation</strong>) using<code>getStaticProps</code>and<code>getStaticPaths</code>.</p><p>Static Generation is useful when your pages fetch data from a headless CMS. However, it’s not ideal when you’re writing a draft on your headless CMS and want to<strong>preview</strong>the draft immediately on your page. You’d want Next.js to render these pages at<strong>request time</strong>instead of build time and fetch the draft content instead of the published content. You’d want Next.js to bypass Static Generation only for this specific case.</p><p>Next.js has a feature called<strong>Preview Mode</strong>which solves this problem. Here are instructions on how to use it.</p><h2 id="step-1-create-and-access-a-preview-api-route" tabindex="-1"><a class="header-anchor" href="#step-1-create-and-access-a-preview-api-route" aria-hidden="true">#</a> Step 1. Create and access a preview API route</h2><blockquote><p>Take a look at the<a href="/docs/guide/api-routes/introduction">API Routes documentation</a>first if you’re not familiar with Next.js API Routes.</p></blockquote><p>First, create a<strong>preview API route</strong>. It can have any name - e.g.<code>pages/api/preview.js</code>(or<code>.ts</code>if using TypeScript).</p><p>In this API route, you need to call<code>setPreviewData</code>on the response object. The argument for<code>setPreviewData</code>should be an object, and this can be used by<code>getStaticProps</code>(more on this later). For now, we’ll use<code>{}</code>.</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  res<span class="token punctuation">.</span><span class="token function">setPreviewData</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

</code></pre></div><p><code>res.setPreviewData</code>sets some<strong>cookies</strong>on the browser which turns on the preview mode. Any requests to Next.js containing these cookies will be considered as the<strong>preview mode</strong>, and the behavior for statically generated pages will change (more on this later).</p><p>You can test this manually by creating an API route like below and accessing it from your browser manually:</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// A simple example for testing it manually from your browser.</span>
<span class="token comment">// If this is located at pages/api/preview.js, then</span>
<span class="token comment">// open /api/preview from your browser.</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">setPreviewData</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;Preview mode enabled&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre></div><p>If you use your browser’s developer tools, you’ll notice that the<code>__prerender_bypass</code>and<code>__next_preview_data</code>cookies will be set on this request.</p><h3 id="securely-accessing-it-from-your-headless-cms" tabindex="-1"><a class="header-anchor" href="#securely-accessing-it-from-your-headless-cms" aria-hidden="true">#</a> Securely accessing it from your Headless CMS</h3><p>In practice, you’d want to call this API routesecurelyfrom your headless CMS. The specific steps will vary depending on which headless CMS you’re using, but here are some common steps you could take.</p><p>These steps assume that the headless CMS you’re using supports setting<strong>custom preview URLs</strong>. If it doesn’t, you can still use this method to secure your preview URLs, but you’ll need to construct and access the preview URL manually.</p><p><strong>First</strong>, you should create a<strong>secret token string</strong>using a token generator of your choice. This secret will only be known by your Next.js app and your headless CMS. This secret prevents people who don’t have access to your CMS from accessing preview URLs.</p><p><strong>Second</strong>, if your headless CMS supports setting custom preview URLs, specify the following as the preview URL. (This assumes that your preview API route is located at<code>pages/api/preview.js</code>.)</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>https://<span class="token operator">&lt;</span>your-site<span class="token operator">&gt;</span>/api/preview?secret<span class="token operator">=</span><span class="token operator">&lt;</span>token<span class="token operator">&gt;&amp;</span><span class="token assign-left variable">slug</span><span class="token operator">=</span><span class="token operator">&lt;</span>path<span class="token operator">&gt;</span>

</code></pre></div><ul><li><code>&lt;your-site&gt;</code>should be your deployment domain.- <code>&lt;token&gt;</code>should be replaced with the secret token you generated.- <code>&lt;path&gt;</code>should be the path for the page that you want to preview. If you want to preview<code>/posts/foo</code>, then you should use<code>&amp;slug=/posts/foo</code>.</li></ul><p>Your headless CMS might allow you to include a variable in the preview URL so that<code>&lt;path&gt;</code>can be set dynamically based on the CMS’s data like so:<code>&amp;slug=/posts/{entry.fields.slug}</code></p><p><strong>Finally</strong>, in the preview API route:</p>`,21),Q=a("code",null,"slug",-1),X=a("code",null,"res.setPreviewData",-1),Z=a("code",null,"slug",-1),ee={href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/307",target:"_blank",rel:"noopener noreferrer"},ae=t(`<div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Check the secret and next parameters</span>
  <span class="token comment">// This secret should only be known to this API route and the CMS</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>secret <span class="token operator">!==</span> <span class="token string">&#39;MY_SECRET_TOKEN&#39;</span> <span class="token operator">||</span> <span class="token operator">!</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>slug<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;Invalid token&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Fetch the headless CMS to check if the provided \`slug\` exists</span>
  <span class="token comment">// getPostBySlug would implement the required fetching logic to the headless CMS</span>
  <span class="token keyword">const</span> post <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getPostBySlug</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>slug<span class="token punctuation">)</span>

  <span class="token comment">// If the slug doesn&#39;t exist prevent preview mode from being enabled</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>post<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;Invalid slug&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Enable Preview Mode by setting the cookies</span>
  res<span class="token punctuation">.</span><span class="token function">setPreviewData</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token comment">// Redirect to the path from the fetched post</span>
  <span class="token comment">// We don&#39;t redirect to req.query.slug as that might lead to open redirect vulnerabilities</span>
  res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>slug<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre></div><p>If it succeeds, then the browser will be redirected to the path you want to preview with the preview mode cookies being set.</p><h2 id="step-2-update-getstaticprops" tabindex="-1"><a class="header-anchor" href="#step-2-update-getstaticprops" aria-hidden="true">#</a> Step 2. Update getStaticProps</h2><p>The next step is to update<code>getStaticProps</code>to support the preview mode.</p><p>If you request a page which has<code>getStaticProps</code>with the preview mode cookies set (via<code>res.setPreviewData</code>), then<code>getStaticProps</code>will be called at<strong>request time</strong>(instead of at build time).</p><p>Furthermore, it will be called with a<code>context</code>object where:</p><ul><li><code>context.preview</code>will be<code>true</code>.- <code>context.previewData</code>will be the same as the argument used for<code>setPreviewData</code>.</li></ul><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getStaticProps</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// If you request this page with the preview mode cookies set:</span>
  <span class="token comment">//</span>
  <span class="token comment">// - context.preview will be true</span>
  <span class="token comment">// - context.previewData will be the same as</span>
  <span class="token comment">//   the argument used for \`setPreviewData\`.</span>
<span class="token punctuation">}</span>

</code></pre></div><p>We used<code>res.setPreviewData({})</code>in the preview API route, so<code>context.previewData</code>will be<code>{}</code>. You can use this to pass session information from the preview API route to<code>getStaticProps</code>if necessary.</p><p>If you’re also using<code>getStaticPaths</code>, then<code>context.params</code>will also be available.</p><h3 id="fetch-preview-data" tabindex="-1"><a class="header-anchor" href="#fetch-preview-data" aria-hidden="true">#</a> Fetch preview data</h3><p>You can update<code>getStaticProps</code>to fetch different data based on<code>context.preview</code>and/or<code>context.previewData</code>.</p><p>For example, your headless CMS might have a different API endpoint for draft posts. If so, you can use<code>context.preview</code>to modify the API endpoint URL like below:</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getStaticProps</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// If context.preview is true, append &quot;/preview&quot; to the API endpoint</span>
  <span class="token comment">// to request draft data instead of published data. This will vary</span>
  <span class="token comment">// based on which headless CMS you&#39;re using.</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://.../</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>context<span class="token punctuation">.</span>preview <span class="token operator">?</span> <span class="token string">&#39;preview&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

</code></pre></div><p>That’s it! If you access the preview API route (with<code>secret</code>and<code>slug</code>) from your headless CMS or manually, you should now be able to see the preview content. And if you update your draft without publishing, you should be able to preview the draft.</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Set this as the preview URL on your headless CMS or access manually,</span>
<span class="token comment"># and you should be able to see the preview.</span>
https://<span class="token operator">&lt;</span>your-site<span class="token operator">&gt;</span>/api/preview?secret<span class="token operator">=</span><span class="token operator">&lt;</span>token<span class="token operator">&gt;&amp;</span><span class="token assign-left variable">slug</span><span class="token operator">=</span><span class="token operator">&lt;</span>path<span class="token operator">&gt;</span>

</code></pre></div><h2 id="more-details" tabindex="-1"><a class="header-anchor" href="#more-details" aria-hidden="true">#</a> More Details</h2><blockquote><p><strong>Note</strong>: during rendering<code>next/router</code>exposes an<code>isPreview</code>flag, see the<a href="/docs/guide/api-reference/next/router#router-object">router object docs</a>for more info.</p></blockquote><h3 id="clear-the-preview-mode-cookies" tabindex="-1"><a class="header-anchor" href="#clear-the-preview-mode-cookies" aria-hidden="true">#</a> Clear the Preview Mode cookies</h3><p>By default, no expiration date is set for Preview Mode cookies, so the preview session ends when the browser is closed.</p><p>To clear the Preview Mode cookies manually, create an API route that calls<code>clearPreviewData()</code>:</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// pages/api/clear-preview-mode-cookies.js</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">clearPreviewData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre></div><p>Then, send a request to<code>/api/clear-preview-mode-cookies</code>to invoke the API Route. If calling this route using<a href="/docs/guide/api-reference/next/link"><code>next/link</code></a>, you must pass<code>prefetch={false}</code>to prevent calling<code>clearPreviewData</code>during link prefetching.</p><h3 id="specify-the-preview-mode-duration" tabindex="-1"><a class="header-anchor" href="#specify-the-preview-mode-duration" aria-hidden="true">#</a> Specify the Preview Mode duration</h3><p><code>setPreviewData</code>takes an optional second parameter which should be an options object. It accepts the following keys:</p><ul><li><code>maxAge</code>: Specifies the number (in seconds) for the preview session to last for.- <code>path</code>: Specifies the path the cookie should be applied under. Defaults to<code>/</code>enabling preview mode for all paths.</li></ul><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token function">setPreviewData</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">maxAge</span><span class="token operator">:</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token comment">// The preview mode cookies expire in 1 hour</span>
  <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/about&#39;</span><span class="token punctuation">,</span> <span class="token comment">// The preview mode cookies apply to paths with /about</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre></div><h3 id="previewdata-size-limits" tabindex="-1"><a class="header-anchor" href="#previewdata-size-limits" aria-hidden="true">#</a> previewData size limits</h3><p>You can pass an object to<code>setPreviewData</code>and have it be available in<code>getStaticProps</code>. However, because the data will be stored in a cookie, there’s a size limitation. Currently, preview data is limited to 2KB.</p><h3 id="works-with-getserversideprops" tabindex="-1"><a class="header-anchor" href="#works-with-getserversideprops" aria-hidden="true">#</a> Works with getServerSideProps</h3><p>The preview mode works on<code>getServerSideProps</code>as well. It will also be available on the<code>context</code>object containing<code>preview</code>and<code>previewData</code>.</p><h3 id="works-with-api-routes" tabindex="-1"><a class="header-anchor" href="#works-with-api-routes" aria-hidden="true">#</a> Works with API Routes</h3><p>API Routes will have access to<code>preview</code>and<code>previewData</code>under the request object. For example:</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">myApiRoute</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> isPreview <span class="token operator">=</span> req<span class="token punctuation">.</span>preview
  <span class="token keyword">const</span> previewData <span class="token operator">=</span> req<span class="token punctuation">.</span>previewData
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

</code></pre></div><h3 id="unique-per-next-build" tabindex="-1"><a class="header-anchor" href="#unique-per-next-build" aria-hidden="true">#</a> Unique per next build</h3><p>Both the bypass cookie value and the private key for encrypting the<code>previewData</code>change when<code>next build</code>is completed. This ensures that the bypass cookie can’t be guessed.</p><blockquote><p>**Note:**To test Preview Mode locally over HTTP your browser will need to allow third-party cookies and local storage access.</p></blockquote><h2 id="learn-more" tabindex="-1"><a class="header-anchor" href="#learn-more" aria-hidden="true">#</a> Learn more</h2><p>The following pages might also be useful.</p>`,39);function se(ne,te){const s=r("ExternalLinkIcon");return p(),c("div",null,[l,u,a("details",d,[h,a("ul",null,[a("li",null,[a("a",k,[e("WordPress Example"),n(s)]),e("("),a("a",m,[e("Demo"),n(s)]),e(")- "),a("a",g,[e("DatoCMS Example"),n(s)]),e("("),a("a",f,[e("Demo"),n(s)]),e(")- "),a("a",w,[e("TakeShape Example"),n(s)]),e("("),a("a",v,[e("Demo"),n(s)]),e(")- "),a("a",b,[e("Sanity Example"),n(s)]),e("("),a("a",y,[e("Demo"),n(s)]),e(")- "),a("a",x,[e("Prismic Example"),n(s)]),e("("),a("a",_,[e("Demo"),n(s)]),e(")- "),a("a",P,[e("Contentful Example"),n(s)]),e("("),a("a",j,[e("Demo"),n(s)]),e(")- "),a("a",S,[e("Strapi Example"),n(s)]),e("("),a("a",D,[e("Demo"),n(s)]),e(")- "),a("a",I,[e("Prepr Example"),n(s)]),e("("),a("a",q,[e("Demo"),n(s)]),e(")- "),a("a",M,[e("Agility CMS Example"),n(s)]),e("("),a("a",C,[e("Demo"),n(s)]),e(")- "),a("a",T,[e("Cosmic Example"),n(s)]),e("("),a("a",A,[e("Demo"),n(s)]),e(")- "),a("a",E,[e("ButterCMS Example"),n(s)]),e("("),a("a",R,[e("Demo"),n(s)]),e(")- "),a("a",N,[e("Storyblok Example"),n(s)]),e("("),a("a",U,[e("Demo"),n(s)]),e(")- "),a("a",L,[e("GraphCMS Example"),n(s)]),e("("),a("a",F,[e("Demo"),n(s)]),e(")- "),a("a",B,[e("Kontent Example"),n(s)]),e("("),a("a",Y,[e("Demo"),n(s)]),e(")- "),a("a",H,[e("Umbraco Heartcore Example"),n(s)]),e("("),a("a",W,[e("Demo"),n(s)]),e(")- "),a("a",z,[e("Plasmic Example"),n(s)]),e("("),a("a",G,[e("Demo"),n(s)]),e(")- "),a("a",V,[e("Enterspeed Example"),n(s)]),e("("),a("a",K,[e("Demo"),n(s)]),e(")- "),a("a",O,[e("Makeswift Example"),n(s)]),e("("),a("a",$,[e("Demo"),n(s)]),e(")")])])]),J,a("ul",null,[a("li",null,[e("Check that the secret matches and that the"),Q,e("parameter exists (if not, the request should fail).-- Call"),X,e(".- Then redirect the browser to the path specified by"),Z,e(". (The following example uses a"),a("a",ee,[e("307 redirect"),n(s)]),e(").")])]),ae])}const re=o(i,[["render",se],["__file","preview-mode.html.vue"]]);export{re as default};
