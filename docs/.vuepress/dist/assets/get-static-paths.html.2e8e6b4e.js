import{_ as a,o as s,c as n,a as t}from"./app.1ad2624e.js";const p={},e=t(`<h1 id="getstaticpaths" tabindex="-1"><a class="header-anchor" href="#getstaticpaths" aria-hidden="true">#</a> getStaticPaths</h1><p>如果一个页面有动态路由并使用<code>getStaticProps</code>，它需要定义一个静态生成的路径列表。</p><p>当您从使用动态路由的页面导出名为 <code>getStaticPaths</code>（静态站点生成）的函数时，Next.js 将静态预渲染 <code>getStaticPaths</code> 指定的所有路径。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// pages/posts/[id].js</span>

<span class="token comment">// Generates \`/posts/1\` and \`/posts/2\`</span>
<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getStaticPaths</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">paths</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;1&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;2&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">fallback</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// can also be true or &#39;blocking&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// \`getStaticPaths\` requires using \`getStaticProps\`</span>
<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getStaticProps</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token comment">// Passed to the page component as props</span>
    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">post</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Post</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> post <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Render post...</span>
<span class="token punctuation">}</span>
</code></pre></div><p><code>getStaticPaths</code> API 参考涵盖了可与 <code>getStaticPaths</code> 一起使用的所有参数和道具。</p><h2 id="什么时候应该使用-getstaticpaths" tabindex="-1"><a class="header-anchor" href="#什么时候应该使用-getstaticpaths" aria-hidden="true">#</a> 什么时候应该使用 getStaticPaths？</h2><p><code>getStaticPaths</code>如果您要静态预渲染使用动态路由的页面，则应该使用：</p><ul><li>数据来自无头 CMS</li><li>数据来自数据库</li><li>数据来自文件系统</li><li>数据可以公开缓存（不是用户特定的）</li><li>页面必须预先渲染（用于 SEO）并且速度非常快——<code>getStaticProps</code>生成<code>HTML</code>和<code>JSON</code>文件，这两者都可以被 CDN 缓存以提高性能</li></ul><h2 id="getstaticpaths-什么时候运行" tabindex="-1"><a class="header-anchor" href="#getstaticpaths-什么时候运行" aria-hidden="true">#</a> getStaticPaths 什么时候运行</h2><p><code>getStaticPaths</code>只会在生产中运行，它不会在运行时调用。您可以使用此工具验证内部编写的代码<code>getStaticPaths</code>是否已从客户端捆绑包中删除。</p><h3 id="关于-getstaticpaths-getstaticprops-如何运行" tabindex="-1"><a class="header-anchor" href="#关于-getstaticpaths-getstaticprops-如何运行" aria-hidden="true">#</a> 关于 getStaticPaths，getStaticProps 如何运行</h3><ul><li>getStaticProps在构建期间运行next build任何paths返回</li><li>getStaticProps使用时在后台运行fallback: true</li><li>getStaticProps使用时在初始渲染之前调用fallback: blocking</li></ul><h2 id="我在哪里可以使用-getstaticpaths" tabindex="-1"><a class="header-anchor" href="#我在哪里可以使用-getstaticpaths" aria-hidden="true">#</a> 我在哪里可以使用 getStaticPaths</h2><ul><li><code>getStaticPaths</code> 必须与<code>getStaticProps</code></li><li>您不能将 <code>getStaticPaths</code> 与 <code>getServerSideProps</code> 一起使用</li><li>您可以从也使用 <code>getStaticProps</code> 的动态路由中导出 <code>getStaticPaths</code></li><li>您不能从非页面文件（例如您的组件文件夹）中导出 <code>getStaticPaths</code></li><li>您必须将 <code>getStaticPaths</code> 导出为独立函数，而不是页面组件的属性</li></ul><h2 id="在开发中的每个请求上运行" tabindex="-1"><a class="header-anchor" href="#在开发中的每个请求上运行" aria-hidden="true">#</a> 在开发中的每个请求上运行</h2><p>在开发（next dev）中，每个请求都会调用 <code>getStaticPaths</code>。</p><h2 id="按需生成路径" tabindex="-1"><a class="header-anchor" href="#按需生成路径" aria-hidden="true">#</a> 按需生成路径</h2><p><code>getStaticPaths</code>允许您控制在构建期间生成哪些页面，而不是使用<code>fallback</code>. 在构建期间生成更多页面将导致构建速度变慢。</p><p>您可以通过返回一个空数组来推迟按需生成所有页面<code>paths</code>。这在将 Next.js 应用程序部署到多个环境时特别有用。例如，您可以通过按需生成所有页面以供预览（但不是生产构建）来加快构建速度。这对于拥有成百上千个静态页面的网站很有帮助。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// pages/posts/[id].js</span>

<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getStaticPaths</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// When this is true (in preview environments) don&#39;t</span>
  <span class="token comment">// prerender any static pages</span>
  <span class="token comment">// (faster builds, but slower initial page load)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">SKIP_BUILD_STATIC_GENERATION</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">paths</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">fallback</span><span class="token operator">:</span> <span class="token string">&#39;blocking&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Call an external API endpoint to get posts</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://.../posts&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> posts <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment">// Get the paths we want to prerender based on posts</span>
  <span class="token comment">// In production environments, prerender all pages</span>
  <span class="token comment">// (slower builds, but faster initial page load)</span>
  <span class="token keyword">const</span> paths <span class="token operator">=</span> posts<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">post</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> post<span class="token punctuation">.</span>id <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token comment">// { fallback: false } means other routes should 404</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> paths<span class="token punctuation">,</span> <span class="token literal-property property">fallback</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,20),o=[e];function c(l,i){return s(),n("div",null,o)}const u=a(p,[["render",c],["__file","get-static-paths.html.vue"]]);export{u as default};
