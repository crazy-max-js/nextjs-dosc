import{_ as o,r as p,o as c,c as u,b as n,d as a,e as t,a as e}from"./app.1ad2624e.js";const r={},l=n("h1",{id:"shallow-routing",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#shallow-routing","aria-hidden":"true"},"#"),a(" Shallow Routing")],-1),i={class:"custom-container details"},d=n("summary",null,"示例",-1),k={href:"https://github.com/vercel/next.js/tree/canary/examples/with-shallow-routing",target:"_blank",rel:"noopener noreferrer"},h=e(`<p>Shallow routing allows you to change the URL without running data fetching methods again, that includes<a href="/docs/guide/basic-features/data-fetching/get-server-side-props"><code>getServerSideProps</code></a>,<a href="/docs/guide/basic-features/data-fetching/get-static-props"><code>getStaticProps</code></a>, and<a href="/docs/guide/api-reference/data-fetching/get-initial-props"><code>getInitialProps</code></a>.</p><p>You&#39;ll receive the updated<code>pathname</code>and the<code>query</code>via the<a href="/docs/guide/api-reference/next/router#router-object"><code>router</code>object</a>(added by<a href="/docs/guide/api-reference/next/router#userouter"><code>useRouter</code></a>or<a href="/docs/guide/api-reference/next/router#withrouter"><code>withRouter</code></a>), without losing state.</p><p>To enable shallow routing, set the<code>shallow</code>option to<code>true</code>. Consider the following example:</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;next/router&#39;</span>

<span class="token comment">// Current URL is &#39;/&#39;</span>
<span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Always do navigations after the first render</span>
    router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/?counter=10&#39;</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">shallow</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// The counter changed!</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>router<span class="token punctuation">.</span>query<span class="token punctuation">.</span>counter<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> Page

</code></pre></div><p>The URL will get updated to<code>/?counter=10</code>. and the page won&#39;t get replaced, only the state of the route is changed.</p>`,5),g={href:"https://reactjs.org/docs/react-component.html#componentdidupdate",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"componentDidUpdate",-1),f=e(`<div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token parameter">prevProps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> pathname<span class="token punctuation">,</span> query <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>router
  <span class="token comment">// verify props have changed to avoid an infinite loop</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>query<span class="token punctuation">.</span>counter <span class="token operator">!==</span> prevProps<span class="token punctuation">.</span>router<span class="token punctuation">.</span>query<span class="token punctuation">.</span>counter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// fetch data based on the new query</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div><h2 id="caveats" tabindex="-1"><a class="header-anchor" href="#caveats" aria-hidden="true">#</a> Caveats</h2><p>Shallow routing<strong>only</strong>works for URL changes in the current page. For example, let&#39;s assume we have another page called<code>pages/about.js</code>, and you run this:</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code>router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/?counter=10&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/about?counter=10&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">shallow</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre></div><p>Since that&#39;s a new page, it&#39;ll unload the current page, load the new one and wait for data fetching even though we asked to do shallow routing.</p><p>When shallow routing is used with middleware it will not ensure the new page matches the current page like previously done without middleware. This is due to middleware being able to rewrite dynamically and can&#39;t be verified client-side without a data fetch which is skipped with shallow, so a shallow route change must always be treated as shallow.</p>`,6);function m(y,_){const s=p("ExternalLinkIcon");return c(),u("div",null,[l,n("details",i,[d,n("ul",null,[n("li",null,[n("a",k,[a("Shallow Routing"),t(s)])])])]),h,n("p",null,[a("You can also watch for URL changes via"),n("a",g,[w,t(s)]),a("as shown below:")]),f])}const v=o(r,[["render",m],["__file","shallow-routing.html.vue"]]);export{v as default};
