import{_ as o,r as p,o as r,c,b as a,d as n,e as t,a as e}from"./app.1ad2624e.js";const l={},i=e('<h1 id="error-handling" tabindex="-1"><a class="header-anchor" href="#error-handling" aria-hidden="true">#</a> Error Handling</h1><p>This documentation explains how you can handle development, server-side, and client-side errors.</p><h2 id="handling-errors-in-development" tabindex="-1"><a class="header-anchor" href="#handling-errors-in-development" aria-hidden="true">#</a> Handling Errors in Development</h2><p>When there is a runtime error during the development phase of your Next.js application, you will encounter an<strong>overlay</strong>. It is a modal that covers the webpage. It is only visible when the development server runs using<code>next dev</code>,<code>npm run dev</code>, or<code>yarn dev</code>and not in production. Fixing the error will automatically dismiss the overlay.</p><p>Here is an example of an overlay:</p><h2 id="handling-server-errors" tabindex="-1"><a class="header-anchor" href="#handling-server-errors" aria-hidden="true">#</a> Handling Server Errors</h2><p>Next.js provides a static 500 page by default to handle server-side errors that occur in your application. You can also<a href="/docs/guide/advanced-features/custom-error-page#customizing-the-500-page">customize this page</a>by creating a<code>pages/500.js</code>file.</p><p>Having a 500 page in your application does not show specific errors to the app user.</p><p>You can also use<a href="/docs/guide/advanced-features/custom-error-page#404-page">404 page</a>to handle specific runtime error like<code>file not found</code>.</p><h2 id="handling-client-errors" tabindex="-1"><a class="header-anchor" href="#handling-client-errors" aria-hidden="true">#</a> Handling Client Errors</h2>',10),u={href:"https://reactjs.org/docs/error-boundaries.html",target:"_blank",rel:"noopener noreferrer"},k=e(`<p>To use Error Boundaries for your Next.js application, you must create a class component<code>ErrorBoundary</code>and wrap the<code>Component</code>prop in the<code>pages/_app.js</code>file. This component will be responsible to:</p><ul><li>Render a fallback UI after an error is thrown- Provide a way to reset the Application&#39;s state- Log error information</li></ul><p>You can create an<code>ErrorBoundary</code>class component by extending<code>React.Component</code>. For example:</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">class</span> <span class="token class-name">ErrorBoundary</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>

    <span class="token comment">// Define a state variable to track whether is an error or not</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">hasError</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">static</span> <span class="token function">getDerivedStateFromError</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Update state so the next render will show the fallback UI</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">hasError</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">componentDidCatch</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> errorInfo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// You can use your own error logging service here</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span> error<span class="token punctuation">,</span> errorInfo <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Check if the error is thrown</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>hasError<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// You can render any custom fallback UI</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Oops, there is an error!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>
            <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span>
            <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">hasError</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
          <span class="token punctuation">&gt;</span></span><span class="token plain-text">
            Try again?
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Return children components in case of no error</span>

    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> ErrorBoundary

</code></pre></div><p>The<code>ErrorBoundary</code>component keeps track of an<code>hasError</code>state. The value of this state variable is a boolean. When the value of<code>hasError</code>is<code>true</code>, then the<code>ErrorBoundary</code>component will render a fallback UI. Otherwise, it will render the children components.</p><p>After creating an<code>ErrorBoundary</code>component, import it in the<code>pages/_app.js</code>file to wrap the<code>Component</code>prop in your Next.js application.</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// Import the ErrorBoundary component</span>
<span class="token keyword">import</span> ErrorBoundary <span class="token keyword">from</span> <span class="token string">&#39;../components/ErrorBoundary&#39;</span>

<span class="token keyword">function</span> <span class="token function">MyApp</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> Component<span class="token punctuation">,</span> pageProps <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token comment">// Wrap the Component prop with ErrorBoundary component</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ErrorBoundary</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>pageProps<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ErrorBoundary</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> MyApp

</code></pre></div>`,7),d={href:"https://reactjs.org/docs/error-boundaries.html",target:"_blank",rel:"noopener noreferrer"},h=a("h3",{id:"reporting-errors",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#reporting-errors","aria-hidden":"true"},"#"),n(" Reporting Errors")],-1),g={href:"https://github.com/vercel/next.js/tree/canary/examples/with-sentry",target:"_blank",rel:"noopener noreferrer"};function m(y,f){const s=p("ExternalLinkIcon");return r(),c("div",null,[i,a("p",null,[n("React"),a("a",u,[n("Error Boundaries"),t(s)]),n("is a graceful way to handle a JavaScript error on the client so that the other parts of the application continue working. In addition to preventing the page from crashing, it allows you to provide a custom fallback component and even log error information.")]),k,a("p",null,[n("You can learn more about"),a("a",d,[n("Error Boundaries"),t(s)]),n("in React's documentation.")]),h,a("p",null,[n("To monitor client errors, use a service like"),a("a",g,[n("Sentry"),t(s)]),n(", Bugsnag or Datadog.")])])}const w=o(l,[["render",m],["__file","error-handling.html.vue"]]);export{w as default};
