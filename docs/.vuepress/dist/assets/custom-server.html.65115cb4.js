import{_ as e,r as o,o as p,c,b as n,d as s,e as t,a as u}from"./app.1ad2624e.js";const r={},l=n("h1",{id:"custom-server",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#custom-server","aria-hidden":"true"},"#"),s(" Custom Server")],-1),i={class:"custom-container details"},k=n("summary",null,"示例",-1),d={href:"https://github.com/vercel/next.js/tree/canary/examples/custom-server",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/vercel/next.js/tree/canary/examples/ssr-caching",target:"_blank",rel:"noopener noreferrer"},m=n("p",null,[s("By default, Next.js includes its own server with"),n("code",null,"next start"),s(". If you have an existing backend, you can still use it with Next.js (this is not a custom server). A custom Next.js server allows you to start a server 100% programmatically in order to use custom server patterns. Most of the time, you will not need this – but it's available for complete customization.")],-1),g=n("strong",null,[s("Note:"),n("strong",null,"A custom server"),s("cannot")],-1),f={href:"https://vercel.com/solutions/nextjs",target:"_blank",rel:"noopener noreferrer"},v=u(`<blockquote><p>Before deciding to use a custom server, please keep in mind that it should only be used when the integrated router of Next.js can&#39;t meet your app requirements. A custom server will remove important performance optimizations, like<strong>serverless functions</strong>and**<a href="/docs/guide/advanced-features/automatic-static-optimization">Automatic Static Optimization</a>.**</p></blockquote><p>Take a look at the following example of a custom server:</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// server.js</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> createServer <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> parse <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;url&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> next <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;next&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> dev <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&#39;production&#39;</span>
<span class="token keyword">const</span> hostname <span class="token operator">=</span> <span class="token string">&#39;localhost&#39;</span>
<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span>
<span class="token comment">// when using middleware \`hostname\` and \`port\` must be provided below</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">{</span> dev<span class="token punctuation">,</span> hostname<span class="token punctuation">,</span> port <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> handle <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">getRequestHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token comment">// Be sure to pass \`true\` as the second argument to \`url.parse\`.</span>
      <span class="token comment">// This tells it to parse the query portion of the URL.</span>
      <span class="token keyword">const</span> parsedUrl <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> pathname<span class="token punctuation">,</span> query <span class="token punctuation">}</span> <span class="token operator">=</span> parsedUrl

      <span class="token keyword">if</span> <span class="token punctuation">(</span>pathname <span class="token operator">===</span> <span class="token string">&#39;/a&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token string">&#39;/a&#39;</span><span class="token punctuation">,</span> query<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pathname <span class="token operator">===</span> <span class="token string">&#39;/b&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token string">&#39;/b&#39;</span><span class="token punctuation">,</span> query<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">await</span> <span class="token function">handle</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> parsedUrl<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Error occurred handling&#39;</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>url<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
      res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">500</span>
      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;internal server error&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&gt; Ready on http://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>hostname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre></div><blockquote><p><code>server.js</code>doesn&#39;t go through babel or webpack. Make sure the syntax and sources this file requires are compatible with the current node version you are running.</p></blockquote><p>To run the custom server you&#39;ll need to update the<code>scripts</code>in<code>package.json</code>like so:</p><div class="language-json" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node server.js&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;next build&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;NODE_ENV=production node server.js&quot;</span>
<span class="token punctuation">}</span>

</code></pre></div><p>The custom server uses the following import to connect the server with the Next.js application:</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> next <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;next&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre></div><p>The above<code>next</code>import is a function that receives an object with the following options:</p><ul><li><code>dev</code>:<code>Boolean</code>- Whether or not to launch Next.js in dev mode. Defaults to<code>false</code>- <code>dir</code>:<code>String</code>- Location of the Next.js project. Defaults to<code>&#39;.&#39;</code>- <code>quiet</code>:<code>Boolean</code>- Hide error messages containing server information. Defaults to<code>false</code>- <code>conf</code>:<code>object</code>- The same object you would use in<a href="/docs/guide/api-reference/next.config.js/introduction">next.config.js</a>. Defaults to<code>{}</code></li></ul><p>The returned<code>app</code>can then be used to let Next.js handle requests as required.</p><h2 id="disabling-file-system-routing" tabindex="-1"><a class="header-anchor" href="#disabling-file-system-routing" aria-hidden="true">#</a> Disabling file-system routing</h2><p>By default,<code>Next</code>will serve each file in the<code>pages</code>folder under a pathname matching the filename. If your project uses a custom server, this behavior may result in the same content being served from multiple paths, which can present problems with SEO and UX.</p><p>To disable this behavior and prevent routing based on files in<code>pages</code>, open<code>next.config.js</code>and disable the<code>useFileSystemPublicRoutes</code>config:</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">useFileSystemPublicRoutes</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

</code></pre></div><blockquote><p>Note that<code>useFileSystemPublicRoutes</code>disables filename routes from SSR; client-side routing may still access those paths. When using this option, you should guard against navigation to routes you do not want programmatically.</p></blockquote><blockquote><p>You may also wish to configure the client-side router to disallow client-side redirects to filename routes; for that refer to<a href="/docs/guide/api-reference/next/router#routerbeforepopstate"><code>router.beforePopState</code></a>.</p></blockquote>`,17);function y(b,w){const a=o("ExternalLinkIcon");return p(),c("div",null,[l,n("details",i,[k,n("ul",null,[n("li",null,[n("a",d,[s("Custom Server"),t(a)]),s("- "),n("a",h,[s("SSR Caching"),t(a)])])])]),m,n("blockquote",null,[n("p",null,[g,s("be deployed on"),n("a",f,[s("Vercel"),t(a)]),s(".")])]),v])}const x=e(r,[["render",y],["__file","custom-server.html.vue"]]);export{x as default};
