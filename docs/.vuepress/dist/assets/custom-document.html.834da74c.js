import{_ as t,r as e,o,c as p,b as n,d as a,e as c,a as l}from"./app.1ad2624e.js";const u={},i=n("h1",{id:"custom-document",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#custom-document","aria-hidden":"true"},"#"),a(" Custom Document")],-1),d=n("strong",null,"Note",-1),r=n("code",null,"app/",-1),k=n("code",null,"app/",-1),g=n("code",null,"html",-1),m=n("code",null,"body",-1),h={href:"https://beta.nextjs.org/docs/upgrade-guide",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"app/",-1),f=l(`<p>A custom<code>Document</code>can update the<code>&lt;html&gt;</code>and<code>&lt;body&gt;</code>tags used to render a<a href="/docs/guide/basic-features/pages">Page</a>. This file is only rendered on the server, so event handlers like<code>onClick</code>cannot be used in<code>_document</code>.</p><p>To override the default<code>Document</code>, create the file<code>pages/_document.js</code>as shown below:</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Html<span class="token punctuation">,</span> Head<span class="token punctuation">,</span> Main<span class="token punctuation">,</span> NextScript <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;next/document&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Document</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Html</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Head</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Main</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NextScript</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Html</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre></div><p>The code above is the default<code>Document</code>added by Next.js. Custom attributes are allowed as props. For example, we might want to add<code>lang=&quot;en&quot;</code>to the<code>&lt;html&gt;</code>tag:</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Html</span></span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">

</span></code></pre></div><p>Or add a<code>className</code>to the<code>body</code>tag:</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bg-white<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">

</span></code></pre></div><p><code>&lt;Html&gt;</code>,<code>&lt;Head /&gt;</code>,<code>&lt;Main /&gt;</code>and<code>&lt;NextScript /&gt;</code>are required for the page to be properly rendered.</p><h2 id="caveats" tabindex="-1"><a class="header-anchor" href="#caveats" aria-hidden="true">#</a> Caveats</h2><ul><li>The<code>&lt;Head /&gt;</code>component used in<code>_document</code>is not the same as<a href="/docs/guide/api-reference/next/head"><code>next/head</code></a>. The<code>&lt;Head /&gt;</code>component used here should only be used for any<code>&lt;head&gt;</code>code that is common for all pages. For all other cases, such as<code>&lt;title&gt;</code>tags, we recommend using<a href="/docs/guide/api-reference/next/head"><code>next/head</code></a>in your pages or components.- React components outside of<code>&lt;Main /&gt;</code>will not be initialized by the browser. Donotadd application logic here or custom CSS (like<code>styled-jsx</code>). If you need shared components in all your pages (like a menu or a toolbar), read<a href="/docs/guide/basic-features/layouts">Layouts</a>instead.- <code>Document</code>currently does not support Next.js<a href="/docs/guide/basic-features/data-fetching/overview">Data Fetching methods</a>like<a href="/docs/guide/basic-features/data-fetching/get-static-props"><code>getStaticProps</code></a>or<a href="/docs/guide/basic-features/data-fetching/get-server-side-props"><code>getServerSideProps</code></a>.</li></ul><h2 id="customizing-renderpage" tabindex="-1"><a class="header-anchor" href="#customizing-renderpage" aria-hidden="true">#</a> Customizing renderPage</h2><blockquote><p>**Note:**This is advanced and only needed for libraries like CSS-in-JS to support server-side rendering. This is not needed for built-in<code>styled-jsx</code>support.</p></blockquote><p>For<a href="/docs/guide/advanced-featuresatures/react-18">React 18</a>support, we recommend avoiding customizing<code>getInitialProps</code>and<code>renderPage</code>, if possible.</p><p>The<code>ctx</code>object shown below is equivalent to the one received in<a href="/docs/guide/api-reference/data-fetching/get-initial-props#context-object"><code>getInitialProps</code></a>, with the addition of<code>renderPage</code>.</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> Document<span class="token punctuation">,</span> <span class="token punctuation">{</span> Html<span class="token punctuation">,</span> Head<span class="token punctuation">,</span> Main<span class="token punctuation">,</span> NextScript <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;next/document&#39;</span>

<span class="token keyword">class</span> <span class="token class-name">MyDocument</span> <span class="token keyword">extends</span> <span class="token class-name">Document</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token function">getInitialProps</span><span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> originalRenderPage <span class="token operator">=</span> ctx<span class="token punctuation">.</span>renderPage

    <span class="token comment">// Run the React rendering logic synchronously</span>
    ctx<span class="token punctuation">.</span><span class="token function-variable function">renderPage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
      <span class="token function">originalRenderPage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token comment">// Useful for wrapping the whole react tree</span>
        <span class="token function-variable function">enhanceApp</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">App</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> App<span class="token punctuation">,</span>
        <span class="token comment">// Useful for wrapping in a per-page basis</span>
        <span class="token function-variable function">enhanceComponent</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">Component</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Component<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment">// Run the parent \`getInitialProps\`, it now includes the custom \`renderPage\`</span>
    <span class="token keyword">const</span> initialProps <span class="token operator">=</span> <span class="token keyword">await</span> Document<span class="token punctuation">.</span><span class="token function">getInitialProps</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>

    <span class="token keyword">return</span> initialProps
  <span class="token punctuation">}</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Html</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Head</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Main</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NextScript</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Html</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> MyDocument

</code></pre></div><blockquote><p><strong>Note</strong>:<code>getInitialProps</code>in<code>_document</code>is not called during client-side transitions.</p></blockquote><h2 id="typescript" tabindex="-1"><a class="header-anchor" href="#typescript" aria-hidden="true">#</a> TypeScript</h2><p>You can use the built-in<code>DocumentContext</code>type and change the file name to<code>./pages/_document.tsx</code>like so:</p><div class="language-tsx" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> Document<span class="token punctuation">,</span> <span class="token punctuation">{</span> DocumentContext<span class="token punctuation">,</span> DocumentInitialProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;next/document&#39;</span>

<span class="token keyword">class</span> <span class="token class-name">MyDocument</span> <span class="token keyword">extends</span> <span class="token class-name">Document</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token function">getInitialProps</span><span class="token punctuation">(</span>
    ctx<span class="token operator">:</span> DocumentContext
  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>DocumentInitialProps<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> initialProps <span class="token operator">=</span> <span class="token keyword">await</span> Document<span class="token punctuation">.</span><span class="token function">getInitialProps</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>

    <span class="token keyword">return</span> initialProps
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> MyDocument

</code></pre></div>`,19);function y(b,w){const s=e("ExternalLinkIcon");return o(),p("div",null,[i,n("blockquote",null,[n("p",null,[d,a(": Next.js 13 introduces the"),r,a("directory (beta). This new directory has support for layouts, nested routes, and uses Server Components by default. Inside"),k,a(", you can modify the initial"),g,a("and"),m,a("tags using a root layout."),n("a",h,[a("Learn more about incrementally adopting"),x,c(s)]),a(".")])]),f])}const v=t(u,[["render",y],["__file","custom-document.html.vue"]]);export{v as default};
