import{_ as o,r as p,o as c,c as u,b as n,d as s,e as t,a as e}from"./app.1ad2624e.js";const l={},r=e(`<h1 id="next-router" tabindex="-1"><a class="header-anchor" href="#next-router" aria-hidden="true">#</a> next/router</h1><blockquote><p>Before moving forward, we recommend you to read<a href="/docs/guide/routing/introduction">Routing Introduction</a>first.</p></blockquote><h2 id="userouter" tabindex="-1"><a class="header-anchor" href="#userouter" aria-hidden="true">#</a> useRouter</h2><p>If you want to access the<a href="#router-object"><code>router</code>object</a>inside any function component in your app, you can use the<code>useRouter</code>hook, take a look at the following example:</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;next/router&#39;</span>

<span class="token keyword">function</span> <span class="token function">ActiveLink</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children<span class="token punctuation">,</span> href <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> style <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">marginRight</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    <span class="token literal-property property">color</span><span class="token operator">:</span> router<span class="token punctuation">.</span>asPath <span class="token operator">===</span> href <span class="token operator">?</span> <span class="token string">&#39;red&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;black&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>href<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>href<span class="token punctuation">}</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>style<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> ActiveLink

</code></pre></div>`,5),i=n("code",null,"useRouter",-1),k={href:"https://reactjs.org/docs/hooks-intro.html",target:"_blank",rel:"noopener noreferrer"},d=n("a",{href:"#withrouter"},"withRouter",-1),h=e('<h2 id="router-object" tabindex="-1"><a class="header-anchor" href="#router-object" aria-hidden="true">#</a> router object</h2><p>The following is the definition of the<code>router</code>object returned by both<a href="#userouter"><code>useRouter</code></a>and<a href="#withrouter"><code>withRouter</code></a>:</p><ul><li><code>pathname</code>:<code>String</code>- The path for current route file that comes after<code>/pages</code>. Therefore,<code>basePath</code>,<code>locale</code>and trailing slash (<code>trailingSlash: true</code>) are not included.- <code>query</code>:<code>Object</code>- The query string parsed to an object, including<a href="/docs/guide/routing/dynamic-routes">dynamic route</a>parameters. It will be an empty object during prerendering if the page doesn&#39;t use<a href="/docs/guide/basic-features/data-fetching/get-server-side-props">Server-side Rendering</a>. Defaults to<code>{}</code>- <code>asPath</code>:<code>String</code>- The path as shown in the browser including the search params and respecting the<code>trailingSlash</code>configuration.<code>basePath</code>and<code>locale</code>are not included.- <code>isFallback</code>:<code>boolean</code>- Whether the current page is in<a href="/docs/guide/api-reference/data-fetching/get-static-paths#fallback-pages">fallback mode</a>.- <code>basePath</code>:<code>String</code>- The active<a href="/docs/guide/api-reference/next.config.js/basepath">basePath</a>(if enabled).- <code>locale</code>:<code>String</code>- The active locale (if enabled).- <code>locales</code>:<code>String[]</code>- All supported locales (if enabled).- <code>defaultLocale</code>:<code>String</code>- The current default locale (if enabled).- <code>domainLocales</code>:<code>Array&lt;{domain, defaultLocale, locales}&gt;</code>- Any configured domain locales.- <code>isReady</code>:<code>boolean</code>- Whether the router fields are updated client-side and ready for use. Should only be used inside of<code>useEffect</code>methods and not for conditionally rendering on the server. See related docs for use case with<a href="/docs/guide/advanced-features/automatic-static-optimization">automatically statically optimized pages</a>- <code>isPreview</code>:<code>boolean</code>- Whether the application is currently in<a href="/docs/guide/advanced-features/preview-mode">preview mode</a>.</li></ul><blockquote><p>Using the<code>asPath</code>field may lead to a mismatch between client and server if the page is rendered using server-side rendering or<a href="/docs/guide/advanced-features/automatic-static-optimization">automatic static optimization</a>. Avoid using<code>asPath</code>until the<code>isReady</code>field is<code>true</code>.</p></blockquote><p>The following methods are included inside<code>router</code>:</p><h3 id="router-push" tabindex="-1"><a class="header-anchor" href="#router-push" aria-hidden="true">#</a> router.push</h3>',6),g={class:"custom-container details"},f=n("summary",null,"示例",-1),m={href:"https://github.com/vercel/next.js/tree/canary/examples/using-router",target:"_blank",rel:"noopener noreferrer"},y=e(`<p>Handles client-side transitions, this method is useful for cases where<a href="/docs/guide/api-reference/next/link"><code>next/link</code></a>is not enough.</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code>router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token keyword">as</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span>

</code></pre></div>`,2),w=n("code",null,"url",-1),b=n("code",null,"UrlObject | String",-1),x={href:"https://nodejs.org/api/url.html#legacy-urlobject",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"UrlObject",-1),_=n("code",null,"as",-1),j=n("code",null,"UrlObject | String",-1),R=n("a",{href:"/docs/tag/v9.5.2/api-reference/next/link#dynamic-routes"},"previous docs",-1),C=n("code",null,"href",-1),P=n("code",null,"href",-1),S=n("code",null,"as",-1),q=n("a",{href:"/docs/tag/v9.5.2/api-reference/next/link#dynamic-routes"},"previous docs",-1),U=n("code",null,"options",-1),E=n("code",null,"scroll",-1),T=n("code",null,"true",-1),L=n("a",{href:"/docs/guide/routing/shallow-routing"},[n("code",null,"shallow")],-1),I=n("a",{href:"/docs/guide/basic-features/data-fetching/get-static-props"},[n("code",null,"getStaticProps")],-1),N=n("a",{href:"/docs/guide/basic-features/data-fetching/get-server-side-props"},[n("code",null,"getServerSideProps")],-1),A=n("a",{href:"/docs/guide/api-reference/data-fetching/get-initial-props"},[n("code",null,"getInitialProps")],-1),W=n("code",null,"false",-1),O=n("code",null,"locale",-1),F=n("code",null,"router.push",-1),M={href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/location",target:"_blank",rel:"noopener noreferrer"},D=e(`<h4 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h4><p>Navigating to<code>pages/about.js</code>, which is a predefined route:</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;next/router&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/about&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      Click me
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre></div><p>Navigating<code>pages/post/[pid].js</code>, which is a dynamic route:</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;next/router&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/post/abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      Click me
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre></div><p>Redirecting the user to<code>pages/login.js</code>, useful for pages behind<a href="/docs/authentication">authentication</a>:</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;next/router&#39;</span>

<span class="token comment">// Here you would fetch and return the user</span>
<span class="token keyword">const</span> <span class="token function-variable function">useUser</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token literal-property property">loading</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> user<span class="token punctuation">,</span> loading <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>user <span class="token operator">||</span> loading<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>user<span class="token punctuation">,</span> loading<span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Redirecting...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">}</span>

</code></pre></div><h4 id="resetting-state-after-navigation" tabindex="-1"><a class="header-anchor" href="#resetting-state-after-navigation" aria-hidden="true">#</a> Resetting state after navigation</h4><p>When navigating to the same page in Next.js, the page&#39;s state<strong>will not</strong>be reset by default as react does not unmount unless the parent component has changed.</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// pages/[slug].js</span>
<span class="token keyword">import</span> Link <span class="token keyword">from</span> <span class="token string">&#39;next/link&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;next/router&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Page: </span><span class="token punctuation">{</span>router<span class="token punctuation">.</span>query<span class="token punctuation">.</span>slug<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Count: </span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Increase count</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/one<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">one</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/two<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">two</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre></div><p>In the above example, navigating between<code>/one</code>and<code>/two</code><strong>will not</strong>reset the count . The<code>useState</code>is maintained between renders because the top-level React component,<code>Page</code>, is the same.</p><p>If you do not want this behavior, you have a couple of options:</p><ul><li>Manually ensure each state is updated using<code>useEffect</code>. In the above example, that could look like:</li></ul><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>router<span class="token punctuation">.</span>query<span class="token punctuation">.</span>slug<span class="token punctuation">]</span><span class="token punctuation">)</span>

</code></pre></div>`,14),H=n("code",null,"key",-1),z={href:"https://reactjs.org/docs/lists-and-keys.html#keys",target:"_blank",rel:"noopener noreferrer"},B=e(`<div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// pages/_app.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;next/router&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">MyApp</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> Component<span class="token punctuation">,</span> pageProps <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span></span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>router<span class="token punctuation">.</span>asPath<span class="token punctuation">}</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>pageProps<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token punctuation">}</span>

</code></pre></div><h4 id="with-url-object" tabindex="-1"><a class="header-anchor" href="#with-url-object" aria-hidden="true">#</a> With URL object</h4><p>You can use a URL object in the same way you can use it for<a href="/docs/guide/api-reference/next/link#with-url-object"><code>next/link</code></a>. Works for both the<code>url</code>and<code>as</code>parameters:</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;next/router&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">ReadMore</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> post <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>button
      type<span class="token operator">=</span><span class="token string">&quot;button&quot;</span>
      onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          <span class="token literal-property property">pathname</span><span class="token operator">:</span> <span class="token string">&#39;/post/[pid]&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">pid</span><span class="token operator">:</span> post<span class="token punctuation">.</span>id <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">}</span>
    <span class="token operator">&gt;</span>
      Click here to read more
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre></div><h3 id="router-replace" tabindex="-1"><a class="header-anchor" href="#router-replace" aria-hidden="true">#</a> router.replace</h3><p>Similar to the<code>replace</code>prop in<a href="/docs/guide/api-reference/next/link"><code>next/link</code></a>,<code>router.replace</code>will prevent adding a new URL entry into the<code>history</code>stack.</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code>router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token keyword">as</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span>

</code></pre></div><ul><li>The API for<code>router.replace</code>is exactly the same as the API for<a href="#routerpush"><code>router.push</code></a>.</li></ul><h4 id="usage-1" tabindex="-1"><a class="header-anchor" href="#usage-1" aria-hidden="true">#</a> Usage</h4><p>Take a look at the following example:</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;next/router&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;/home&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      Click me
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre></div><h3 id="router-prefetch" tabindex="-1"><a class="header-anchor" href="#router-prefetch" aria-hidden="true">#</a> router.prefetch</h3><p>Prefetch pages for faster client-side transitions. This method is only useful for navigations without<a href="/docs/guide/api-reference/next/link"><code>next/link</code></a>, as<code>next/link</code>takes care of prefetching pages automatically.</p><blockquote><p>This is a production only feature. Next.js doesn&#39;t prefetch pages in development.</p></blockquote><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code>router<span class="token punctuation">.</span><span class="token function">prefetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token keyword">as</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span>

</code></pre></div><ul><li><code>url</code>- The URL to prefetch, including explicit routes (e.g.<code>/dashboard</code>) and dynamic routes (e.g.<code>/product/[id]</code>)- <code>as</code>- Optional decorator for<code>url</code>. Before Next.js 9.5.3 this was used to prefetch dynamic routes, check our<a href="/docs/tag/v9.5.2/api-reference/next/link#dynamic-routes">previous docs</a>to see how it worked- <code>options</code>- Optional object with the following allowed fields:- <code>locale</code>- allows providing a different locale from the active one. If<code>false</code>,<code>url</code>has to include the locale as the active locale won&#39;t be used.</li></ul><h4 id="usage-2" tabindex="-1"><a class="header-anchor" href="#usage-2" aria-hidden="true">#</a> Usage</h4><p>Let&#39;s say you have a login page, and after a login, you redirect the user to the dashboard. For that case, we can prefetch the dashboard to make a faster transition, like in the following example:</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useCallback<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;next/router&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> handleSubmit <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/api/login&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token comment">/* Form data */</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// Do a fast client-side transition to the already prefetched dashboard page</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/dashboard&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Prefetch the dashboard page</span>
    router<span class="token punctuation">.</span><span class="token function">prefetch</span><span class="token punctuation">(</span><span class="token string">&#39;/dashboard&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleSubmit<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span><span class="token comment">/* Form fields */</span><span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Login</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre></div><h3 id="router-beforepopstate" tabindex="-1"><a class="header-anchor" href="#router-beforepopstate" aria-hidden="true">#</a> router.beforePopState</h3>`,20),Y=n("a",{href:"/docs/guide/advanced-features/custom-server"},"Custom Server",-1),V={href:"https://developer.mozilla.org/en-US/docs/Web/Events/popstate",target:"_blank",rel:"noopener noreferrer"},$=e(`<div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code>router<span class="token punctuation">.</span><span class="token function">beforePopState</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span>

</code></pre></div><ul><li><code>cb</code>- The function to run on incoming<code>popstate</code>events. The function receives the state of the event as an object with the following props:- <code>url</code>:<code>String</code>- the route for the new state. This is usually the name of a<code>page</code>- <code>as</code>:<code>String</code>- the url that will be shown in the browser- <code>options</code>:<code>Object</code>- Additional options sent by<a href="#routerpush">router.push</a></li></ul><p>If<code>cb</code>returns<code>false</code>, the Next.js router will not handle<code>popstate</code>, and you&#39;ll be responsible for handling it in that case. See<a href="/docs/guide/advanced-features/custom-server#disabling-file-system-routing">Disabling file-system routing</a>.</p><h4 id="usage-3" tabindex="-1"><a class="header-anchor" href="#usage-3" aria-hidden="true">#</a> Usage</h4><p>You could use<code>beforePopState</code>to manipulate the request, or force a SSR refresh, as in the following example:</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;next/router&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    router<span class="token punctuation">.</span><span class="token function">beforePopState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> url<span class="token punctuation">,</span> <span class="token keyword">as</span><span class="token punctuation">,</span> options <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// I only want to allow these two routes!</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">as</span> <span class="token operator">!==</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">as</span> <span class="token operator">!==</span> <span class="token string">&#39;/other&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Have SSR render bad routes as a 404.</span>
        window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token keyword">as</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Welcome to the page</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">}</span>

</code></pre></div><h3 id="router-back" tabindex="-1"><a class="header-anchor" href="#router-back" aria-hidden="true">#</a> router.back</h3><p>Navigate back in history. Equivalent to clicking the browser’s back button. It executes<code>window.history.back()</code>.</p><h4 id="usage-4" tabindex="-1"><a class="header-anchor" href="#usage-4" aria-hidden="true">#</a> Usage</h4><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;next/router&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> router<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      Click here to go back
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre></div><h3 id="router-reload" tabindex="-1"><a class="header-anchor" href="#router-reload" aria-hidden="true">#</a> router.reload</h3><p>Reload the current URL. Equivalent to clicking the browser’s refresh button. It executes<code>window.location.reload()</code>.</p><h4 id="usage-5" tabindex="-1"><a class="header-anchor" href="#usage-5" aria-hidden="true">#</a> Usage</h4><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;next/router&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> router<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      Click here to reload
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre></div><h3 id="router-events" tabindex="-1"><a class="header-anchor" href="#router-events" aria-hidden="true">#</a> router.events</h3>`,15),J={class:"custom-container details"},G=n("summary",null,"示例",-1),K={href:"https://github.com/vercel/next.js/tree/canary/examples/with-loading",target:"_blank",rel:"noopener noreferrer"},Q=e(`<p>You can listen to different events happening inside the Next.js Router. Here&#39;s a list of supported events:</p><ul><li><code>routeChangeStart(url, { shallow })</code>- Fires when a route starts to change- <code>routeChangeComplete(url, { shallow })</code>- Fires when a route changed completely- <code>routeChangeError(err, url, { shallow })</code>- Fires when there&#39;s an error when changing routes, or a route load is cancelled- <code>err.cancelled</code>- Indicates if the navigation was cancelled- <code>beforeHistoryChange(url, { shallow })</code>- Fires before changing the browser&#39;s history- <code>hashChangeStart(url, { shallow })</code>- Fires when the hash will change but not the page- <code>hashChangeComplete(url, { shallow })</code>- Fires when the hash has changed but not the page</li></ul><blockquote><p>**Note:**Here<code>url</code>is the URL shown in the browser, including the<a href="/docs/guide/api-reference/next.config.js/basepath"><code>basePath</code></a>.</p></blockquote><h4 id="usage-6" tabindex="-1"><a class="header-anchor" href="#usage-6" aria-hidden="true">#</a> Usage</h4><p>For example, to listen to the router event<code>routeChangeStart</code>, open or create<code>pages/_app.js</code>and subscribe to the event, like so:</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;next/router&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">MyApp</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> Component<span class="token punctuation">,</span> pageProps <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token function-variable function">handleRouteChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> <span class="token punctuation">{</span> shallow <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">App is changing to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>
          shallow <span class="token operator">?</span> <span class="token string">&#39;with&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;without&#39;</span>
        <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> shallow routing</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    router<span class="token punctuation">.</span>events<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;routeChangeStart&#39;</span><span class="token punctuation">,</span> handleRouteChange<span class="token punctuation">)</span>

    <span class="token comment">// If the component is unmounted, unsubscribe</span>
    <span class="token comment">// from the event with the \`off\` method:</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      router<span class="token punctuation">.</span>events<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">&#39;routeChangeStart&#39;</span><span class="token punctuation">,</span> handleRouteChange<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>pageProps<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token punctuation">}</span>

</code></pre></div><blockquote><p>We use a<a href="/docs/guide/advanced-features/custom-app">Custom App</a>(<code>pages/_app.js</code>) for this example to subscribe to the event because it&#39;s not unmounted on page navigations, but you can subscribe to router events on any component in your application.</p></blockquote>`,7),X={href:"https://reactjs.org/docs/hooks-effect.html",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://reactjs.org/docs/react-component.html#componentdidmount",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://reactjs.org/docs/react-component.html#componentwillunmount",target:"_blank",rel:"noopener noreferrer"},sn=e(`<p>If a route load is cancelled (for example, by clicking two links rapidly in succession),<code>routeChangeError</code>will fire. And the passed<code>err</code>will contain a<code>cancelled</code>property set to<code>true</code>, as in the following example:</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;next/router&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">MyApp</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> Component<span class="token punctuation">,</span> pageProps <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token function-variable function">handleRouteChangeError</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> url</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>cancelled<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Route to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> was cancelled!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    router<span class="token punctuation">.</span>events<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;routeChangeError&#39;</span><span class="token punctuation">,</span> handleRouteChangeError<span class="token punctuation">)</span>

    <span class="token comment">// If the component is unmounted, unsubscribe</span>
    <span class="token comment">// from the event with the \`off\` method:</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      router<span class="token punctuation">.</span>events<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">&#39;routeChangeError&#39;</span><span class="token punctuation">,</span> handleRouteChangeError<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>pageProps<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token punctuation">}</span>

</code></pre></div><h2 id="potential-eslint-errors" tabindex="-1"><a class="header-anchor" href="#potential-eslint-errors" aria-hidden="true">#</a> Potential ESLint errors</h2>`,3),an=n("code",null,"router",-1),tn={href:"https://typescript-eslint.io/rules/no-floating-promises",target:"_blank",rel:"noopener noreferrer"},en=e(`<p>If your application needs this rule, you should either<code>void</code>the promise – or use an<code>async</code>function,<code>await</code>the Promise, then void the function call.<strong>This is not applicable when the method is called from inside an<code>onClick</code>handler</strong>.</p><p>The affected methods are:</p><ul><li><code>router.push</code>- <code>router.replace</code>- <code>router.prefetch</code></li></ul><h3 id="potential-solutions" tabindex="-1"><a class="header-anchor" href="#potential-solutions" aria-hidden="true">#</a> Potential solutions</h3><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;next/router&#39;</span>

<span class="token comment">// Here you would fetch and return the user</span>
<span class="token keyword">const</span> <span class="token function-variable function">useUser</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token literal-property property">loading</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> user<span class="token punctuation">,</span> loading <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// disable the linting on the next line - This is the cleanest solution</span>
    <span class="token comment">// eslint-disable-next-line no-floating-promises</span>
    router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span>

    <span class="token comment">// void the Promise returned by router.push</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>user <span class="token operator">||</span> loading<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">void</span> router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// or use an async function, await the Promise, then void the function call</span>
    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handleRouteChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>user <span class="token operator">||</span> loading<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">await</span> router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">handleRouteChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>user<span class="token punctuation">,</span> loading<span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Redirecting...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">}</span>

</code></pre></div><h2 id="withrouter" tabindex="-1"><a class="header-anchor" href="#withrouter" aria-hidden="true">#</a> withRouter</h2><p>If<a href="#userouter"><code>useRouter</code></a>is not the best fit for you,<code>withRouter</code>can also add the same<a href="#router-object"><code>router</code>object</a>to any component.</p><h3 id="usage-7" tabindex="-1"><a class="header-anchor" href="#usage-7" aria-hidden="true">#</a> Usage</h3><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> withRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;next/router&#39;</span>

<span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> router <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>router<span class="token punctuation">.</span>pathname<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">withRouter</span><span class="token punctuation">(</span>Page<span class="token punctuation">)</span>

</code></pre></div><h3 id="typescript" tabindex="-1"><a class="header-anchor" href="#typescript" aria-hidden="true">#</a> TypeScript</h3><p>To use class components with<code>withRouter</code>, the component needs to accept a router prop:</p><div class="language-tsx" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> withRouter<span class="token punctuation">,</span> NextRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;next/router&#39;</span>

<span class="token keyword">interface</span> <span class="token class-name">WithRouterProps</span> <span class="token punctuation">{</span>
  router<span class="token operator">:</span> NextRouter
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">MyComponentProps</span> <span class="token keyword">extends</span> <span class="token class-name">WithRouterProps</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>Component<span class="token operator">&lt;</span>MyComponentProps<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>router<span class="token punctuation">.</span>pathname<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">withRouter</span><span class="token punctuation">(</span>MyComponent<span class="token punctuation">)</span>

</code></pre></div>`,12);function on(pn,cn){const a=p("ExternalLinkIcon");return c(),u("div",null,[r,n("blockquote",null,[n("p",null,[i,s("is a"),n("a",k,[s("React Hook"),t(a)]),s(", meaning it cannot be used with classes. You can either use"),d,s("or wrap your class in a function component.")])]),h,n("details",g,[f,n("ul",null,[n("li",null,[n("a",m,[s("Using Router"),t(a)])])])]),y,n("ul",null,[n("li",null,[w,s(":"),b,s("- The URL to navigate to (see"),n("a",x,[s("Node.JS URL module documentation"),t(a)]),s("for"),v,s("properties).- "),_,s(":"),j,s("- Optional decorator for the path that will be shown in the browser URL bar. Before Next.js 9.5.3 this was used for dynamic routes, check our"),R,s("to see how it worked. Note: when this path differs from the one provided in"),C,s("the previous"),P,s("/"),S,s("behavior is used as shown in the"),q,s("- "),U,s("- Optional object with the following configuration options:- "),E,s("- Optional boolean, controls scrolling to the top of the page after navigation. Defaults to"),T,s("- "),L,s(": Update the path of the current page without rerunning"),I,s(","),N,s("or"),A,s(". Defaults to"),W,s("- "),O,s("- Optional string, indicates locale of the new page")])]),n("blockquote",null,[n("p",null,[s("You don't need to use"),F,s("for external URLs."),n("a",M,[s("window.location"),t(a)]),s("is better suited for those cases.")])]),D,n("ul",null,[n("li",null,[s("Use a React"),H,s("to"),n("a",z,[s("tell React to remount the component"),t(a)]),s(". To do this for all pages, you can use a custom app:")])]),B,n("p",null,[s("In some cases (for example, if using a"),Y,s("), you may wish to listen to"),n("a",V,[s("popstate"),t(a)]),s("and do something before the router acts on it.")]),$,n("details",J,[G,n("ul",null,[n("li",null,[n("a",K,[s("With a page loading indicator"),t(a)])])])]),Q,n("p",null,[s("Router events should be registered when a component mounts ("),n("a",X,[s("useEffect"),t(a)]),s("or"),n("a",Z,[s("componentDidMount"),t(a)]),s("/"),n("a",nn,[s("componentWillUnmount"),t(a)]),s(") or imperatively when an event happens.")]),sn,n("p",null,[s("Certain methods accessible on the"),an,s("object return a Promise. If you have the ESLint rule,"),n("a",tn,[s("no-floating-promises"),t(a)]),s("enabled, consider disabling it either globally, or for the affected line.")]),en])}const ln=o(l,[["render",on],["__file","router.html.vue"]]);export{ln as default};
