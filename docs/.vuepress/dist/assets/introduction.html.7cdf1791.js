import{_ as p,r as o,o as c,c as l,b as n,e as t,d as e,a}from"./app.1ad2624e.js";const i={},u=a(`<h1 id="routing" tabindex="-1"><a class="header-anchor" href="#routing" aria-hidden="true">#</a> Routing</h1><p>Next.js has a file-system based router built on the<a href="/docs/guide/basic-features/pages">concept of pages</a>.</p><p>When a file is added to the<code>pages</code>directory, it&#39;s automatically available as a route.</p><p>The files inside the<code>pages</code>directory can be used to define most common patterns.</p><h4 id="index-routes" tabindex="-1"><a class="header-anchor" href="#index-routes" aria-hidden="true">#</a> Index routes</h4><p>The router will automatically route files named<code>index</code>to the root of the directory.</p><ul><li><code>pages/index.js</code>→<code>/</code>- <code>pages/blog/index.js</code>→<code>/blog</code></li></ul><h4 id="nested-routes" tabindex="-1"><a class="header-anchor" href="#nested-routes" aria-hidden="true">#</a> Nested routes</h4><p>The router supports nested files. If you create a nested folder structure, files will automatically be routed in the same way still.</p><ul><li><code>pages/blog/first-post.js</code>→<code>/blog/first-post</code>- <code>pages/dashboard/settings/username.js</code>→<code>/dashboard/settings/username</code></li></ul><h4 id="dynamic-route-segments" tabindex="-1"><a class="header-anchor" href="#dynamic-route-segments" aria-hidden="true">#</a> Dynamic route segments</h4><p>To match a dynamic segment, you can use the bracket syntax. This allows you to match named parameters.</p><ul><li><code>pages/blog/[slug].js</code>→<code>/blog/:slug</code>(<code>/blog/hello-world</code>)- <code>pages/[username]/settings.js</code>→<code>/:username/settings</code>(<code>/foo/settings</code>)- <code>pages/post/[...all].js</code>→<code>/post/*</code>(<code>/post/2020/id/title</code>)</li></ul><blockquote><p>Check out the<a href="/docs/guide/routing/dynamic-routes">Dynamic Routes documentation</a>to learn more about how they work.</p></blockquote><h2 id="linking-between-pages" tabindex="-1"><a class="header-anchor" href="#linking-between-pages" aria-hidden="true">#</a> Linking between pages</h2><p>The Next.js router allows you to do client-side route transitions between pages, similar to a single-page application.</p><p>A React component called<code>Link</code>is provided to do this client-side route transition.</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> Link <span class="token keyword">from</span> <span class="token string">&#39;next/link&#39;</span>

<span class="token keyword">function</span> <span class="token function">Home</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Home</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/about<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">About Us</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/blog/hello-world<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Blog Post</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> Home

</code></pre></div><p>The example above uses multiple links. Each one maps a path (<code>href</code>) to a known page:</p><ul><li><code>/</code>→<code>pages/index.js</code>- <code>/about</code>→<code>pages/about.js</code>- <code>/blog/hello-world</code>→<code>pages/blog/[slug].js</code></li></ul><p>Any<code>&lt;Link /&gt;</code>in the viewport (initially or through scroll) will be prefetched by default (including the corresponding data) for pages using<a href="/docs/guide/basic-features/data-fetching/get-static-props">Static Generation</a>. The corresponding data for<a href="/docs/guide/basic-features/data-fetching/get-server-side-props">server-rendered</a>routes is fetchedonly whenthe<code>&lt;Link /&gt;</code>is clicked.</p><h3 id="linking-to-dynamic-paths" tabindex="-1"><a class="header-anchor" href="#linking-to-dynamic-paths" aria-hidden="true">#</a> Linking to dynamic paths</h3><p>You can also use interpolation to create the path, which comes in handy for<a href="#dynamic-route-segments">dynamic route segments</a>. For example, to show a list of posts which have been passed to the component as a prop:</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> Link <span class="token keyword">from</span> <span class="token string">&#39;next/link&#39;</span>

<span class="token keyword">function</span> <span class="token function">Posts</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> posts <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>posts<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">post</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">href</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/blog/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>slug<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> Posts

</code></pre></div>`,24),r={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"encodeURIComponent",-1),d=a(`<p>Alternatively, using a URL Object:</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> Link <span class="token keyword">from</span> <span class="token string">&#39;next/link&#39;</span>

<span class="token keyword">function</span> <span class="token function">Posts</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> posts <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>posts<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">post</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span>
            <span class="token attr-name">href</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>
              <span class="token literal-property property">pathname</span><span class="token operator">:</span> <span class="token string">&#39;/blog/[slug]&#39;</span><span class="token punctuation">,</span>
              <span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">slug</span><span class="token operator">:</span> post<span class="token punctuation">.</span>slug <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
          <span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> Posts

</code></pre></div><p>Now, instead of using interpolation to create the path, we use a URL object in<code>href</code>where:</p><ul><li><code>pathname</code>is the name of the page in the<code>pages</code>directory.<code>/blog/[slug]</code>in this case.- <code>query</code>is an object with the dynamic segment.<code>slug</code>in this case.</li></ul><h2 id="injecting-the-router" tabindex="-1"><a class="header-anchor" href="#injecting-the-router" aria-hidden="true">#</a> Injecting the router</h2>`,5),g={class:"custom-container details"},h=n("summary",null,"示例",-1),m={href:"https://github.com/vercel/next.js/tree/canary/examples/dynamic-routing",target:"_blank",rel:"noopener noreferrer"},f=a('<p>To access the<a href="/docs/guide/api-reference/next/router#router-object"><code>router</code>object</a>in a React component you can use<a href="/docs/guide/api-reference/next/router#userouter"><code>useRouter</code></a>or<a href="/docs/guide/api-reference/next/router#withrouter"><code>withRouter</code></a>.</p><p>In general we recommend using<a href="/docs/guide/api-reference/next/router#userouter"><code>useRouter</code></a>.</p><h2 id="learn-more" tabindex="-1"><a class="header-anchor" href="#learn-more" aria-hidden="true">#</a> Learn more</h2><p>The router is divided in multiple parts:</p>',4);function x(y,b){const s=o("ExternalLinkIcon");return c(),l("div",null,[u,n("blockquote",null,[n("p",null,[n("a",r,[k,t(s)]),e("is used in the example to keep the path utf-8 compatible.")])]),d,n("details",g,[h,n("ul",null,[n("li",null,[n("a",m,[e("Dynamic Routing"),t(s)])])])]),f])}const j=p(i,[["render",x],["__file","introduction.html.vue"]]);export{j as default};
