import{_ as r,r as o,o as i,c,b as t,d as e,e as n,a as s}from"./app.1ad2624e.js";const l={},d=s('<h1 id="accessibility" tabindex="-1"><a class="header-anchor" href="#accessibility" aria-hidden="true">#</a> Accessibility</h1><p>The Next.js team is committed to making Next.js accessible to all developers (and their end-users). By adding accessibility features to Next.js by default, we aim to make the Web more inclusive for everyone.</p><h2 id="route-announcements" tabindex="-1"><a class="header-anchor" href="#route-announcements" aria-hidden="true">#</a> Route Announcements</h2><p>When transitioning between pages rendered on the server (e.g. using the<code>&lt;a href&gt;</code>tag) screen readers and other assistive technology announce the page title when the page loads so that users understand that the page has changed.</p><p>In addition to traditional page navigations, Next.js also supports client-side transitions for improved performance (using<code>next/link</code>). To ensure that client-side transitions are also announced to assistive technology, Next.js includes a route announcer by default.</p><p>The Next.js route announcer looks for the page name to announce by first inspecting<code>document.title</code>, then the<code>&lt;h1&gt;</code>element, and finally the URL pathname. For the most accessible user experience, ensure that each page in your application has a unique and descriptive title.</p><h2 id="linting" tabindex="-1"><a class="header-anchor" href="#linting" aria-hidden="true">#</a> Linting</h2><p>Next.js provides an<a href="/docs/guide/basic-features/eslint">integrated ESLint experience</a>out of the box, including custom rules for Next.js. By default, Next.js includes<code>eslint-plugin-jsx-a11y</code>to help catch accessibility issues early, including warning on:</p>',8),p={href:"https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/aria-props.md?rgh-link-date=2021-06-04T02%3A10%3A36Z",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/aria-proptypes.md?rgh-link-date=2021-06-04T02%3A10%3A36Z",target:"_blank",rel:"noopener noreferrer"},u={href:"https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/aria-unsupported-elements.md?rgh-link-date=2021-06-04T02%3A10%3A36Z",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/role-has-required-aria-props.md?rgh-link-date=2021-06-04T02%3A10%3A36Z",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/role-supports-aria-props.md?rgh-link-date=2021-06-04T02%3A10%3A36Z",target:"_blank",rel:"noopener noreferrer"},f=s(`<p>For example, this plugin helps ensure you add alt text to<code>img</code>tags, use correct<code>aria-*</code>attributes, use correct<code>role</code>attributes, and more.</p><h2 id="disabling-javascript" tabindex="-1"><a class="header-anchor" href="#disabling-javascript" aria-hidden="true">#</a> Disabling JavaScript</h2><p>By default, Next.js prerenders pages to static HTML files. This means that JavaScript is not required to view the HTML markup from the server and is instead used to add interactivity on the client side.</p><p>If your application requires JavaScript to be disabled, and only HTML to be used, you can remove all JavaScript from your application using an experimental flag:</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// next.config.js</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">unstable_runtimeJS</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

</code></pre></div><h2 id="accessibility-resources" tabindex="-1"><a class="header-anchor" href="#accessibility-resources" aria-hidden="true">#</a> Accessibility Resources</h2>`,6),m={href:"https://webaim.org/standards/wcag/checklist",target:"_blank",rel:"noopener noreferrer"},_={href:"https://www.w3.org/TR/WCAG21/",target:"_blank",rel:"noopener noreferrer"},y={href:"https://www.a11yproject.com/",target:"_blank",rel:"noopener noreferrer"},x={href:"https://developer.mozilla.org/en-US/docs/Web/Accessibility/Understanding_WCAG/Perceivable/Color_contrast",target:"_blank",rel:"noopener noreferrer"},k={href:"https://web.dev/prefers-reduced-motion/",target:"_blank",rel:"noopener noreferrer"},v=t("code",null,"prefers-reduced-motion",-1);function j(A,w){const a=o("ExternalLinkIcon");return i(),c("div",null,[d,t("ul",null,[t("li",null,[t("a",p,[e("aria-props"),n(a)]),e("- "),t("a",h,[e("aria-proptypes"),n(a)]),e("- "),t("a",u,[e("aria-unsupported-elements"),n(a)]),e("- "),t("a",g,[e("role-has-required-aria-props"),n(a)]),e("- "),t("a",b,[e("role-supports-aria-props"),n(a)])])]),f,t("ul",null,[t("li",null,[t("a",m,[e("WebAIM WCAG checklist"),n(a)]),e("- "),t("a",_,[e("WCAG 2.1 Guidelines"),n(a)]),e("- "),t("a",y,[e("The A11y Project"),n(a)]),e("- Check"),t("a",x,[e("color contrast ratios"),n(a)]),e("between foreground and background elements- Use"),t("a",k,[v,n(a)]),e("when working with animations")])])])}const N=r(l,[["render",j],["__file","accessibility.html.vue"]]);export{N as default};
