import{_ as o,r as p,o as c,c as r,b as n,d as e,e as a,a as t}from"./app.1ad2624e.js";const i={},l=n("h1",{id:"typescript",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#typescript","aria-hidden":"true"},"#"),e(" TypeScript")],-1),u=n("details",{class:"custom-container details"},[n("summary",null,"示例"),n("p",null,"Version History")],-1),d={href:"https://www.typescriptlang.org/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fvercel%2Fnext.js%2Ftree%2Fcanary%2Fexamples%2Fwith-typescript&project-name=with-typescript&repository-name=with-typescript&utm_source=next-site&utm_medium=docs&utm_campaign=next-website",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/vercel/next.js/tree/canary/examples/with-typescript",target:"_blank",rel:"noopener noreferrer"},g=t(`<h2 id="create-next-app-support" tabindex="-1"><a class="header-anchor" href="#create-next-app-support" aria-hidden="true">#</a> create-next-app support</h2><p>You can create a TypeScript project with<a href="/docs/guide/api-reference/create-next-app"><code>create-next-app</code></a>using the<code>--ts, --typescript</code>flag like so:</p><div class="language-text" data-ext="text"><pre class="language-text"><code>npx create-next-app@latest --ts
# or
yarn create next-app --typescript
# or
pnpm create next-app --ts

</code></pre></div><h2 id="existing-projects" tabindex="-1"><a class="header-anchor" href="#existing-projects" aria-hidden="true">#</a> Existing projects</h2><p>To get started in an existing project, create an empty<code>tsconfig.json</code>file in the root folder:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">touch</span> tsconfig.json

</code></pre></div>`,6),y=n("code",null,"tsconfig.json",-1),f={href:"https://www.typescriptlang.org/docs/handbook/compiler-options.html",target:"_blank",rel:"noopener noreferrer"},m=n("p",null,[e("You can also provide a relative path to a tsconfig.json file by setting"),n("code",null,"typescript.tsconfigPath"),e("prop inside your"),n("code",null,"next.config.js"),e("file.")],-1),x=n("p",null,[e("Starting in"),n("code",null,"v12.0.0"),e(", Next.js uses"),n("a",{href:"/docs/guide/advanced-features/compiler"},"SWC"),e("by default to compile TypeScript and TSX for faster builds.")],-1),b=n("code",null,".babelrc",-1),_={href:"https://babeljs.io/docs/en/babel-plugin-transform-typescript#caveats",target:"_blank",rel:"noopener noreferrer"},w={href:"https://babeljs.io/docs/en/babel-plugin-transform-typescript#typescript-compiler-options",target:"_blank",rel:"noopener noreferrer"},v=t(`<p>Then, run<code>next</code>(normally<code>npm run dev</code>or<code>yarn dev</code>) and Next.js will guide you through the installation of the required packages to finish the setup:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run dev

<span class="token comment"># You&#39;ll see instructions like these:</span>
<span class="token comment">#</span>
<span class="token comment"># Please install TypeScript, @types/react, and @types/node by running:</span>
<span class="token comment">#</span>
<span class="token comment">#         yarn add --dev typescript @types/react @types/node</span>
<span class="token comment">#</span>
<span class="token comment"># ...</span>

</code></pre></div><p>You&#39;re now ready to start converting files from<code>.js</code>to<code>.tsx</code>and leveraging the benefits of TypeScript!</p><blockquote><p>A file named<code>next-env.d.ts</code>will be created at the root of your project. This file ensures Next.js types are picked up by the TypeScript compiler.<strong>You should not remove it or edit it</strong>as it can change at any time. This file should not be committed and should be ignored by version control (e.g. inside your<code>.gitignore</code>file).</p></blockquote><blockquote><p>TypeScript<code>strict</code>mode is turned off by default. When you feel comfortable with TypeScript, it&#39;s recommended to turn it on in your<code>tsconfig.json</code>.</p></blockquote>`,5),j=n("code",null,"next-env.d.ts",-1),S=n("code",null,"additional.d.ts",-1),P={href:"https://www.typescriptlang.org/tsconfig#include",target:"_blank",rel:"noopener noreferrer"},N=n("code",null,"include",-1),T=n("code",null,"tsconfig.json",-1),A=t(`<p>By default, Next.js will do type checking as part of<code>next build</code>. We recommend using code editor type checking during development.</p><p>If you want to silence the error reports, refer to the documentation for<a href="/docs/guide/api-reference/next.config.js/ignoring-typescript-errors">Ignoring TypeScript errors</a>.</p><h2 id="static-generation-and-server-side-rendering" tabindex="-1"><a class="header-anchor" href="#static-generation-and-server-side-rendering" aria-hidden="true">#</a> Static Generation and Server-side Rendering</h2><p>For<code>getStaticProps</code>,<code>getStaticPaths</code>, and<code>getServerSideProps</code>, you can use the<code>GetStaticProps</code>,<code>GetStaticPaths</code>, and<code>GetServerSideProps</code>types respectively:</p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> GetStaticProps<span class="token punctuation">,</span> GetStaticPaths<span class="token punctuation">,</span> GetServerSideProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;next&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> getStaticProps<span class="token operator">:</span> <span class="token function-variable function">GetStaticProps</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> getStaticPaths<span class="token operator">:</span> <span class="token function-variable function">GetStaticPaths</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> getServerSideProps<span class="token operator">:</span> <span class="token function-variable function">GetServerSideProps</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

</code></pre></div><blockquote><p>If you&#39;re using<code>getInitialProps</code>, you can<a href="/docs/guide/api-reference/data-fetching/get-initial-props#typescript">follow the directions on this page</a>.</p></blockquote><h2 id="api-routes" tabindex="-1"><a class="header-anchor" href="#api-routes" aria-hidden="true">#</a> API Routes</h2><p>The following is an example of how to use the built-in types for API routes:</p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> NextApiRequest<span class="token punctuation">,</span> NextApiResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;next&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>req<span class="token operator">:</span> NextApiRequest<span class="token punctuation">,</span> res<span class="token operator">:</span> NextApiResponse<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre></div><p>You can also type the response data:</p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> NextApiRequest<span class="token punctuation">,</span> NextApiResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;next&#39;</span>

<span class="token keyword">type</span> <span class="token class-name">Data</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>req<span class="token operator">:</span> NextApiRequest<span class="token punctuation">,</span> res<span class="token operator">:</span> NextApiResponse<span class="token operator">&lt;</span>Data<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre></div><h2 id="custom-app" tabindex="-1"><a class="header-anchor" href="#custom-app" aria-hidden="true">#</a> Custom App</h2><p>If you have a<a href="/docs/guide/advanced-features/custom-app">custom<code>App</code></a>, you can use the built-in type<code>AppProps</code>and change file name to<code>./pages/_app.tsx</code>like so:</p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> AppProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;next/app&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Component<span class="token punctuation">,</span> pageProps <span class="token punctuation">}</span><span class="token operator">:</span> AppProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>Component <span class="token punctuation">{</span><span class="token operator">...</span>pageProps<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span>

</code></pre></div><h2 id="path-aliases-and-baseurl" tabindex="-1"><a class="header-anchor" href="#path-aliases-and-baseurl" aria-hidden="true">#</a> Path aliases and baseUrl</h2><p>Next.js automatically supports the<code>tsconfig.json\`\`&quot;paths&quot;</code>and<code>&quot;baseUrl&quot;</code>options.</p><p>You can learn more about this feature on the<a href="/docs/guide/advanced-features/module-path-aliases">Module Path aliases documentation</a>.</p><h2 id="type-checking-next-config-js" tabindex="-1"><a class="header-anchor" href="#type-checking-next-config-js" aria-hidden="true">#</a> Type checking next.config.js</h2><p>The<code>next.config.js</code>file must be a JavaScript file as it does not get parsed by Babel or TypeScript, however you can add some type checking in your IDE using JSDoc as below:</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// @ts-check</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;next&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>NextConfig<span class="token punctuation">}</span></span>
 **/</span>
<span class="token keyword">const</span> nextConfig <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">/* config options here */</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> nextConfig

</code></pre></div><h2 id="incremental-type-checking" tabindex="-1"><a class="header-anchor" href="#incremental-type-checking" aria-hidden="true">#</a> Incremental type checking</h2>`,21),q=n("code",null,"v10.2.1",-1),I={href:"https://www.typescriptlang.org/tsconfig#incremental",target:"_blank",rel:"noopener noreferrer"},R=n("code",null,"tsconfig.json",-1),G=n("code",null,"v4.3.2",-1),C={href:"https://devblogs.microsoft.com/typescript/announcing-typescript-4-3/#lazier-incremental",target:"_blank",rel:"noopener noreferrer"},F=t(`<h2 id="ignoring-typescript-errors" tabindex="-1"><a class="header-anchor" href="#ignoring-typescript-errors" aria-hidden="true">#</a> Ignoring TypeScript Errors</h2><p>Next.js fails your<strong>production build</strong>(<code>next build</code>) when TypeScript errors are present in your project.</p><p>If you&#39;d like Next.js to dangerously produce production code even when your application has errors, you can disable the built-in type checking step.</p><p>If disabled, be sure you are running type checks as part of your build or deploy process, otherwise this can be very dangerous.</p><p>Open<code>next.config.js</code>and enable the<code>ignoreBuildErrors</code>option in the<code>typescript</code>config:</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">typescript</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// !! WARN !!</span>
    <span class="token comment">// Dangerously allow production builds to successfully complete even if</span>
    <span class="token comment">// your project has type errors.</span>
    <span class="token comment">// !! WARN !!</span>
    <span class="token literal-property property">ignoreBuildErrors</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

</code></pre></div>`,6);function B(E,D){const s=p("ExternalLinkIcon");return c(),r("div",null,[l,u,n("p",null,[e("Next.js provides an integrated"),n("a",d,[e("TypeScript"),a(s)]),e("experience, including zero-configuration set up and built-in types for Pages, APIs, and more.")]),n("ul",null,[n("li",null,[n("a",k,[e("Clone and deploy the TypeScript starter"),a(s)]),e("- "),n("a",h,[e("View an example application"),a(s)])])]),g,n("p",null,[e("Next.js will automatically configure this file with default values. Providing your own"),y,e("with custom"),n("a",f,[e("compiler options"),a(s)]),e("is also supported.")]),m,x,n("blockquote",null,[n("p",null,[e("Next.js will use Babel to handle TypeScript if"),b,e("is present. This has some"),n("a",_,[e("caveats"),a(s)]),e("and some"),n("a",w,[e("compiler options are handled differently"),a(s)]),e(".")])]),v,n("blockquote",null,[n("p",null,[e("Instead of editing"),j,e(", you can include additional types by adding a new file e.g."),S,e("and then referencing it in the"),n("a",P,[N,a(s)]),e("array in your"),T,e(".")])]),A,n("p",null,[e("Since"),q,e("Next.js supports"),n("a",I,[e("incremental type checking"),a(s)]),e("when enabled in your"),R,e(", this can help speed up type checking in larger applications.")]),n("p",null,[e("It is highly recommended to be on at least"),G,e("of TypeScript to experience the"),n("a",C,[e("best performance"),a(s)]),e("when leveraging this feature.")]),F])}const V=o(i,[["render",B],["__file","typescript.html.vue"]]);export{V as default};
