import{_ as o,r as p,o as c,c as r,b as s,d as n,e,a as t}from"./app.1ad2624e.js";const l={},u=s("h1",{id:"api-routes-response-helpers",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#api-routes-response-helpers","aria-hidden":"true"},"#"),n(" API Routes Response Helpers")],-1),i={href:"https://nodejs.org/api/http.html#http_class_http_serverresponse",target:"_blank",rel:"noopener noreferrer"},d=s("code",null,"res",-1),k=s("p",null,"The included helpers are:",-1),h=s("code",null,"res.status(code)",-1),f=s("code",null,"code",-1),y={href:"https://en.wikipedia.org/wiki/List_of_HTTP_status_codes",target:"_blank",rel:"noopener noreferrer"},_=s("code",null,"res.json(body)",-1),g=s("code",null,"body",-1),m={href:"https://developer.mozilla.org/en-US/docs/Glossary/Serialization",target:"_blank",rel:"noopener noreferrer"},b=s("code",null,"res.send(body)",-1),w=s("code",null,"body",-1),x=s("code",null,"string",-1),v=s("code",null,"object",-1),j=s("code",null,"Buffer",-1),T=s("code",null,"res.redirect([status,] path)",-1),S=s("code",null,"status",-1),N={href:"https://en.wikipedia.org/wiki/List_of_HTTP_status_codes",target:"_blank",rel:"noopener noreferrer"},R=s("code",null,"status",-1),A=s("code",null,"res.revalidate(urlPath)",-1),P=s("a",{href:"/docs/guide/basic-features/data-fetching/incremental-static-regeneration#on-demand-revalidation"},"Revalidate a page on demand",-1),q=s("code",null,"getStaticProps",-1),H=s("code",null,"urlPath",-1),I=s("code",null,"string",-1),O=t(`<h2 id="setting-the-status-code-of-a-response" tabindex="-1"><a class="header-anchor" href="#setting-the-status-code-of-a-response" aria-hidden="true">#</a> Setting the status code of a response</h2><p>When sending a response back to the client, you can set the status code of the response.</p><p>The following example sets the status code of the response to<code>200</code>(<code>OK</code>) and returns a<code>message</code>property with the value of<code>Hello from Next.js!</code>as a JSON response:</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;Hello from Next.js!&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre></div><h2 id="sending-a-json-response" tabindex="-1"><a class="header-anchor" href="#sending-a-json-response" aria-hidden="true">#</a> Sending a JSON response</h2>`,5),L={href:"https://developer.mozilla.org/en-US/docs/Glossary/Serialization",target:"_blank",rel:"noopener noreferrer"},z=t(`<p>The following example sends a JSON response with the status code<code>200</code>(<code>OK</code>) and the result of the async operation. It&#39;s contained in a try catch block to handle any errors that may occur, with the appropriate status code and error message caught and sent back to the client:</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">someAsyncOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> result <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token string">&#39;failed to load data&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div><h2 id="sending-a-http-response" tabindex="-1"><a class="header-anchor" href="#sending-a-http-response" aria-hidden="true">#</a> Sending a HTTP response</h2><p>Sending an HTTP response works the same way as when sending a JSON response. The only difference is that the response body can be a<code>string</code>, an<code>object</code>or a<code>Buffer</code>.</p><p>The following example sends a HTTP response with the status code<code>200</code>(<code>OK</code>) and the result of the async operation.</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">someAsyncOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span> result <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token string">&#39;failed to fetch data&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div><h2 id="redirects-to-a-specified-path-or-url" tabindex="-1"><a class="header-anchor" href="#redirects-to-a-specified-path-or-url" aria-hidden="true">#</a> Redirects to a specified path or URL</h2><p>Taking a form as an example, you may want to redirect your client to a specified path or URL once they have submitted the form.</p><p>The following example redirects the client to the<code>/</code>path if the form is successfully submitted:</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> message <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token function">handleFormInputAsync</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">,</span> message <span class="token punctuation">}</span><span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token number">307</span><span class="token punctuation">,</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token string">&#39;failed to fetch data&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div><h2 id="adding-typescript-types" tabindex="-1"><a class="header-anchor" href="#adding-typescript-types" aria-hidden="true">#</a> Adding TypeScript types</h2><p>You can make your response handlers more type-safe by importing the<code>NextApiRequest</code>and<code>NextApiResponse</code>types from<code>next</code>, in addition to those, you can also type your response data:</p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> NextApiRequest<span class="token punctuation">,</span> NextApiResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;next&#39;</span>

<span class="token keyword">type</span> <span class="token class-name">ResponseData</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  message<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">handler</span><span class="token punctuation">(</span>
  req<span class="token operator">:</span> NextApiRequest<span class="token punctuation">,</span>
  res<span class="token operator">:</span> NextApiResponse<span class="token operator">&lt;</span>ResponseData<span class="token operator">&gt;</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&#39;Hello from Next.js!&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre></div><blockquote><p>Note: The body of<code>NextApiRequest</code>is<code>any</code>because the client may include any payload. You should validate the type/shape of the body at runtime before using it.</p></blockquote><p>To view more examples using types, check out the<a href="/docs/guide/basic-features/typescript#api-routes">TypeScript documentation</a>.</p><p>If you prefer to view your examples within a real projects structure you can checkout our examples repository:</p>`,16),B={href:"https://github.com/vercel/next.js/tree/canary/examples/api-routes",target:"_blank",rel:"noopener noreferrer"},J={href:"https://github.com/vercel/next.js/tree/canary/examples/api-routes-rest",target:"_blank",rel:"noopener noreferrer"};function E(U,V){const a=p("ExternalLinkIcon");return c(),r("div",null,[u,s("p",null,[n("The"),s("a",i,[n("Server Response object"),e(a)]),n(", (often abbreviated as"),d,n(") includes a set of Express.js-like helper methods to improve the developer experience and increase the speed of creating new API endpoints.")]),k,s("ul",null,[s("li",null,[h,n("- A function to set the status code."),f,n("must be a valid"),s("a",y,[n("HTTP status code"),e(a)]),n("- "),_,n("- Sends a JSON response."),g,n("must be a"),s("a",m,[n("serializable object"),e(a)]),n("- "),b,n("- Sends the HTTP response."),w,n("can be a"),x,n(", an"),v,n("or a"),j,n("- "),T,n("- Redirects to a specified path or URL."),S,n("must be a valid"),s("a",N,[n("HTTP status code"),e(a)]),n(". If not specified,"),R,n('defaults to "307" "Temporary redirect".- '),A,n("-"),P,n("using"),q,n("."),H,n("must be a"),I,n(".")])]),O,s("p",null,[n("When sending a response back to the client you can send a JSON response, this must be a"),s("a",L,[n("serializable object"),e(a)]),n(". In a real world application you might want to let the client know the status of the request depending on the result of the requested endpoint.")]),z,s("ul",null,[s("li",null,[s("a",B,[n("Basic API Routes"),e(a)]),n("- "),s("a",J,[n("API Routes with REST"),e(a)])])])])}const D=o(l,[["render",E],["__file","response-helpers.html.vue"]]);export{D as default};
