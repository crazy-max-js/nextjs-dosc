import{_ as o,r as p,o as r,c,b as s,d as n,e,a as t}from"./app.1ad2624e.js";const l={},i=t(`<blockquote><p>注意：Next.js 13 引入了<code>app/</code>目录（beta）。这个新目录支持布局、嵌套路由，并默认使用服务器组件。在内部<code>app/</code>，您可以在布局中为整个应用程序获取数据，包括支持更精细的嵌套布局（使用并置数据获取）。</p></blockquote><blockquote><p>了解有关逐步采用app/的更多信息。</p></blockquote><p>在 Next.js 中，<strong>页面</strong>是从目录中的、、或文件导出的React 组件。每个页面都根据其文件名与一个路由相关联。<code>.js</code> <code>.jsx</code> <code>.ts</code> <code>.tsx</code> <code>pages</code></p><p><strong>示例</strong>：如果您创建<code>pages/about.js</code>一个像下面这样导出 React 组件，它将可以在<code>/about</code>.</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">About</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>About<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="具有动态路由的页面" tabindex="-1"><a class="header-anchor" href="#具有动态路由的页面" aria-hidden="true">#</a> 具有动态路由的页面</h2><p>Next.js 支持具有动态路由的页面。例如，如果您创建一个名为 的文件<br><code>pages/posts/[id].js</code>，那么它将可以在<code>posts/1</code>、<code>posts/2</code>等处访问。</p><blockquote><p>要了解有关动态路由的更多信息，请查看动态路由文档。</p></blockquote><h1 id="预渲染" tabindex="-1"><a class="header-anchor" href="#预渲染" aria-hidden="true">#</a> 预渲染</h1><p>默认情况下，Next.js预渲染每个页面。这意味着 Next.js 会提前为每个页面生成 HTML，而不是全部由客户端 JavaScript 完成。预渲染可以带来更好的性能和 SEO。</p><p>每个生成的 HTML 都与该页面所需的最少 JavaScript 代码相关联。当浏览器加载页面时，其 JavaScript 代码将运行并使页面完全交互。（这个过程称为水合作用。）</p><h2 id="两种形式的预渲染" tabindex="-1"><a class="header-anchor" href="#两种形式的预渲染" aria-hidden="true">#</a> 两种形式的预渲染</h2><p>Next.js 有两种<strong>预渲染</strong>形式：静态生成和服务器端渲染。不同之处在于它何时为页面生成 HTML。</p><ul><li><strong>静态生成（推荐）</strong>：HTML 在<strong>构建时</strong>生成，并将在每个请求中重用。</li><li><strong>服务器端渲染：在每个请求</strong>上生成 HTML。</li></ul><p>重要的是，Next.js 允许您<strong>选择</strong>要为每个页面使用的预渲染表单。您可以通过对大多数页面使用静态生成并为其他页面使用服务器端渲染来创建“混合”Next.js 应用程序。</p><p>出于性能原因，我们<strong>建议</strong>使用<strong>静态生成</strong>而不是服务器端渲染。静态生成的页面可以被 CDN 缓存，无需额外配置来提高性能。但是，在某些情况下，服务器端渲染可能是唯一的选择。</p><p>您还可以使用<strong>客户端数据获取</strong>以及静态生成或服务器端渲染。这意味着页面的某些部分可以完全由客户端 JavaScript 呈现。要了解更多信息，请查看数据获取文档。</p><h1 id="静态生成" tabindex="-1"><a class="header-anchor" href="#静态生成" aria-hidden="true">#</a> 静态生成</h1>`,18),u={class:"custom-container details"},k=s("summary",null,"例子",-1),d={href:"https://github.com/vercel/next.js/tree/canary/examples/cms-wordpress",target:"_blank",rel:"noopener noreferrer"},h={href:"https://next-blog-wordpress.vercel.app/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/vercel/next.js/tree/canary/examples/blog-starter",target:"_blank",rel:"noopener noreferrer"},m={href:"https://next-blog-starter.vercel.app/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/vercel/next.js/tree/canary/examples/cms-datocms",target:"_blank",rel:"noopener noreferrer"},_={href:"https://next-blog-datocms.vercel.app/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/vercel/next.js/tree/canary/examples/cms-takeshape",target:"_blank",rel:"noopener noreferrer"},x={href:"https://next-blog-takeshape.vercel.app/",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github.com/vercel/next.js/tree/canary/examples/cms-sanity",target:"_blank",rel:"noopener noreferrer"},v={href:"https://next-blog-sanity.vercel.app/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://github.com/vercel/next.js/tree/canary/examples/cms-prismic",target:"_blank",rel:"noopener noreferrer"},j={href:"https://next-blog-prismic.vercel.app/",target:"_blank",rel:"noopener noreferrer"},S={href:"https://github.com/vercel/next.js/tree/canary/examples/cms-contentful",target:"_blank",rel:"noopener noreferrer"},P={href:"https://next-blog-contentful.vercel.app/",target:"_blank",rel:"noopener noreferrer"},N={href:"https://github.com/vercel/next.js/tree/canary/examples/cms-strapi",target:"_blank",rel:"noopener noreferrer"},T={href:"https://next-blog-strapi.vercel.app/",target:"_blank",rel:"noopener noreferrer"},M={href:"https://github.com/vercel/next.js/tree/canary/examples/cms-prepr",target:"_blank",rel:"noopener noreferrer"},L={href:"https://next-blog-prepr.vercel.app/",target:"_blank",rel:"noopener noreferrer"},C={href:"https://github.com/vercel/next.js/tree/canary/examples/cms-agilitycms",target:"_blank",rel:"noopener noreferrer"},H={href:"https://next-blog-agilitycms.vercel.app/",target:"_blank",rel:"noopener noreferrer"},q={href:"https://github.com/vercel/next.js/tree/canary/examples/cms-cosmic",target:"_blank",rel:"noopener noreferrer"},A={href:"https://next-blog-cosmic.vercel.app/",target:"_blank",rel:"noopener noreferrer"},B={href:"https://github.com/vercel/next.js/tree/canary/examples/cms-buttercms",target:"_blank",rel:"noopener noreferrer"},I={href:"https://next-blog-buttercms.vercel.app/",target:"_blank",rel:"noopener noreferrer"},R={href:"https://github.com/vercel/next.js/tree/canary/examples/cms-storyblok",target:"_blank",rel:"noopener noreferrer"},D={href:"https://next-blog-storyblok.vercel.app/",target:"_blank",rel:"noopener noreferrer"},E={href:"https://github.com/vercel/next.js/tree/canary/examples/cms-graphcms",target:"_blank",rel:"noopener noreferrer"},J={href:"https://next-blog-graphcms.vercel.app/",target:"_blank",rel:"noopener noreferrer"},V={href:"https://github.com/vercel/next.js/tree/canary/examples/cms-kontent",target:"_blank",rel:"noopener noreferrer"},O={href:"https://next-blog-kontent.vercel.app/",target:"_blank",rel:"noopener noreferrer"},G={href:"https://github.com/vercel/next.js/tree/canary/examples/cms-builder-io",target:"_blank",rel:"noopener noreferrer"},W={href:"https://cms-builder-io.vercel.app/",target:"_blank",rel:"noopener noreferrer"},F={href:"https://github.com/vercel/next.js/tree/canary/examples/cms-tina",target:"_blank",rel:"noopener noreferrer"},$={href:"https://cms-tina-example.vercel.app/",target:"_blank",rel:"noopener noreferrer"},z={href:"https://static-tweet.vercel.app/",target:"_blank",rel:"noopener noreferrer"},K={href:"https://static-tweet.vercel.app/",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://github.com/vercel/next.js/tree/canary/examples/cms-enterspeed",target:"_blank",rel:"noopener noreferrer"},U={href:"https://next-blog-demo.enterspeed.com/",target:"_blank",rel:"noopener noreferrer"},X=t(`<p>如果页面使用<strong>静态生成</strong>，则页面 HTML 是在<strong>构建时</strong>生成的。这意味着在生产环境中，页面 HTML 会在您运行<code>next build</code>. 然后，此 HTML 将在每个请求上重复使用。它可以由 CDN 缓存。</p><p>在 Next.js 中，您可以静态生成<strong>带有或不带有 data</strong>的页面。让我们来看看每个案例。</p><h2 id="无数据静态生成" tabindex="-1"><a class="header-anchor" href="#无数据静态生成" aria-hidden="true">#</a> 无数据静态生成</h2><p>默认情况下，Next.js 使用静态生成预渲染页面而不获取数据。这是一个例子：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">About</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>About<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> About
</code></pre></div><p>请注意，此页面不需要获取任何要预渲染的外部数据。在这种情况下，Next.js 在构建期间为每个页面生成一个 HTML 文件。</p><h2 id="带数据的静态生成" tabindex="-1"><a class="header-anchor" href="#带数据的静态生成" aria-hidden="true">#</a> 带数据的静态生成</h2><p>某些页面需要获取外部数据以进行预渲染。有两种情况，可能适用一种或两种情况。在每种情况下，您都可以使用 Next.js 提供的这些功能：</p><ol><li>您的页面<strong>内容</strong>取决于外部数据：使用<code>getStaticProps</code>.</li><li>您的页面<strong>路径</strong>取决于外部数据：使用<code>getStaticPaths</code>（通常除了<code>getStaticProps</code>）。</li></ol><h3 id="场景一-你的页面内容依赖于外部数据" tabindex="-1"><a class="header-anchor" href="#场景一-你的页面内容依赖于外部数据" aria-hidden="true">#</a> 场景一：你的页面内容依赖于外部数据</h3><p><strong>示例</strong>：您的博客页面可能需要从 CMS（内容管理系统）获取博客文章列表。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// TODO: Need to fetch \`posts\` (by calling some API endpoint)</span>
<span class="token comment">//       before this page can be pre-rendered.</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Blog</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> posts <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>
      <span class="token punctuation">{</span>posts<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">post</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
        <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>要在预渲染时获取此数据，Next.js 允许您从同一文件调用<code>export</code>一个<code>async</code>函数。<br><code>getStaticProps</code>此函数在构建时被调用，并允许您将获取的数据传递到页面的<code>props</code>预渲染。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Blog</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> posts <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Render posts...</span>
<span class="token punctuation">}</span>

<span class="token comment">// This function gets called at build time</span>
<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getStaticProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Call an external API endpoint to get posts</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://.../posts&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> posts <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment">// By returning { props: { posts } }, the Blog component</span>
  <span class="token comment">// will receive \`posts\` as a prop at build time</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      posts<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>要了解有关其g<code>etStaticProps</code>工作原理的更多信息，请查看数据获取文档。</p><h3 id="场景-2-您的页面路径依赖于外部数据" tabindex="-1"><a class="header-anchor" href="#场景-2-您的页面路径依赖于外部数据" aria-hidden="true">#</a> 场景 2：您的页面路径依赖于外部数据</h3><p>Next.js 允许您创建具有<strong>动态路由</strong>的页面。例如，您可以创建一个名为<code>pages/posts/[id].js</code>以显示基于<code>id</code>. <code>id: 1</code>这将允许您在访问时显示博客文章<code>posts/1</code>。</p><blockquote><p>要了解有关动态路由的更多信息，请查看动态路由文档。</p></blockquote><p>但是，<code>id</code>您希望在构建时预渲染的内容可能取决于外部数据。</p><p><strong>示例</strong>：假设您只向<code>id: 1</code>数据库添加了一篇博文（带有 ）。在这种情况下，您只想<code>posts/1</code>在构建时预渲染。</p><p>稍后，您可以使用<code>id: 2</code>. 然后你也想预渲染<code>posts/2</code>。</p><p>因此，预渲染的页面<strong>路径</strong>取决于外部数据。为了处理这个问题，Next.js 允许您从动态页面（在本例中）调用<code>export</code>一个<code>async</code>函数。此函数在构建时被调用，并允许您指定要预渲染的路径。<code>getStaticPathspages/posts/[id].js</code></p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// This function gets called at build time</span>
<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getStaticPaths</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Call an external API endpoint to get posts</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://.../posts&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> posts <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment">// Get the paths we want to pre-render based on posts</span>
  <span class="token keyword">const</span> paths <span class="token operator">=</span> posts<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">post</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> post<span class="token punctuation">.</span>id <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token comment">// We&#39;ll pre-render only these paths at build time.</span>
  <span class="token comment">// { fallback: false } means other routes should 404.</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> paths<span class="token punctuation">,</span> <span class="token literal-property property">fallback</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>同样在 中<code>pages/posts/[id].js</code>，您需要导出<code>getStaticProps</code>，以便您可以使用它获取有关帖子的数据<code>id</code>并使用它来预渲染页面：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Post</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> post <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Render post...</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getStaticPaths</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token comment">// This also gets called at build time</span>
<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getStaticProps</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> params <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// params contains the post \`id\`.</span>
  <span class="token comment">// If the route is like /posts/1, then params.id is 1</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://.../posts/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>params<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> post <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment">// Pass post data to the page via props</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span> post <span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>要了解有关其<code>getStaticPaths</code>工作原理的更多信息，请查看数据获取文档。</p><h2 id="我什么时候应该使用静态生成" tabindex="-1"><a class="header-anchor" href="#我什么时候应该使用静态生成" aria-hidden="true">#</a> 我什么时候应该使用静态生成？</h2><p>我们建议尽可能使用<strong>静态生成（有数据和无数据），因为您的页面可以构建一次并由 CDN 提供服务，这比让服务器在每次请求时呈现页面要快得多。</strong></p><p>您可以将静态生成用于多种类型的页面，包括：</p><ul><li>营销页面</li><li>博客文章和作品集</li><li>电子商务产品列表</li><li>帮助和文档</li></ul><p>您应该问自己：“我可以在用户请求<strong>之前</strong>预渲染此页面吗？” 如果答案是肯定的，那么您应该选择静态生成。</p><p>另一方面，如果您不能在用户请求之前预渲染页面，则静态生成<strong>不是一个好主意</strong>。也许您的页面会显示频繁更新的数据，并且页面内容会随每个请求而更改。</p><p>在这种情况下，您可以执行以下操作之一：</p><ul><li>使用静态生成和<strong>客户端数据获取</strong>：您可以跳过预渲染页面的某些部分，然后使用客户端 JavaScript 填充它们。要了解有关此方法的更多信息，请查看数据获取文档。</li><li>使用<strong>服务器端渲染</strong>： Next.js 在每个请求上预渲染一个页面。它会更慢，因为页面无法被 CDN 缓存，但预渲染的页面将始终是最新的。我们将在下面讨论这种方法。</li></ul><h1 id="服务器端渲染" tabindex="-1"><a class="header-anchor" href="#服务器端渲染" aria-hidden="true">#</a> 服务器端渲染</h1><blockquote><p>也称为“SSR”或“动态渲染”。</p></blockquote><p>如果页面使用<strong>Server-side Rendering ，则在每次请求</strong>时都会生成页面 HTML 。</p><p>要对页面使用服务器端渲染，您需要<code>export</code>一个<code>async</code>名为<code>getServerSideProps</code>. 服务器将在每次请求时调用此函数。</p><p>例如，假设您的页面需要预渲染频繁更新的数据（从外部 API 获取）。您可以编写<code>getServerSideProps</code>which获取此数据并将其传递给<code>Page</code>如下所示：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> data <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Render data...</span>
<span class="token punctuation">}</span>

<span class="token comment">// This gets called on every request</span>
<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getServerSideProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Fetch data from external API</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://.../data</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment">// Pass data to the page via props</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>如您所见，<code>getServerSideProps</code>与 类似<code>getStaticProps</code>，但不同之处在于<code>getServerSideProps</code>它在每个请求上运行，而不是在构建时运行。</p><p>要了解有关<code>getServerSideProps</code>工作原理的更多信息，请查看我们的数据获取文档</p><h1 id="概括" tabindex="-1"><a class="header-anchor" href="#概括" aria-hidden="true">#</a> 概括</h1><p>我们已经讨论了 Next.js 的两种预渲染形式。</p><ul><li><strong>静态生成（推荐）</strong>： HTML 在<strong>构建时</strong>生成，并将在每个请求中重复使用。要使页面使用静态生成，请导出页面组件，或导出<code>getStaticProps</code>（<code>getStaticPaths</code>如有必要）。这对于可以在用户请求之前预渲染的页面非常有用。您还可以将它与客户端渲染一起使用以引入额外的数据。</li><li><strong>服务器端渲染：在每个请求</strong>上生成 HTML 。要使页面使用服务器端渲染，请导出<code>getServerSideProps</code>. 因为服务器端渲染导致性能比静态生成慢，所以只有在绝对必要时才使用它。</li></ul>`,45);function Y(Z,nn){const a=p("ExternalLinkIcon");return r(),c("div",null,[i,s("details",u,[k,s("ul",null,[s("li",null,[s("a",d,[n("WordPress 示例"),e(a)]),n("（"),s("a",h,[n("演示"),e(a)]),n("）")]),s("li",null,[s("a",g,[n("使用降价文件的博客启动器"),e(a)]),n("（"),s("a",m,[n("演示"),e(a)]),n("）")]),s("li",null,[s("a",f,[n("DatoCMS 示例"),e(a)]),n("（"),s("a",_,[n("演示"),e(a)]),n("）")]),s("li",null,[s("a",b,[n("TakeShape 示例"),e(a)]),n("（"),s("a",x,[n("演示"),e(a)]),n("）")]),s("li",null,[s("a",y,[n("理智示例"),e(a)]),n("（"),s("a",v,[n("演示"),e(a)]),n("）")]),s("li",null,[s("a",w,[n("棱镜示例"),e(a)]),n("（"),s("a",j,[n("演示"),e(a)]),n("）")]),s("li",null,[s("a",S,[n("内容丰富的示例"),e(a)]),n("（"),s("a",P,[n("演示"),e(a)]),n("）")]),s("li",null,[s("a",N,[n("Strapi 示例"),e(a)]),n("（"),s("a",T,[n("演示"),e(a)]),n("）")]),s("li",null,[s("a",M,[n("Prepr 示例"),e(a)]),n("（"),s("a",L,[n("演示"),e(a)]),n("）")]),s("li",null,[s("a",C,[n("敏捷 CMS 示例"),e(a)]),n("（"),s("a",H,[n("演示"),e(a)]),n("）")]),s("li",null,[s("a",q,[n("宇宙示例"),e(a)]),n("（"),s("a",A,[n("演示"),e(a)]),n("）")]),s("li",null,[s("a",B,[n("ButterCMS 示例"),e(a)]),n("（"),s("a",I,[n("演示"),e(a)]),n("）")]),s("li",null,[s("a",R,[n("Storyblok 示例"),e(a)]),n("（"),s("a",D,[n("演示"),e(a)]),n("）")]),s("li",null,[s("a",E,[n("GraphCMS 示例"),e(a)]),n("（"),s("a",J,[n("演示"),e(a)]),n("）")]),s("li",null,[s("a",V,[n("内容示例"),e(a)]),n("（"),s("a",O,[n("演示"),e(a)]),n("）")]),s("li",null,[s("a",G,[n("Builder.io 示例"),e(a)]),n("（"),s("a",W,[n("演示"),e(a)]),n("）")]),s("li",null,[s("a",F,[n("TinaCMS 示例"),e(a)]),n("（"),s("a",$,[n("演示"),e(a)]),n("）")]),s("li",null,[s("a",z,[n("静态推文"),e(a)]),n("（"),s("a",K,[n("演示"),e(a)]),n("）")]),s("li",null,[s("a",Q,[n("Enterspeed 示例"),e(a)]),n("（"),s("a",U,[n("演示"),e(a)]),n("）")])])]),X])}const an=o(l,[["render",Y],["__file","pages.html.vue"]]);export{an as default};
