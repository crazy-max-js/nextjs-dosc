import{_ as t,r as c,o as r,c as l,b as n,d as e,e as o,a as s}from"./app.1ad2624e.js";const i={},p=n("h1",{id:"environment-variables",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#environment-variables","aria-hidden":"true"},"#"),e(" Environment Variables")],-1),d={class:"custom-container details"},u=n("summary",null,"示例",-1),v={href:"https://github.com/vercel/next.js/tree/canary/examples/environment-variables",target:"_blank",rel:"noopener noreferrer"},h=s(`<p>Next.js comes with built-in support for environment variables, which allows you to do the following:</p><ul><li><a href="#loading-environment-variables">Use<code>.env.local</code>to load environment variables</a>- <a href="#exposing-environment-variables-to-the-browser">Expose environment variables to the browser by prefixing with<code>NEXT_PUBLIC_</code></a></li></ul><h2 id="loading-environment-variables" tabindex="-1"><a class="header-anchor" href="#loading-environment-variables" aria-hidden="true">#</a> Loading Environment Variables</h2><p>Next.js has built-in support for loading environment variables from<code>.env.local</code>into<code>p<wbr>rocess.env</code>.</p><p>An example<code>.env.local</code>:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">DB_HOST</span><span class="token operator">=</span>localhost
<span class="token assign-left variable">DB_USER</span><span class="token operator">=</span>myuser
<span class="token assign-left variable">DB_PASS</span><span class="token operator">=</span>mypassword

</code></pre></div><p>This loads<code>p<wbr>rocess.env.DB_HOST</code>,<code>p<wbr>rocess.env.DB_USER</code>, and<code>p<wbr>rocess.env.DB_PASS</code>into the Node.js environment automatically allowing you to use them in<a href="/docs/guide/basic-features/data-fetching/overview">Next.js data fetching methods</a>and<a href="/docs/guide/api-routes/introduction">API routes</a>.</p><p>For example, using<a href="/docs/guide/basic-features/data-fetching/get-static-props"><code>getStaticProps</code></a>:</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// pages/index.js</span>
<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getStaticProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token keyword">await</span> myDB<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">host</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">DB_HOST</span><span class="token punctuation">,</span>
    <span class="token literal-property property">username</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">DB_USER</span><span class="token punctuation">,</span>
    <span class="token literal-property property">password</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">DB_PASS</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

</code></pre></div>`,9),m=n("strong",null,"Note",-1),b=n("code",null,[e("p"),n("wbr"),e("rocess.env")],-1),k={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,[e("p"),n("wbr"),e("rocess.env.PUBLISHABLE_KEY")],-1),g=n("code",null,[e("const { PUBLISHABLE_KEY } = p"),n("wbr"),e("rocess.env")],-1),_=s(`<blockquote><p><strong>Note</strong>: Next.js will automatically expand variables (<code>$VAR</code>) inside of your<code>.env*</code>files. This allows you to reference other secrets, like so:\`\`\`bash</p></blockquote><h1 id="env" tabindex="-1"><a class="header-anchor" href="#env" aria-hidden="true">#</a> .env</h1><p>HOSTNAME=localhost PORT=8080 HOST=http://$HOSTNAME:$PORT</p><p><code>If you are trying to use a variable with a\`$\`in the actual value, it needs to be escaped like so:\`\\$\`.For example:</code>bash</p><h1 id="env-1" tabindex="-1"><a class="header-anchor" href="#env-1" aria-hidden="true">#</a> .env</h1><p>A=abc</p><h1 id="becomes-preabc" tabindex="-1"><a class="header-anchor" href="#becomes-preabc" aria-hidden="true">#</a> becomes &quot;preabc&quot;</h1><p>WRONG=pre$A</p><h1 id="becomes-pre-a" tabindex="-1"><a class="header-anchor" href="#becomes-pre-a" aria-hidden="true">#</a> becomes &quot;pre$A&quot;</h1><p>CORRECT=pre$A</p><div class="language-text" data-ext="text"><pre class="language-text"><code>
&gt; **Note**: If you are using a\`/src\`folder, please note that Next.js will load the .env files**only**from the parent folder and**not**from the\`/src\`folder.

## Exposing Environment Variables to the Browser

By default environment variables are only available in the Node.js environment, meaning they won&#39;t be exposed to the browser.

In order to expose a variable to the browser you have to prefix the variable with\`NEXT_PUBLIC_\`. For example:

\`\`\`bash
NEXT_PUBLIC_ANALYTICS_ID=abcdefghijk

</code></pre></div><p>This loads<code>p<wbr>rocess.env.NEXT_PUBLIC_ANALYTICS_ID</code>into the Node.js environment automatically, allowing you to use it anywhere in your code. The value will be inlined into JavaScript sent to the browser because of the<code>NEXT_PUBLIC_</code>prefix. This inlining occurs at build time, so your various<code>NEXT_PUBLIC_</code>envs need to be set when the project is built.</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// pages/index.js</span>
<span class="token keyword">import</span> setupAnalyticsService <span class="token keyword">from</span> <span class="token string">&#39;../lib/my-analytics-service&#39;</span>

<span class="token comment">// &#39;NEXT_PUBLIC_ANALYTICS_ID&#39; can be used here as it&#39;s prefixed by &#39;NEXT_PUBLIC_&#39;.</span>
<span class="token comment">// It will be transformed at build time to \`setupAnalyticsService(&#39;abcdefghijk&#39;)\`.</span>
<span class="token function">setupAnalyticsService</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NEXT_PUBLIC_ANALYTICS_ID</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">HomePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Hello World<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> HomePage

</code></pre></div><p>Note that dynamic lookups willnotbe inlined, such as:</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// This will NOT be inlined, because it uses a variable</span>
<span class="token keyword">const</span> varName <span class="token operator">=</span> <span class="token string">&#39;NEXT_PUBLIC_ANALYTICS_ID&#39;</span>
<span class="token function">setupAnalyticsService</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">[</span>varName<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment">// This will NOT be inlined, because it uses a variable</span>
<span class="token keyword">const</span> env <span class="token operator">=</span> process<span class="token punctuation">.</span>env
<span class="token function">setupAnalyticsService</span><span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token constant">NEXT_PUBLIC_ANALYTICS_ID</span><span class="token punctuation">)</span>

</code></pre></div><h2 id="default-environment-variables" tabindex="-1"><a class="header-anchor" href="#default-environment-variables" aria-hidden="true">#</a> Default Environment Variables</h2><p>In general only one<code>.env.local</code>file is needed. However, sometimes you might want to add some defaults for the<code>development</code>(<code>next dev</code>) or<code>production</code>(<code>next start</code>) environment.</p><p>Next.js allows you to set defaults in<code>.env</code>(all environments),<code>.env.development</code>(development environment), and<code>.env.production</code>(production environment).</p><p><code>.env.local</code>always overrides the defaults set.</p><blockquote><p><strong>Note</strong>:<code>.env</code>,<code>.env.development</code>, and<code>.env.production</code>files should be included in your repository as they define defaults.<strong><code>.env*.local</code>should be added to<code>.gitignore</code></strong>, as those files are intended to be ignored.<code>.env.local</code>is where secrets can be stored.</p></blockquote><h2 id="environment-variables-on-vercel" tabindex="-1"><a class="header-anchor" href="#environment-variables-on-vercel" aria-hidden="true">#</a> Environment Variables on Vercel</h2>`,21),y={href:"https://vercel.com",target:"_blank",rel:"noopener noreferrer"},w={href:"https://vercel.com/docs/concepts/projects/environment-variables?utm_source=next-site&utm_medium=docs&utm_campaign=next-website",target:"_blank",rel:"noopener noreferrer"},x={href:"https://vercel.com/docs/concepts/projects/environment-variables#development-environment-variables?utm_source=next-site&utm_medium=docs&utm_campaign=next-website",target:"_blank",rel:"noopener noreferrer"},N={href:"https://vercel.com/docs/concepts/projects/environment-variables#development-environment-variables?utm_source=next-site&utm_medium=docs&utm_campaign=next-website",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,".env.local",-1),T=s(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code>vercel <span class="token function">env</span> pull .env.local

</code></pre></div><h2 id="test-environment-variables" tabindex="-1"><a class="header-anchor" href="#test-environment-variables" aria-hidden="true">#</a> Test Environment Variables</h2><p>Apart from<code>development</code>and<code>production</code>environments, there is a 3rd option available:<code>test</code>. In the same way you can set defaults for development or production environments, you can do the same with a<code>.env.test</code>file for the<code>testing</code>environment (though this one is not as common as the previous two). Next.js will not load environment variables from<code>.env.development</code>or<code>.env.production</code>in the<code>testing</code>environment.</p><p>This one is useful when running tests with tools like<code>jest</code>or<code>cypress</code>where you need to set specific environment vars only for testing purposes. Test default values will be loaded if<code>NODE_ENV</code>is set to<code>test</code>, though you usually don&#39;t need to do this manually as testing tools will address it for you.</p><p>There is a small difference between<code>test</code>environment, and both<code>development</code>and<code>production</code>that you need to bear in mind:<code>.env.local</code>won&#39;t be loaded, as you expect tests to produce the same results for everyone. This way every test execution will use the same env defaults across different executions by ignoring your<code>.env.local</code>(which is intended to override the default set).</p><blockquote><p><strong>Note</strong>: similar to Default Environment Variables,<code>.env.test</code>file should be included in your repository, but<code>.env.test.local</code>shouldn&#39;t, as<code>.env*.local</code>are intended to be ignored through<code>.gitignore</code>.</p></blockquote><p>While running unit tests you can make sure to load your environment variables the same way Next.js does by leveraging the<code>loadEnvConfig</code>function from the<code>@next/env</code>package.</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// The below can be used in a Jest global setup file or similar for your testing set-up</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> loadEnvConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@next/env&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> projectDir <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">loadEnvConfig</span><span class="token punctuation">(</span>projectDir<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre></div><h2 id="environment-variable-load-order" tabindex="-1"><a class="header-anchor" href="#environment-variable-load-order" aria-hidden="true">#</a> Environment Variable Load Order</h2><p>Environment variables are looked up in the following places, in order, stopping once the variable is found.</p><ul><li><code>p<wbr>rocess.env</code>- <code>.env.$(NODE_ENV).local</code>- <code>.env.local</code>(Not checked when<code>NODE_ENV</code>is<code>test</code>.)- <code>.env.$(NODE_ENV)</code>- <code>.env</code></li></ul><p>For example, if<code>NODE_ENV</code>is<code>development</code>and you define a variable in both<code>.env.development.local</code>and<code>.env</code>, the value in<code>.env.development.local</code>will be used.</p><blockquote><p>**Note:**The allowed values for<code>NODE_ENV</code>are<code>production</code>,<code>development</code>and<code>test</code>.</p></blockquote>`,13);function j(I,S){const a=c("ExternalLinkIcon");return r(),l("div",null,[p,n("details",d,[u,n("ul",null,[n("li",null,[n("a",v,[e("Environment Variables"),o(a)])])])]),h,n("blockquote",null,[n("p",null,[m,e(": In order to keep server-only secrets safe, environment variables are evaluated at build time, so only environment variablesactuallyused will be included. This means that"),b,e("is not a standard JavaScript object, so you’re not able to use"),n("a",k,[e("object destructuring"),o(a)]),e(". Environment variables must be referenced as e.g."),f,e(",not"),g,e(".")])]),_,n("p",null,[e("When deploying your Next.js application to"),n("a",y,[e("Vercel"),o(a)]),e(", Environment Variables can be configured"),n("a",w,[e("in the Project Settings"),o(a)]),e(".")]),n("p",null,[e("All types of Environment Variables should be configured there. Even Environment Variables used in Development – which can be"),n("a",x,[e("downloaded onto your local device"),o(a)]),e("afterwards.")]),n("p",null,[e("If you've configured"),n("a",N,[e("Development Environment Variables"),o(a)]),e("you can pull them into a"),E,e("for usage on your local machine using the following command:")]),T])}const B=t(i,[["render",j],["__file","environment-variables.html.vue"]]);export{B as default};
