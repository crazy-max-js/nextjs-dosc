import{_ as e,r as t,o,c as p,b as a,d as s,e as c,a as i}from"./app.1ad2624e.js";const l={},u=a("h1",{id:"dynamic-api-routes",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#dynamic-api-routes","aria-hidden":"true"},"#"),s(" Dynamic API Routes")],-1),d={class:"custom-container details"},r=a("summary",null,"示例",-1),k={href:"https://github.com/vercel/next.js/tree/canary/examples/api-routes",target:"_blank",rel:"noopener noreferrer"},h=i(`<p>API routes support<a href="/docs/guide/routing/dynamic-routes">dynamic routes</a>, and follow the same file naming rules used for<code>pages</code>.</p><p>For example, the API route<code>pages/api/post/[pid].js</code>has the following code:</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> pid <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>query
  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Post: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pid<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre></div><p>Now, a request to<code>/api/post/abc</code>will respond with the text:<code>Post: abc</code>.</p><h3 id="index-routes-and-dynamic-api-routes" tabindex="-1"><a class="header-anchor" href="#index-routes-and-dynamic-api-routes" aria-hidden="true">#</a> Index routes and Dynamic API routes</h3><p>A very common RESTful pattern is to set up routes like this:</p><ul><li><code>GET api/posts</code>- gets a list of posts, probably paginated- <code>GET api/posts/12345</code>- gets post id 12345</li></ul><p>We can model this in two ways:</p><ul><li>Option 1:- <code>/api/posts.js</code>- <code>/api/posts/[postId].js</code>- Option 2:- <code>/api/posts/index.js</code>- <code>/api/posts/[postId].js</code></li></ul><p>Both are equivalent. A third option of only using<code>/api/posts/[postId].js</code>is not valid because Dynamic Routes (including Catch-all routes - see below) do not have an<code>undefined</code>state and<code>GET api/posts</code>will not match<code>/api/posts/[postId].js</code>under any circumstances.</p><h3 id="catch-all-api-routes" tabindex="-1"><a class="header-anchor" href="#catch-all-api-routes" aria-hidden="true">#</a> Catch all API routes</h3><p>API Routes can be extended to catch all paths by adding three dots (<code>...</code>) inside the brackets. For example:</p><ul><li><code>pages/api/post/[...slug].js</code>matches<code>/api/post/a</code>, but also<code>/api/post/a/b</code>,<code>/api/post/a/b/c</code>and so on.</li></ul><blockquote><p><strong>Note</strong>: You can use names other than<code>slug</code>, such as:<code>[...param]</code></p></blockquote><p>Matched parameters will be sent as a query parameter (<code>slug</code>in the example) to the page, and it will always be an array, so, the path<code>/api/post/a</code>will have the following<code>query</code>object:</p><div class="language-json" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span> <span class="token property">&quot;slug&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>

</code></pre></div><p>And in the case of<code>/api/post/a/b</code>, and any other matching path, new parameters will be added to the array, like so:</p><div class="language-json" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span> <span class="token property">&quot;slug&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>

</code></pre></div><p>An API route for<code>pages/api/post/[...slug].js</code>could look like this:</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> slug <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>query
  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Post: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>slug<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre></div><p>Now, a request to<code>/api/post/a/b/c</code>will respond with the text:<code>Post: a, b, c</code>.</p><h3 id="optional-catch-all-api-routes" tabindex="-1"><a class="header-anchor" href="#optional-catch-all-api-routes" aria-hidden="true">#</a> Optional catch all API routes</h3><p>Catch all routes can be made optional by including the parameter in double brackets (<code>[[...slug]]</code>).</p><p>For example,<code>pages/api/post/[[...slug]].js</code>will match<code>/api/post</code>,<code>/api/post/a</code>,<code>/api/post/a/b</code>, and so on.</p><p>The main difference between catch all and optional catch all routes is that with optional, the route without the parameter is also matched (<code>/api/post</code>in the example above).</p><p>The<code>query</code>objects are as follows:</p><div class="language-json" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token comment">// GET \`/api/post\` (empty object)</span>
<span class="token punctuation">{</span> <span class="token property">&quot;slug&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token comment">// \`GET /api/post/a\` (single-element array)</span>
<span class="token punctuation">{</span> <span class="token property">&quot;slug&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token comment">// \`GET /api/post/a/b\` (multi-element array)</span>

</code></pre></div><h2 id="caveats" tabindex="-1"><a class="header-anchor" href="#caveats" aria-hidden="true">#</a> Caveats</h2><ul><li>Predefined API routes take precedence over dynamic API routes, and dynamic API routes over catch all API routes. Take a look at the following examples:- <code>pages/api/post/create.js</code>- Will match<code>/api/post/create</code>- <code>pages/api/post/[pid].js</code>- Will match<code>/api/post/1</code>,<code>/api/post/abc</code>, etc. But not<code>/api/post/create</code>- <code>pages/api/post/[...slug].js</code>- Will match<code>/api/post/1/2</code>,<code>/api/post/a/b/c</code>, etc. But not<code>/api/post/create</code>,<code>/api/post/abc</code></li></ul><h2 id="related" tabindex="-1"><a class="header-anchor" href="#related" aria-hidden="true">#</a> Related</h2><p>For more information on what to do next, we recommend the following sections:</p>`,31);function g(m,y){const n=t("ExternalLinkIcon");return o(),p("div",null,[u,a("details",d,[r,a("ul",null,[a("li",null,[a("a",k,[s("Basic API Routes"),c(n)])])])]),h])}const f=e(l,[["render",g],["__file","dynamic-api-routes.html.vue"]]);export{f as default};
