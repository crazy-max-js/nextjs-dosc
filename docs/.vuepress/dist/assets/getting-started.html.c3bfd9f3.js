import{_ as e,o as a,c as n,a as s}from"./app.1ad2624e.js";const t={},o=s(`<blockquote><p>Next.js 13 最近发布，了解更多信息并查看升级指南。版本 13 还引入了 beta 功能，例如与app目录（稳定）一起工作的pages目录，以实现增量采用。您可以pages在 Next.js 13 中继续使用，但如果您想尝试新app功能，请参阅新的 beta 文档。</p></blockquote><h1 id="快速入门" tabindex="-1"><a class="header-anchor" href="#快速入门" aria-hidden="true">#</a> 快速入门</h1><p>欢迎来到 Next.js 文档！</p><p>如果您不熟悉 Next.js，我们建议您从学习课程开始。带有测验的交互式课程将指导您了解使用 Next.js 所需的一切。</p><p>如果您对任何与 Next.js 相关的问题有任何疑问，随时欢迎您在GitHub Discussions上向我们的社区提问。</p><h3 id="系统要求" tabindex="-1"><a class="header-anchor" href="#系统要求" aria-hidden="true">#</a> 系统要求</h3><ul><li>Node.js 14.6.0或更高版本</li><li>支持 MacOS、Windows（包括 WSL）和 Linux</li></ul><h2 id="自动设置" tabindex="-1"><a class="header-anchor" href="#自动设置" aria-hidden="true">#</a> 自动设置</h2><p>我们建议使用 创建一个新的 Next.js 应用程序create-next-app，它会自动为您设置所有内容。要创建项目，请运行：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>npx create-next-app@latest
<span class="token comment"># or</span>
<span class="token function">yarn</span> create next-app
<span class="token comment"># or</span>
<span class="token function">pnpm</span> create next-app
</code></pre></div><p>如果您想从 TypeScript 项目开始，您可以使用以下--typescript标志：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>npx create-next-app@latest <span class="token parameter variable">--typescript</span>
<span class="token comment"># or</span>
<span class="token function">yarn</span> create next-app <span class="token parameter variable">--typescript</span>
<span class="token comment"># or</span>
<span class="token function">pnpm</span> create next-app <span class="token parameter variable">--typescript</span>
</code></pre></div><p>安装完成后：</p><ul><li>运行<code>npm run dev</code>或<code>yarn dev</code>或<code>pnpm dev</code>启动开发服务器<code>http://localhost:3000</code></li><li>访问<code>http://localhost:3000</code>以查看您的申请</li><li><code>pages/index.js</code>在浏览器中编辑并查看更新的结果</li></ul><p>有关如何使用的更多信息<code>create-next-app</code>，您可以查看<code>create-next-app</code>文档。</p><h2 id="手动设置" tabindex="-1"><a class="header-anchor" href="#手动设置" aria-hidden="true">#</a> 手动设置</h2><p>安装<code>next</code>，<code>react</code>并<code>react-dom</code>在您的项目中：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> next react react-dom
<span class="token comment"># or</span>
<span class="token function">yarn</span> <span class="token function">add</span> next react react-dom
<span class="token comment"># or</span>
<span class="token function">pnpm</span> <span class="token function">add</span> next react react-dom
</code></pre></div><p>打开package.json并添加以下内容scripts：</p><div class="language-json" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;next dev&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;next build&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;next start&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;lint&quot;</span><span class="token operator">:</span> <span class="token string">&quot;next lint&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这些脚本涉及开发应用程序的不同阶段：</p><ul><li><code>dev</code> - 运行<code>next dev</code>以在开发模式下启动 Next.js</li><li><code>build</code> - 运行<code>next build</code>以构建应用程序以供生产使用</li><li><code>start</code> - 运行<code>next start</code>以启动 Next.js 生产服务器</li><li><code>lint</code> - 运行<code>next lint</code>设置 Next.js 的内置 ESLint 配置</li></ul><p>在应用程序的根目录下<code>pages</code>创建两个目录：<code>public</code></p><ul><li><code>pages</code> - 根据文件名与路线相关联。例如<code>pages/about.js</code>映射到<code>/about</code></li><li><code>public</code> - 存储静态资产，例如图像、字体等。<code>public</code>然后您的代码可以从基本 URL (<code>/</code>) 开始引用目录中的文件。</li></ul><p>Next.js 是围绕pages的概念构建的。页面是从目录中的、或文件导出的React组件。您甚至可以使用文件名添加动态路由参数。 <code>.js</code> <code>.jsx</code> <code>.ts</code> <code>.tsx</code> <code>pages</code></p><p>在<code>pages</code>目录中添加<code>index.js</code>文件以开始使用。这是用户访问应用程序根目录时呈现的页面。</p><p>填充<code>pages/index.js</code>以下内容：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">HomePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>Welcome to Next<span class="token punctuation">.</span>js<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> HomePage
</code></pre></div><p>设置完成后：</p><ul><li>运行<code>npm run dev</code>或<code>yarn dev</code>或<code>pnpm dev</code>启动开发服务器<code>http://localhost:3000</code></li><li>访问<code>http://localhost:3000</code>以查看您的申请</li><li><code>pages/index.js</code>在浏览器中编辑并查看更新的结果</li></ul><p>到目前为止，我们得到：</p><ul><li>自动编译和打包</li><li>反应快速刷新</li><li>静态生成和服务端渲染<code>pages/</code></li><li>静态文件通过<code>public/</code>它映射到基本 URL (<code>/</code>)</li></ul><p>此外，任何 Next.js 应用程序从一开始就可以投入生产。在我们的部署文档中阅读更多信息。</p>`,33),p=[o];function c(d,l){return a(),n("div",null,p)}const i=e(t,[["render",c],["__file","getting-started.html.vue"]]);export{i as default};
