import{_ as o,r as p,o as c,c as l,b as n,d as a,e as t,a as e}from"./app.1ad2624e.js";const i={},r=n("h1",{id:"internationalized-routing",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#internationalized-routing","aria-hidden":"true"},"#"),a(" Internationalized Routing")],-1),u={class:"custom-container details"},d=n("summary",null,"示例",-1),k={href:"https://github.com/vercel/next.js/tree/canary/examples/i18n-routing",target:"_blank",rel:"noopener noreferrer"},h={href:"https://en.wikipedia.org/wiki/Internationalization_and_localization#Naming",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"v10.0.0",-1),f={href:"https://formatjs.io/docs/getting-started/installation",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"react-intl",-1),y={href:"https://react.i18next.com/",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"react-i18next",-1),b={href:"https://lingui.js.org/",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"lingui",-1),v={href:"https://github.com/lukeed/rosetta",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"rosetta",-1),j={href:"https://github.com/amannn/next-intl",target:"_blank",rel:"noopener noreferrer"},L=n("code",null,"next-intl",-1),S=n("h2",{id:"getting-started",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#getting-started","aria-hidden":"true"},"#"),a(" Getting started")],-1),N=n("p",null,[a("To get started, add the"),n("code",null,"i18n"),a("config to your"),n("code",null,"next.config.js"),a("file.")],-1),q={href:"https://www.unicode.org/reports/tr35/tr35-59/tr35.html#Identifiers",target:"_blank",rel:"noopener noreferrer"},P=e(`<p>Generally a Locale Identifier is made up of a language, region, and script separated by a dash:<code>language-region-script</code>. The region and script are optional. An example:</p><ul><li><code>en-US</code>- English as spoken in the United States- <code>nl-NL</code>- Dutch as spoken in the Netherlands- <code>nl</code>- Dutch, no specific region</li></ul><p>If user locale is<code>nl-BE</code>and it is not listed in your configuration, they will be redirected to<code>nl</code>if available, or to the default locale otherwise. If you don&#39;t plan to support all regions of a country, it is therefore a good practice to include country locales that will act as fallbacks.</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// next.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">i18n</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// These are all the locales you want to support in</span>
    <span class="token comment">// your application</span>
    <span class="token literal-property property">locales</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;en-US&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;fr&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;nl-NL&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment">// This is the default locale you want to be used when visiting</span>
    <span class="token comment">// a non-locale prefixed path e.g. \`/hello\`</span>
    <span class="token literal-property property">defaultLocale</span><span class="token operator">:</span> <span class="token string">&#39;en-US&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// This is a list of locale domains and the default locale they</span>
    <span class="token comment">// should handle (these are only required when setting up domain routing)</span>
    <span class="token comment">// Note: subdomains must be included in the domain value to be matched e.g. &quot;fr.example.com&quot;.</span>
    <span class="token literal-property property">domains</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">domain</span><span class="token operator">:</span> <span class="token string">&#39;example.com&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">defaultLocale</span><span class="token operator">:</span> <span class="token string">&#39;en-US&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">domain</span><span class="token operator">:</span> <span class="token string">&#39;example.nl&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">defaultLocale</span><span class="token operator">:</span> <span class="token string">&#39;nl-NL&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">domain</span><span class="token operator">:</span> <span class="token string">&#39;example.fr&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">defaultLocale</span><span class="token operator">:</span> <span class="token string">&#39;fr&#39;</span><span class="token punctuation">,</span>
        <span class="token comment">// an optional http field can also be used to test</span>
        <span class="token comment">// locale domains locally with http instead of https</span>
        <span class="token literal-property property">http</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

</code></pre></div><h2 id="locale-strategies" tabindex="-1"><a class="header-anchor" href="#locale-strategies" aria-hidden="true">#</a> Locale Strategies</h2><p>There are two locale handling strategies: Sub-path Routing and Domain Routing.</p><h3 id="sub-path-routing" tabindex="-1"><a class="header-anchor" href="#sub-path-routing" aria-hidden="true">#</a> Sub-path Routing</h3><p>Sub-path Routing puts the locale in the url path.</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// next.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">i18n</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">locales</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;en-US&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;fr&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;nl-NL&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">defaultLocale</span><span class="token operator">:</span> <span class="token string">&#39;en-US&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

</code></pre></div><p>With the above configuration<code>en-US</code>,<code>fr</code>, and<code>nl-NL</code>will be available to be routed to, and<code>en-US</code>is the default locale. If you have a<code>pages/blog.js</code>the following urls would be available:</p><ul><li><code>/blog</code>- <code>/fr/blog</code>- <code>/nl-nl/blog</code></li></ul><p>The default locale does not have a prefix.</p><h3 id="domain-routing" tabindex="-1"><a class="header-anchor" href="#domain-routing" aria-hidden="true">#</a> Domain Routing</h3><p>By using domain routing you can configure locales to be served from different domains:</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// next.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">i18n</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">locales</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;en-US&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;fr&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;nl-NL&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;nl-BE&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">defaultLocale</span><span class="token operator">:</span> <span class="token string">&#39;en-US&#39;</span><span class="token punctuation">,</span>

    <span class="token literal-property property">domains</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token comment">// Note: subdomains must be included in the domain value to be matched</span>
        <span class="token comment">// e.g. www.example.com should be used if that is the expected hostname</span>
        <span class="token literal-property property">domain</span><span class="token operator">:</span> <span class="token string">&#39;example.com&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">defaultLocale</span><span class="token operator">:</span> <span class="token string">&#39;en-US&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">domain</span><span class="token operator">:</span> <span class="token string">&#39;example.fr&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">defaultLocale</span><span class="token operator">:</span> <span class="token string">&#39;fr&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">domain</span><span class="token operator">:</span> <span class="token string">&#39;example.nl&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">defaultLocale</span><span class="token operator">:</span> <span class="token string">&#39;nl-NL&#39;</span><span class="token punctuation">,</span>
        <span class="token comment">// specify other locales that should be redirected</span>
        <span class="token comment">// to this domain</span>
        <span class="token literal-property property">locales</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;nl-BE&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

</code></pre></div><p>For example if you have<code>pages/blog.js</code>the following urls will be available:</p><ul><li><code>example.com/blog</code>- <code>www.example.com/blog</code>- <code>example.fr/blog</code>- <code>example.nl/blog</code>- <code>example.nl/nl-BE/blog</code></li></ul><h2 id="automatic-locale-detection" tabindex="-1"><a class="header-anchor" href="#automatic-locale-detection" aria-hidden="true">#</a> Automatic Locale Detection</h2>`,18),T=n("code",null,"/",-1),I={href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language",target:"_blank",rel:"noopener noreferrer"},R=n("code",null,"Accept-Language",-1),U=e('<p>If a locale other than the default locale is detected, the user will be redirected to either:</p><ul><li>**When using Sub-path Routing:**The locale prefixed path- **When using Domain Routing:**The domain with that locale specified as the default</li></ul><p>When using Domain Routing, if a user with the<code>Accept-Language</code>header<code>fr;q=0.9</code>visits<code>example.com</code>, they will be redirected to<code>example.fr</code>since that domain handles the<code>fr</code>locale by default.</p><p>When using Sub-path Routing, the user would be redirected to<code>/fr</code>.</p><h3 id="prefixing-the-default-locale" tabindex="-1"><a class="header-anchor" href="#prefixing-the-default-locale" aria-hidden="true">#</a> Prefixing the Default Locale</h3>',5),z=n("a",{href:"/docs/middleware"},"Middleware",-1),E={href:"https://github.com/vercel/next.js/discussions/18419",target:"_blank",rel:"noopener noreferrer"},F=e(`<p>For example, here&#39;s a<code>next.config.js</code>file with support for a few languages. Note the<code>&quot;default&quot;</code>locale has been added intentionally.</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// next.config.js</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">i18n</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">locales</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;default&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;en&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;de&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;fr&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">defaultLocale</span><span class="token operator">:</span> <span class="token string">&#39;default&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">localeDetection</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">trailingSlash</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

</code></pre></div><p>Next, we can use<a href="/docs/middleware">Middleware</a>to add custom routing rules:</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// middleware.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> NextRequest<span class="token punctuation">,</span> NextResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;next/server&#39;</span>

<span class="token keyword">const</span> <span class="token constant">PUBLIC_FILE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(.*)$</span><span class="token regex-delimiter">/</span></span>

<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">middleware</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">req</span><span class="token operator">:</span> NextRequest</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>
    req<span class="token punctuation">.</span>nextUrl<span class="token punctuation">.</span>pathname<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;/_next&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span>
    req<span class="token punctuation">.</span>nextUrl<span class="token punctuation">.</span>pathname<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;/api/&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span>
    <span class="token constant">PUBLIC_FILE</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>nextUrl<span class="token punctuation">.</span>pathname<span class="token punctuation">)</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>nextUrl<span class="token punctuation">.</span>locale <span class="token operator">===</span> <span class="token string">&#39;default&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> locale <span class="token operator">=</span> req<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;NEXT_LOCALE&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;en&#39;</span>

    <span class="token keyword">return</span> NextResponse<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span>
      <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>locale<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>req<span class="token punctuation">.</span>nextUrl<span class="token punctuation">.</span>pathname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>req<span class="token punctuation">.</span>nextUrl<span class="token punctuation">.</span>search<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>url<span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div><p>This<a href="/docs/middleware">Middleware</a>skips adding the default prefix to<a href="/docs/guide/api-routes/introduction">API Routes</a>and<a href="/docs/guide/basic-features/static-file-serving">public</a>files like fonts or images. If a request is made to the default locale, we redirect to our prefix<code>/en</code>.</p><h3 id="disabling-automatic-locale-detection" tabindex="-1"><a class="header-anchor" href="#disabling-automatic-locale-detection" aria-hidden="true">#</a> Disabling Automatic Locale Detection</h3><p>The automatic locale detection can be disabled with:</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// next.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">i18n</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">localeDetection</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

</code></pre></div><p>When<code>localeDetection</code>is set to<code>false</code>Next.js will no longer automatically redirect based on the user&#39;s preferred locale and will only provide locale information detected from either the locale based domain or locale path as described above.</p><h2 id="accessing-the-locale-information" tabindex="-1"><a class="header-anchor" href="#accessing-the-locale-information" aria-hidden="true">#</a> Accessing the locale information</h2><p>You can access the locale information via the Next.js router. For example, using the<a href="/docs/guide/api-reference/next/router#userouter"><code>useRouter()</code></a>hook the following properties are available:</p><ul><li><code>locale</code>contains the currently active locale.- <code>locales</code>contains all configured locales.- <code>defaultLocale</code>contains the configured default locale.</li></ul><p>When<a href="/docs/guide/basic-features/pages#static-generation-recommended">pre-rendering</a>pages with<code>getStaticProps</code>or<code>getServerSideProps</code>, the locale information is provided in<a href="/docs/guide/basic-features/data-fetching/get-static-props">the context</a>provided to the function.</p><p>When leveraging<code>getStaticPaths</code>, the configured locales are provided in the context parameter of the function under<code>locales</code>and the configured defaultLocale under<code>defaultLocale</code>.</p><h2 id="transition-between-locales" tabindex="-1"><a class="header-anchor" href="#transition-between-locales" aria-hidden="true">#</a> Transition between locales</h2><p>You can use<code>next/link</code>or<code>next/router</code>to transition between locales.</p><p>For<code>next/link</code>, a<code>locale</code>prop can be provided to transition to a different locale from the currently active one. If no<code>locale</code>prop is provided, the currently active<code>locale</code>is used during client-transitions. For example:</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> Link <span class="token keyword">from</span> <span class="token string">&#39;next/link&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">IndexPage</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/another<span class="token punctuation">&quot;</span></span> <span class="token attr-name">locale</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fr<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      To /fr/another
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre></div><p>When using the<code>next/router</code>methods directly, you can specify the<code>locale</code>that should be used via the transition options. For example:</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;next/router&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">IndexPage</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
      <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/another&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/another&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">locale</span><span class="token operator">:</span> <span class="token string">&#39;fr&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
    <span class="token punctuation">&gt;</span></span><span class="token plain-text">
      to /fr/another
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre></div><p>Note that to handle switching only the<code>locale</code>while preserving all routing information such as<a href="/docs/guide/routing/dynamic-routes">dynamic route</a>query values or hidden href query values, you can provide the<code>href</code>parameter as an object:</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;next/router&#39;</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> pathname<span class="token punctuation">,</span> asPath<span class="token punctuation">,</span> query <span class="token punctuation">}</span> <span class="token operator">=</span> router
<span class="token comment">// change just the locale and maintain all other route information including href&#39;s query</span>
router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> pathname<span class="token punctuation">,</span> query <span class="token punctuation">}</span><span class="token punctuation">,</span> asPath<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">locale</span><span class="token operator">:</span> nextLocale <span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre></div><p>See<a href="/docs/guide/api-reference/next/router#with-url-object">here</a>for more information on the object structure for<code>router.push</code>.</p><p>If you have a<code>href</code>that already includes the locale you can opt-out of automatically handling the locale prefixing:</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> Link <span class="token keyword">from</span> <span class="token string">&#39;next/link&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">IndexPage</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/fr/another<span class="token punctuation">&quot;</span></span> <span class="token attr-name">locale</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      To /fr/another
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre></div><h2 id="leveraging-the-next-locale-cookie" tabindex="-1"><a class="header-anchor" href="#leveraging-the-next-locale-cookie" aria-hidden="true">#</a> Leveraging the NEXT_LOCALE cookie</h2><p>Next.js supports overriding the accept-language header with a<code>NEXT_LOCALE=the-locale</code>cookie. This cookie can be set using a language switcher and then when a user comes back to the site it will leverage the locale specified in the cookie when redirecting from<code>/</code>to the correct locale location.</p><p>For example, if a user prefers the locale<code>fr</code>in their accept-language header but a<code>NEXT_LOCALE=en</code>cookie is set the<code>en</code>locale when visiting<code>/</code>the user will be redirected to the<code>en</code>locale location until the cookie is removed or expired.</p><h2 id="search-engine-optimization" tabindex="-1"><a class="header-anchor" href="#search-engine-optimization" aria-hidden="true">#</a> Search Engine Optimization</h2><p>Since Next.js knows what language the user is visiting it will automatically add the<code>lang</code>attribute to the<code>&lt;html&gt;</code>tag.</p>`,30),A=n("code",null,"hreflang",-1),D=n("a",{href:"/docs/guide/api-reference/next/head"},[n("code",null,"next/head")],-1),W=n("code",null,"hreflang",-1),B={href:"https://support.google.com/webmasters/answer/189077",target:"_blank",rel:"noopener noreferrer"},C=e(`<h2 id="how-does-this-work-with-static-generation" tabindex="-1"><a class="header-anchor" href="#how-does-this-work-with-static-generation" aria-hidden="true">#</a> How does this work with Static Generation?</h2><blockquote><p>Note that Internationalized Routing does not integrate with<a href="/docs/guide/advanced-features/static-html-export"><code>next export</code></a>as<code>next export</code>does not leverage the Next.js routing layer. Hybrid Next.js applications that do not use<code>next export</code>are fully supported.</p></blockquote><h3 id="dynamic-routes-and-getstaticprops-pages" tabindex="-1"><a class="header-anchor" href="#dynamic-routes-and-getstaticprops-pages" aria-hidden="true">#</a> Dynamic Routes and getStaticProps Pages</h3><p>For pages using<code>getStaticProps</code>with<a href="/docs/guide/routing/dynamic-routes">Dynamic Routes</a>, all locale variants of the page desired to be prerendered need to be returned from<a href="/docs/guide/basic-features/data-fetching/get-static-paths"><code>getStaticPaths</code></a>. Along with the<code>params</code>object returned for<code>paths</code>, you can also return a<code>locale</code>field specifying which locale you want to render. For example:</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// pages/blog/[slug].js</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getStaticPaths</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> locales <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">paths</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token comment">// if no \`locale\` is provided only the defaultLocale will be generated</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">slug</span><span class="token operator">:</span> <span class="token string">&#39;post-1&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">locale</span><span class="token operator">:</span> <span class="token string">&#39;en-US&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">slug</span><span class="token operator">:</span> <span class="token string">&#39;post-1&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">locale</span><span class="token operator">:</span> <span class="token string">&#39;fr&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">fallback</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div><p>For<a href="/docs/guide/advanced-features/automatic-static-optimization">Automatically Statically Optimized</a>and non-dynamic<code>getStaticProps</code>pages,<strong>a version of the page will be generated for each locale</strong>. This is important to consider because it can increase build times depending on how many locales are configured inside<code>getStaticProps</code>.</p><p>For example, if you have 50 locales configured with 10 non-dynamic pages using<code>getStaticProps</code>, this means<code>getStaticProps</code>will be called 500 times. 50 versions of the 10 pages will be generated during each build.</p><p>To decrease the build time of dynamic pages with<code>getStaticProps</code>, use a<a href="/docs/guide/api-reference/data-fetching/get-static-paths#fallback-true"><code>fallback</code>mode</a>. This allows you to return only the most popular paths and locales from<code>getStaticPaths</code>for prerendering during the build. Then, Next.js will build the remaining pages at runtime as they are requested.</p><h3 id="automatically-statically-optimized-pages" tabindex="-1"><a class="header-anchor" href="#automatically-statically-optimized-pages" aria-hidden="true">#</a> Automatically Statically Optimized Pages</h3><p>For pages that are<a href="/docs/guide/advanced-features/automatic-static-optimization">automatically statically optimized</a>, a version of the page will be generated for each locale.</p><h3 id="non-dynamic-getstaticprops-pages" tabindex="-1"><a class="header-anchor" href="#non-dynamic-getstaticprops-pages" aria-hidden="true">#</a> Non-dynamic getStaticProps Pages</h3><p>For non-dynamic<code>getStaticProps</code>pages, a version is generated for each locale like above.<code>getStaticProps</code>is called with each<code>locale</code>that is being rendered. If you would like to opt-out of a certain locale from being pre-rendered, you can return<code>notFound: true</code>from<code>getStaticProps</code>and this variant of the page will not be generated.</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getStaticProps</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> locale <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Call an external API endpoint to get posts.</span>
  <span class="token comment">// You can use any data fetching library</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://.../posts?locale=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>locale<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> posts <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>posts<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">notFound</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// By returning { props: posts }, the Blog component</span>
  <span class="token comment">// will receive \`posts\` as a prop at build time</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      posts<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div><h2 id="limits-for-the-i18n-config" tabindex="-1"><a class="header-anchor" href="#limits-for-the-i18n-config" aria-hidden="true">#</a> Limits for the i18n config</h2><ul><li><code>locales</code>: 100 total locales- <code>domains</code>: 100 total locale domain items</li></ul><blockquote><p>**Note:**These limits have been added initially to prevent potential<a href="#dynamic-routes-and-getstaticprops-pages">performance issues at build time</a>. You can workaround these limits with custom routing using<a href="/docs/middleware">Middleware</a>in Next.js 12.</p></blockquote>`,16);function O(Y,$){const s=p("ExternalLinkIcon");return c(),l("div",null,[r,n("details",u,[d,n("ul",null,[n("li",null,[n("a",k,[a("i18n routing"),t(s)])])])]),n("p",null,[a("Next.js has built-in support for internationalized ("),n("a",h,[a("i18n"),t(s)]),a(") routing since"),g,a(". You can provide a list of locales, the default locale, and domain-specific locales and Next.js will automatically handle the routing.")]),n("p",null,[a("The i18n routing support is currently meant to complement existing i18n library solutions like"),n("a",f,[m,t(s)]),a(","),n("a",y,[x,t(s)]),a(","),n("a",b,[w,t(s)]),a(","),n("a",v,[_,t(s)]),a(","),n("a",j,[L,t(s)]),a("and others by streamlining the routes and locale parsing.")]),S,N,n("p",null,[a("Locales are"),n("a",q,[a("UTS Locale Identifiers"),t(s)]),a(", a standardized format for defining locales.")]),P,n("p",null,[a("When a user visits the application root (generally"),T,a("), Next.js will try to automatically detect which locale the user prefers based on the"),n("a",I,[R,t(s)]),a("header and the current domain.")]),U,n("p",null,[a("With Next.js 12 and"),z,a(", we can add a prefix to the default locale with a"),n("a",E,[a("workaround"),t(s)]),a(".")]),F,n("p",null,[a("Next.js doesn't know about variants of a page so it's up to you to add the"),A,a("meta tags using"),D,a(". You can learn more about"),W,a("in the"),n("a",B,[a("Google Webmasters documentation"),t(s)]),a(".")]),C])}const H=o(i,[["render",O],["__file","i18n-routing.html.vue"]]);export{H as default};
