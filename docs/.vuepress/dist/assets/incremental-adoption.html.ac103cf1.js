import{_ as s,r as o,o as r,c,b as e,d as n,e as a,a as p}from"./app.1ad2624e.js";const i={},l=e("h1",{id:"incrementally-adopting-next-js",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#incrementally-adopting-next-js","aria-hidden":"true"},"#"),n(" Incrementally Adopting Next.js")],-1),u={class:"custom-container details"},d=e("summary",null,"示例",-1),h={href:"https://github.com/vercel/next.js/tree/canary/examples/rewrites",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/vercel/next.js/tree/canary/examples/redirects",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/vercel/next.js/tree/canary/examples/with-zones",target:"_blank",rel:"noopener noreferrer"},k=p(`<p>Next.js has been designed for gradual adoption. With Next.js, you can continue using your existing code and add as much (or as little) React as you need. By starting small and incrementally adding more pages, you can prevent derailing feature work by avoiding a complete rewrite.</p><h2 id="strategies" tabindex="-1"><a class="header-anchor" href="#strategies" aria-hidden="true">#</a> Strategies</h2><h3 id="subpath" tabindex="-1"><a class="header-anchor" href="#subpath" aria-hidden="true">#</a> Subpath</h3><p>The first strategy is to configure your server or proxy such that, everything under a specific subpath points to a Next.js app. For example, your existing website might be at<code>example.com</code>, and you might configure your proxy such that<code>example.com/store</code>serves a Next.js e-commerce store.</p><p>Using<a href="/docs/guide/api-reference/next.config.js/basepath"><code>basePath</code></a>, you can configure your Next.js application&#39;s assets and links to automatically work with your new subpath<code>/store</code>. Since each page in Next.js is its own<a href="/docs/guide/routing/introduction">standalone route</a>, pages like<code>pages/products.js</code>will route to<code>example.com/store/products</code>in your application.</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// next.config.js</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">basePath</span><span class="token operator">:</span> <span class="token string">&#39;/store&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

</code></pre></div><p>To learn more about<code>basePath</code>, take a look at our<a href="/docs/guide/api-reference/next.config.js/basepath">documentation</a>.</p><h3 id="rewrites" tabindex="-1"><a class="header-anchor" href="#rewrites" aria-hidden="true">#</a> Rewrites</h3><p>The second strategy is to create a new Next.js app that points to the root URL of your domain. Then, you can use<a href="/docs/guide/api-reference/next.config.js/rewrites"><code>rewrites</code></a>inside<code>next.config.js</code>to have some subpaths to be proxied to your existing app.</p><p>For example, let&#39;s say you created a Next.js app to be served from<code>example.com</code>with the following<code>next.config.js</code>. Now, requests for the pages you’ve added to this Next.js app (e.g.<code>/about</code>if you’ve added<code>pages/about.js</code>) will be handled by Next.js, and requests for any other route (e.g.<code>/dashboard</code>) will be proxied to<code>proxy.example.com</code>.</p><blockquote><p>**Note:**If you use<a href="/docs/guide/api-reference/data-fetching/get-static-paths#fallback-true">fallback: true/&#39;blocking&#39;</a>in<code>getStaticPaths</code>, the catch-all fallback<code>rewrites</code>defined in<code>next.config.js</code>will not be run. They are instead caught by the<code>getStaticPaths</code>fallback.</p></blockquote><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// next.config.js</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">async</span> <span class="token function">rewrites</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token comment">// After checking all Next.js pages (including dynamic routes)</span>
      <span class="token comment">// and static files we proxy any other requests</span>
      <span class="token literal-property property">fallback</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          <span class="token literal-property property">source</span><span class="token operator">:</span> <span class="token string">&#39;/:path*&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">destination</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://proxy.example.com/:path*</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// For versions of Next.js &lt; v10.1 you can use a no-op rewrite instead</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>
      <span class="token comment">// we need to define a no-op rewrite to trigger checking</span>
      <span class="token comment">// all pages/static files before we attempt proxying</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">source</span><span class="token operator">:</span> <span class="token string">&#39;/:path*&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">destination</span><span class="token operator">:</span> <span class="token string">&#39;/:path*&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">source</span><span class="token operator">:</span> <span class="token string">&#39;/:path*&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">destination</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://proxy.example.com/:path*</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

</code></pre></div><p>To learn more about rewrites, take a look at our<a href="/docs/guide/api-reference/next.config.js/rewrites">documentation</a>.</p>`,13),f=e("code",null,"[slug].js",-1),y=e("code",null,"fallback: true",-1),x=e("code",null,"fallback: 'blocking'",-1),_=e("code",null,"rewrite",-1),b=e("code",null,"notFound: true",-1),w=e("code",null,"getStaticProps",-1),j=e("code",null,"rewrite",-1),v=e("code",null,"getServerSideProps",-1),N=e("code",null,"stale-while-revalidate",-1),S={href:"https://github.com/vercel/next.js/discussions/38839#discussioncomment-3744442",target:"_blank",rel:"noopener noreferrer"},T=e("code",null,"notFound: true",-1),P=e("h3",{id:"micro-frontends-with-monorepos-and-subdomains",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#micro-frontends-with-monorepos-and-subdomains","aria-hidden":"true"},"#"),n(" Micro-Frontends with Monorepos and Subdomains")],-1),q={href:"https://vercel.com",target:"_blank",rel:"noopener noreferrer"},F={href:"https://vercel.com/blog/monorepos-are-changing-how-teams-build-software?utm_source=next-site&utm_medium=docs&utm_campaign=next-website",target:"_blank",rel:"noopener noreferrer"},I={href:"https://demo.vercel.pub/platforms-starter-kit",target:"_blank",rel:"noopener noreferrer"},V=e("ul",null,[e("li",null,"Smaller, more cohesive and maintainable codebases.- More scalable organizations with decoupled, autonomous teams.- The ability to upgrade, update, or even rewrite parts of the frontend in a more incremental fashion.")],-1),R=e("p",null,"Once your monorepo is set up, push changes to your Git repository as usual and you'll see the commits deployed to the Vercel projects you've connected.",-1),B=e("h2",{id:"conclusion",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#conclusion","aria-hidden":"true"},"#"),n(" Conclusion")],-1),C=e("a",{href:"/docs/guide/api-reference/next.config.js/basepath"},"subpaths",-1),M=e("a",{href:"/docs/guide/api-reference/next.config.js/rewrites"},"rewrites",-1),A={href:"https://vercel.com/templates/next.js/monorepo-turborepo",target:"_blank",rel:"noopener noreferrer"};function E(L,U){const t=o("ExternalLinkIcon");return r(),c("div",null,[l,e("details",u,[d,e("ul",null,[e("li",null,[e("a",h,[n("Rewrites"),a(t)]),n("- "),e("a",m,[n("Redirects"),a(t)]),n("- "),e("a",g,[n("Multi-Zones"),a(t)])])])]),k,e("blockquote",null,[e("p",null,[n("**Note:**If you are incrementally migrating to a dynamic route (e.g."),f,n(") and using"),y,n("or"),x,n("along with a fallback"),_,n(", ensure you consider the case where pages are not found. When Next.js matches the dynamic route it stops checking any further routes. Using"),b,n("in"),w,n("will return the 404 page without applying the fallback"),j,n(". If this is not desired, you can use"),v,n("with"),N,n("Cache-Control headers when returning your props. Then, you canmanuallyproxy to your existing backend using something like"),e("a",S,[n("http-proxy"),a(t)]),n("instead of returning"),T,n(".")])]),P,e("p",null,[n("Next.js and"),e("a",q,[n("Vercel"),a(t)]),n("make it straightforward to adopt micro frontends and deploy as a"),e("a",F,[n("monorepo"),a(t)]),n(". This allows you to use"),e("a",I,[n("subdomains"),a(t)]),n("to adopt new applications incrementally. Some benefits of micro-frontends:")]),V,R,B,e("p",null,[n("To learn more, read about"),C,n("and"),M,n("or"),e("a",A,[n("deploy a Next.js monorepo"),a(t)]),n(".")])])}const W=s(i,[["render",E],["__file","incremental-adoption.html.vue"]]);export{W as default};
