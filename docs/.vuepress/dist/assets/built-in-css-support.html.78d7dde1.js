import{_ as e,r as o,o as c,c as l,b as s,d as n,e as t,a as p}from"./app.1ad2624e.js";const u={},i=s("h1",{id:"内置-css-支持",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#内置-css-支持","aria-hidden":"true"},"#"),n(" 内置 CSS 支持")],-1),r=s("p",null,":::detail 例子",-1),k={href:"https://github.com/vercel/next.js/tree/canary/examples/basic-css",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/vercel/next.js/tree/canary/examples/with-tailwindcss",target:"_blank",rel:"noopener noreferrer"},g=p(`<p>Next.js 允许您从 JavaScript 文件导入 CSS 文件。这是可能的，因为 Next.js 扩展了importJavaScript 之外的概念。</p><h2 id="添加全局样式表" tabindex="-1"><a class="header-anchor" href="#添加全局样式表" aria-hidden="true">#</a> 添加全局样式表</h2><p>要将样式表添加到您的应用程序，请在pages/_app.js.</p><p>例如，考虑以下名为 的样式表styles.css：</p><div class="language-css" data-ext="css"><pre class="language-css"><code><span class="token selector">body</span> <span class="token punctuation">{</span>
  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">&#39;SF Pro Text&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;SF Pro Icons&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Helvetica Neue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Helvetica&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;Arial&#39;</span><span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 20px 20px 60px<span class="token punctuation">;</span>
  <span class="token property">max-width</span><span class="token punctuation">:</span> 680px<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>如果尚未存在，请创建一个pages/_app.js文件。然后，import文件styles.css。</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token string">&#39;../styles.css&#39;</span>

<span class="token comment">// This default export is required in a new \`pages/_app.js\` file.</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">MyApp</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> Component<span class="token punctuation">,</span> pageProps <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>pageProps<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token punctuation">}</span>
</code></pre></div><p>这些样式 ( styles.css) 将应用于应用程序中的所有页面和组件。由于样式表的全局性，为了避免冲突，您只能将它们导入到pages/_app.js.</p><p>在开发中，以这种方式表达样式表允许您在编辑样式时热重新加载它们——这意味着您可以保持应用程序状态。</p><p>在生产环境中，所有 CSS 文件将自动连接成一个.css压缩文件。</p><h3 id="从导入样式node-modules" tabindex="-1"><a class="header-anchor" href="#从导入样式node-modules" aria-hidden="true">#</a> 从导入样式node_modules</h3><p>从 Next.js 9.5.4node_modules开始，允许在应用程序的任何位置导入 CSS 文件。</p><p>对于全局样式表，如bootstrapor nprogress，您应该将文件导入pages/_app.js. 例如：</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// pages/_app.js</span>
<span class="token keyword">import</span> <span class="token string">&#39;bootstrap/dist/css/bootstrap.css&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">MyApp</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> Component<span class="token punctuation">,</span> pageProps <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>pageProps<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token punctuation">}</span>
</code></pre></div><p>如需导入第三方组件所需的 CSS，您可以在您的组件中执行此操作。例如：</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// components/ExampleDialog.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Dialog <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@reach/dialog&#39;</span>
<span class="token keyword">import</span> VisuallyHidden <span class="token keyword">from</span> <span class="token string">&#39;@reach/visually-hidden&#39;</span>
<span class="token keyword">import</span> <span class="token string">&#39;@reach/dialog/styles.css&#39;</span>

<span class="token keyword">function</span> <span class="token function">ExampleDialog</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>showDialog<span class="token punctuation">,</span> setShowDialog<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token function-variable function">open</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setShowDialog</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token function-variable function">close</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setShowDialog</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>open<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Open Dialog</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Dialog</span></span> <span class="token attr-name">isOpen</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>showDialog<span class="token punctuation">}</span></span> <span class="token attr-name">onDismiss</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>close<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>close-button<span class="token punctuation">&quot;</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>close<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">VisuallyHidden</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Close</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">VisuallyHidden</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">aria-hidden</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">×</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello there. I am a dialog</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Dialog</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="添加组件级-css" tabindex="-1"><a class="header-anchor" href="#添加组件级-css" aria-hidden="true">#</a> 添加组件级 CSS</h2><p>Next.js 支持使用文件命名约定的CSS 模块。[name].module.css</p><p>CSS 模块通过自动创建唯一的类名来本地化 CSS。这允许您在不同的文件中使用相同的 CSS 类名，而不必担心冲突。</p><p>这种行为使 CSS 模块成为包含组件级 CSS 的理想方式。CSS 模块文件可以在您的应用程序的任何地方导入。</p><p>例如，考虑文件夹Button中的可重用组件：components/</p><p>首先，components/Button.module.css使用以下内容创建：</p><div class="language-css" data-ext="css"><pre class="language-css"><code><span class="token comment">/*
You do not need to worry about .error {} colliding with any other \`.css\` or
\`.module.css\` files!
*/</span>
<span class="token selector">.error</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>然后，创建components/Button.js、导入和使用上述 CSS 文件：</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">&#39;./Button.module.css&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">Button</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>
      <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span>
      <span class="token comment">// Note how the &quot;error&quot; class is accessed as a property on the imported</span>
      <span class="token comment">// \`styles\` object.</span>
      <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>error<span class="token punctuation">}</span></span>
    <span class="token punctuation">&gt;</span></span><span class="token plain-text">
      Destroy
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>CSS 模块是一项可选功能，仅对.module.css扩展名为. <link>仍然支持常规样式表和全局 CSS 文件。</p><p>在生产中，所有 CSS 模块文件将自动连接成许多缩小和代码分割的 .css文件。这些.css文件代表应用程序中的热执行路径，确保为应用程序加载最少量的 CSS 以进行绘制。</p><h2 id="sass支持" tabindex="-1"><a class="header-anchor" href="#sass支持" aria-hidden="true">#</a> Sass支持</h2><p>Next.js 允许你使用.scss和.sass扩展来导入 Sass。.module.scss你可以通过 CSS 模块和or.module.sass扩展来使用组件级 Sass 。</p><p>在您可以使用 Next.js 的内置 Sass 支持之前，请务必安装sass：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev sass
</code></pre></div><p>Sass 支持与上面详述的内置 CSS 支持具有相同的好处和限制。</p><blockquote><p>注意：Sass 支持两种不同的语法，每种都有自己的扩展。.scss扩展要求您使用SCSS 语法，而扩展.sass要求您使用缩进语法（“Sass”）。</p><p>如果您不确定要选择哪个，请从.scss作为 CSS 超集的扩展开始，并且不需要您学习缩进语法（“Sass”）。</p></blockquote><h3 id="自定义-sass-选项" tabindex="-1"><a class="header-anchor" href="#自定义-sass-选项" aria-hidden="true">#</a> 自定义 Sass 选项</h3><p>如果你想配置 Sass 编译器，你可以使用sassOptionsin来完成next.config.js。</p><p>例如添加includePaths：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">sassOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">includePaths</span><span class="token operator">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;styles&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="sass-变量" tabindex="-1"><a class="header-anchor" href="#sass-变量" aria-hidden="true">#</a> Sass 变量</h3><p>Next.js 支持从 CSS 模块文件导出的 Sass 变量。</p><p>例如，使用导出的primaryColorSass 变量：</p><div class="language-scss" data-ext="scss"><pre class="language-scss"><code><span class="token comment">/* variables.module.scss */</span>
<span class="token property"><span class="token variable">$primary-color</span></span><span class="token punctuation">:</span> #64ff00<span class="token punctuation">;</span>

<span class="token selector">:export </span><span class="token punctuation">{</span>
  <span class="token property">primaryColor</span><span class="token punctuation">:</span> <span class="token variable">$primary-color</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// pages/_app.js</span>
<span class="token keyword">import</span> variables <span class="token keyword">from</span> <span class="token string">&#39;../styles/variables.module.scss&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">MyApp</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> Component<span class="token punctuation">,</span> pageProps <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Layout</span></span> <span class="token attr-name">color</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>variables<span class="token punctuation">.</span>primaryColor<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>pageProps<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Layout</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="css-in-js" tabindex="-1"><a class="header-anchor" href="#css-in-js" aria-hidden="true">#</a> CSS-in-JS</h2><p>:::detail 例子</p>`,44),h={href:"https://github.com/vercel/next.js/tree/canary/examples/with-styled-jsx",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/vercel/next.js/tree/canary/examples/with-styled-components",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github.com/vercel/next.js/tree/canary/examples/with-emotion",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github.com/vercel/next.js/tree/canary/examples/with-linaria",target:"_blank",rel:"noopener noreferrer"},S={href:"https://github.com/vercel/next.js/tree/canary/examples/with-tailwindcss-emotion",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/vercel/next.js/tree/canary/examples/with-styletron",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/vercel/next.js/tree/canary/examples/with-cxs",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/vercel/next.js/tree/canary/examples/with-aphrodite",target:"_blank",rel:"noopener noreferrer"},j={href:"https://github.com/vercel/next.js/tree/canary/examples/with-fela",target:"_blank",rel:"noopener noreferrer"},w={href:"https://github.com/vercel/next.js/tree/canary/examples/with-stitches",target:"_blank",rel:"noopener noreferrer"},_=p(`<p>可以使用任何现有的 CSS-in-JS 解决方案。最简单的一种是内联样式：</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">HiThere</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;red&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">hi there</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> HiThere
</code></pre></div><p>我们捆绑styled-jsx以提供对隔离作用域 CSS 的支持。其目的是支持类似于 Web 组件的“影子 CSS”，遗憾的是它不支持服务器渲染并且是 JS-only。</p><p>有关其他流行的 CSS-in-JS 解决方案（如样式化组件），请参阅上面的示例。</p><p>使用的组件styled-jsx如下所示：</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      Hello world
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">scoped!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">jsx</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">{\`
        p {
          color: blue;
        }
        div {
          background: red;
        }
        @media (max-width: 600px) {
          div {
            background: blue;
          }
        }
      \`}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">global</span> <span class="token attr-name">jsx</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">{\`
        body {
          background: black;
        }
      \`}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> HelloWorld
</code></pre></div><p>有关更多示例，请参阅styled-jsx 文档。</p><h2 id="faq" tabindex="-1"><a class="header-anchor" href="#faq" aria-hidden="true">#</a> FAQ</h2><h3 id="它可以在禁用-javascript-的情况下工作吗" tabindex="-1"><a class="header-anchor" href="#它可以在禁用-javascript-的情况下工作吗" aria-hidden="true">#</a> 它可以在禁用 JavaScript 的情况下工作吗？</h3><p>是的，如果您禁用 JavaScript，CSS 仍将加载到生产构建 ( next start) 中。在开发过程中，我们需要启用 JavaScript 以通过快速刷新为开发人员提供最佳体验。</p>`,10);function C(N,q){const a=o("ExternalLinkIcon");return c(),l("div",null,[i,r,s("ul",null,[s("li",null,[s("a",k,[n("基本 CSS 示例"),t(a)])]),s("li",null,[s("a",d,[n("使用Tailwind CSS"),t(a)]),n(" :::")])]),g,s("ul",null,[s("li",null,[s("a",h,[n("Styled JSX"),t(a)])]),s("li",null,[s("a",m,[n("Styled Components"),t(a)])]),s("li",null,[s("a",x,[n("Emotion"),t(a)])]),s("li",null,[s("a",y,[n("Linaria"),t(a)])]),s("li",null,[s("a",S,[n("Tailwind CSS + Emotion"),t(a)])]),s("li",null,[s("a",f,[n("Styletron"),t(a)])]),s("li",null,[s("a",b,[n("Cxs"),t(a)])]),s("li",null,[s("a",v,[n("Aphrodite"),t(a)])]),s("li",null,[s("a",j,[n("Fela"),t(a)])]),s("li",null,[s("a",w,[n("Stitches"),t(a)]),n(" :::")])]),_])}const H=e(u,[["render",C],["__file","built-in-css-support.html.vue"]]);export{H as default};
