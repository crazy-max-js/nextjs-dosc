import{_ as e,o as n,c as a,a as s}from"./app.1ad2624e.js";const t={},o=s(`<h1 id="edge-and-node-js-runtimes" tabindex="-1"><a class="header-anchor" href="#edge-and-node-js-runtimes" aria-hidden="true">#</a> Edge and Node.js Runtimes</h1><p>Next.js has two<strong>server runtimes</strong>where you can render parts of your application code: the<strong>Node.js Runtime</strong>and the<a href="/docs/guide/api-reference/edge-runtime"><strong>Edge Runtime</strong></a>. Depending on your deployment infrastructure, both runtimes support streaming.</p><p>By default, Next.js uses the Node.js runtime.<a href="/docs/guide/advanced-features/middleware">Middleware</a>and<a href="/docs/guide/api-routes/edge-api-routes">Edge API Routes</a>use the Edge runtime.</p><h2 id="global-runtime-option" tabindex="-1"><a class="header-anchor" href="#global-runtime-option" aria-hidden="true">#</a> Global Runtime Option</h2><p>To configure the runtime for your whole application, you can set the experimental option<code>runtime</code>in your<code>next.config.js</code>file:</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// next.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">experimental</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">runtime</span><span class="token operator">:</span> <span class="token string">&#39;experimental-edge&#39;</span><span class="token punctuation">,</span> <span class="token comment">// &#39;node.js&#39; (default) | experimental-edge</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

</code></pre></div><p>You can detect which runtime you&#39;re using by looking at the<code>p<wbr>rocess.env.NEXT_RUNTIME</code>Environment Variable during runtime, and examining the<code>options.nextRuntime</code>variable during compilation.</p><h2 id="page-runtime-option" tabindex="-1"><a class="header-anchor" href="#page-runtime-option" aria-hidden="true">#</a> Page Runtime Option</h2><p>On each page, you can optionally export a<code>runtime</code>config set to either<code>&#39;nodejs&#39;</code>or<code>&#39;experimental-edge&#39;</code>:</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// pages/index.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Index</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getServerSideProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">runtime</span><span class="token operator">:</span> <span class="token string">&#39;experimental-edge&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

</code></pre></div><p>When both the per-page runtime and global runtime are set, the per-page runtime overrides the global runtime. If the per-page runtime isnotset, the global runtime option will be used.</p><h2 id="runtime-differences" tabindex="-1"><a class="header-anchor" href="#runtime-differences" aria-hidden="true">#</a> Runtime Differences</h2><p>Next.js&#39; default runtime configuration is good for most use cases, but thereâ€™re still many reasons to change to one runtime over the other one.</p><p>For example, for API routes that rely on native Node.js APIs, they need to run with the Node.js Runtime. However, if an API only uses something like cookie-based authentication, using Middleware and the Edge Runtime will be a better choice due to its lower latency as well as better scalability.</p><h2 id="edge-api-routes" tabindex="-1"><a class="header-anchor" href="#edge-api-routes" aria-hidden="true">#</a> Edge API Routes</h2><p><a href="/docs/guide/api-routes/edge-api-routes">Edge API Routes</a>enable you to build high performance APIs with Next.js using the Edge Runtime.</p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>
  runtime<span class="token operator">:</span> <span class="token string">&#39;experimental-edge&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token string">&#39;Hello world!&#39;</span><span class="token punctuation">)</span>

</code></pre></div><h2 id="related" tabindex="-1"><a class="header-anchor" href="#related" aria-hidden="true">#</a> Related</h2>`,18),p=[o];function r(i,c){return n(),a("div",null,p)}const d=e(t,[["render",r],["__file","switchable-runtime.html.vue"]]);export{d as default};
