import{_ as o,r as p,o as c,c as l,b as a,d as s,e as t,a as e}from"./app.1ad2624e.js";const u={},i=a("h1",{id:"dynamic-routes",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#dynamic-routes","aria-hidden":"true"},"#"),s(" Dynamic Routes")],-1),r={class:"custom-container details"},d=a("summary",null,"示例",-1),k={href:"https://github.com/vercel/next.js/tree/canary/examples/dynamic-routing",target:"_blank",rel:"noopener noreferrer"},g=e(`<p>Defining routes by using predefined paths is not always enough for complex applications. In Next.js you can add brackets to a page (<code>[param]</code>) to create a dynamic route (a.k.a. url slugs, pretty urls, and others).</p><p>Consider the following page<code>pages/post/[pid].js</code>:</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;next/router&#39;</span>

<span class="token keyword">const</span> <span class="token function-variable function">Post</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> pid <span class="token punctuation">}</span> <span class="token operator">=</span> router<span class="token punctuation">.</span>query

  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Post: </span><span class="token punctuation">{</span>pid<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> Post

</code></pre></div><p>Any route like<code>/post/1</code>,<code>/post/abc</code>, etc. will be matched by<code>pages/post/[pid].js</code>. The matched path parameter will be sent as a query parameter to the page, and it will be merged with the other query parameters.</p><p>For example, the route<code>/post/abc</code>will have the following<code>query</code>object:</p><div class="language-json" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span> <span class="token property">&quot;pid&quot;</span><span class="token operator">:</span> <span class="token string">&quot;abc&quot;</span> <span class="token punctuation">}</span>

</code></pre></div><p>Similarly, the route<code>/post/abc?foo=bar</code>will have the following<code>query</code>object:</p><div class="language-json" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span> <span class="token property">&quot;foo&quot;</span><span class="token operator">:</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;pid&quot;</span><span class="token operator">:</span> <span class="token string">&quot;abc&quot;</span> <span class="token punctuation">}</span>

</code></pre></div><p>However, route parameters will override query parameters with the same name. For example, the route<code>/post/abc?pid=123</code>will have the following<code>query</code>object:</p><div class="language-json" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span> <span class="token property">&quot;pid&quot;</span><span class="token operator">:</span> <span class="token string">&quot;abc&quot;</span> <span class="token punctuation">}</span>

</code></pre></div><p>Multiple dynamic route segments work the same way. The page<code>pages/post/[pid]/[comment].js</code>will match the route<code>/post/abc/a-comment</code>and its<code>query</code>object will be:</p><div class="language-json" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span> <span class="token property">&quot;pid&quot;</span><span class="token operator">:</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;comment&quot;</span><span class="token operator">:</span> <span class="token string">&quot;a-comment&quot;</span> <span class="token punctuation">}</span>

</code></pre></div><p>Client-side navigations to dynamic routes are handled with<a href="/docs/guide/api-reference/next/link"><code>next/link</code></a>. If we wanted to have links to the routes used above it will look like this:</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> Link <span class="token keyword">from</span> <span class="token string">&#39;next/link&#39;</span>

<span class="token keyword">function</span> <span class="token function">Home</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/post/abc<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Go to pages/post/[pid].js</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/post/abc?foo=bar<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Also goes to pages/post/[pid].js</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/post/abc/a-comment<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
          Go to pages/post/[pid]/[comment].js
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> Home

</code></pre></div><p>Read our docs for<a href="/docs/guide/routing/introduction#linking-between-pages">Linking between pages</a>to learn more.</p><h3 id="catch-all-routes" tabindex="-1"><a class="header-anchor" href="#catch-all-routes" aria-hidden="true">#</a> Catch all routes</h3>`,16),h={class:"custom-container details"},m=a("summary",null,"示例",-1),y={href:"https://github.com/vercel/next.js/tree/canary/examples/catch-all-routes",target:"_blank",rel:"noopener noreferrer"},b=e(`<p>Dynamic routes can be extended to catch all paths by adding three dots (<code>...</code>) inside the brackets. For example:</p><ul><li><code>pages/post/[...slug].js</code>matches<code>/post/a</code>, but also<code>/post/a/b</code>,<code>/post/a/b/c</code>and so on.</li></ul><blockquote><p><strong>Note</strong>: You can use names other than<code>slug</code>, such as:<code>[...param]</code></p></blockquote><p>Matched parameters will be sent as a query parameter (<code>slug</code>in the example) to the page, and it will always be an array, so, the path<code>/post/a</code>will have the following<code>query</code>object:</p><div class="language-json" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span> <span class="token property">&quot;slug&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>

</code></pre></div><p>And in the case of<code>/post/a/b</code>, and any other matching path, new parameters will be added to the array, like so:</p><div class="language-json" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span> <span class="token property">&quot;slug&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>

</code></pre></div><h3 id="optional-catch-all-routes" tabindex="-1"><a class="header-anchor" href="#optional-catch-all-routes" aria-hidden="true">#</a> Optional catch all routes</h3><p>Catch all routes can be made optional by including the parameter in double brackets (<code>[[...slug]]</code>).</p><p>For example,<code>pages/post/[[...slug]].js</code>will match<code>/post</code>,<code>/post/a</code>,<code>/post/a/b</code>, and so on.</p><p>The main difference between catch all and optional catch all routes is that with optional, the route without the parameter is also matched (<code>/post</code>in the example above).</p><p>The<code>query</code>objects are as follows:</p><div class="language-json" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token comment">// GET \`/post\` (empty object)</span>
<span class="token punctuation">{</span> <span class="token property">&quot;slug&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token comment">// \`GET /post/a\` (single-element array)</span>
<span class="token punctuation">{</span> <span class="token property">&quot;slug&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token comment">// \`GET /post/a/b\` (multi-element array)</span>

</code></pre></div><h2 id="caveats" tabindex="-1"><a class="header-anchor" href="#caveats" aria-hidden="true">#</a> Caveats</h2><ul><li>Predefined routes take precedence over dynamic routes, and dynamic routes over catch all routes. Take a look at the following examples:- <code>pages/post/create.js</code>- Will match<code>/post/create</code>- <code>pages/post/[pid].js</code>- Will match<code>/post/1</code>,<code>/post/abc</code>, etc. But not<code>/post/create</code>- <code>pages/post/[...slug].js</code>- Will match<code>/post/1/2</code>,<code>/post/a/b/c</code>, etc. But not<code>/post/create</code>,<code>/post/abc</code>- Pages that are statically optimized by<a href="/docs/guide/advanced-features/automatic-static-optimization">Automatic Static Optimization</a>will be hydrated without their route parameters provided, i.e<code>query</code>will be an empty object (<code>{}</code>).After hydration, Next.js will trigger an update to your application to provide the route parameters in the<code>query</code>object.</li></ul><h2 id="related" tabindex="-1"><a class="header-anchor" href="#related" aria-hidden="true">#</a> Related</h2><p>For more information on what to do next, we recommend the following sections:</p>`,17);function q(x,w){const n=p("ExternalLinkIcon");return c(),l("div",null,[i,a("details",r,[d,a("ul",null,[a("li",null,[a("a",k,[s("Dynamic Routing"),t(n)])])])]),g,a("details",h,[m,a("ul",null,[a("li",null,[a("a",y,[s("Catch All Routes"),t(n)])])])]),b])}const j=o(u,[["render",q],["__file","dynamic-routes.html.vue"]]);export{j as default};
