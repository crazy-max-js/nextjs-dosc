import{_ as e,o as a,c as s,a as n}from"./app.1ad2624e.js";const o={},t=n(`<h1 id="source-maps" tabindex="-1"><a class="header-anchor" href="#source-maps" aria-hidden="true">#</a> Source Maps</h1><p>Source Maps are enabled by default during development. During production builds, they are disabled to prevent you leaking your source on the client, unless you specifically opt in with the configuration flag.</p><h2 id="configuration-flag" tabindex="-1"><a class="header-anchor" href="#configuration-flag" aria-hidden="true">#</a> Configuration flag</h2><p>Next.js provides a configuration flag you can use to enable browser source map generation during the production build:</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// next.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">productionBrowserSourceMaps</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

</code></pre></div><p>When the<code>productionBrowserSourceMaps</code>option is enabled, the source maps will be output in the same directory as the JavaScript files. Next.js will automatically serve these files when requested.</p><h2 id="caveats" tabindex="-1"><a class="header-anchor" href="#caveats" aria-hidden="true">#</a> Caveats</h2><ul><li>Adding source maps can increase<code>next build</code>time- Increases memory usage during<code>next build</code></li></ul>`,8),r=[t];function c(i,p){return a(),s("div",null,r)}const l=e(o,[["render",c],["__file","source-maps.html.vue"]]);export{l as default};
