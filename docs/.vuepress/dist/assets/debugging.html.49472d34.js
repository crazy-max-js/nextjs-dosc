import{_ as a,r,o as p,c,b as e,d as n,e as s,a as t}from"./app.1ad2624e.js";const i={},d=e("h1",{id:"debugging",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#debugging","aria-hidden":"true"},"#"),n(" Debugging")],-1),l={href:"https://code.visualstudio.com/docs/editor/debugging",target:"_blank",rel:"noopener noreferrer"},u={href:"https://developers.google.com/web/tools/chrome-devtools",target:"_blank",rel:"noopener noreferrer"},h={href:"https://nodejs.org/en/docs/guides/debugging-getting-started/",target:"_blank",rel:"noopener noreferrer"},g=t(`<h2 id="debugging-with-vs-code" tabindex="-1"><a class="header-anchor" href="#debugging-with-vs-code" aria-hidden="true">#</a> Debugging with VS Code</h2><p>Create a file named<code>.vscode/launch.json</code>at the root of your project with the following content:</p><div class="language-json" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0.2.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;configurations&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Next.js: debug server-side&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node-terminal&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;request&quot;</span><span class="token operator">:</span> <span class="token string">&quot;launch&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;command&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npm run dev&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Next.js: debug client-side&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;pwa-chrome&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;request&quot;</span><span class="token operator">:</span> <span class="token string">&quot;launch&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;url&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http://localhost:3000&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Next.js: debug full stack&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node-terminal&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;request&quot;</span><span class="token operator">:</span> <span class="token string">&quot;launch&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;command&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npm run dev&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;console&quot;</span><span class="token operator">:</span> <span class="token string">&quot;integratedTerminal&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;serverReadyAction&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;pattern&quot;</span><span class="token operator">:</span> <span class="token string">&quot;started server on .+, url: (https?://.+)&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;uriFormat&quot;</span><span class="token operator">:</span> <span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;action&quot;</span><span class="token operator">:</span> <span class="token string">&quot;debugWithChrome&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>

</code></pre></div><p><code>npm run dev</code>can be replaced with<code>yarn dev</code>if you&#39;re using Yarn. If you&#39;re<a href="/docs/guide/api-reference/cli#development">changing the port number</a>your application starts on, replace the<code>3000</code>in<code>http://localhost:3000</code>with the port you&#39;re using instead.</p><p>Now go to the Debug panel (Ctrl+Shift+Don Windows/Linux,⇧+⌘+Don macOS), select a launch configuration, then pressF5or select<strong>Debug: Start Debugging</strong>from the Command Palette to start your debugging session.</p><h2 id="using-the-debugger-in-jetbrains-webstorm" tabindex="-1"><a class="header-anchor" href="#using-the-debugger-in-jetbrains-webstorm" aria-hidden="true">#</a> Using the Debugger in Jetbrains WebStorm</h2><p>Click the drop down menu listing the runtime configuration, and click<code>Edit Configurations...</code>. Create a<code>Javascript Debug</code>debug configuration with<code>http://localhost:3000</code>as the URL. Customize to your liking (e.g. Browser for debugging, store as project file), and click<code>OK</code>. Run this debug configuration, and the selected browser should automatically open. At this point, you should have 2 applications in debug mode: the NextJS node application, and the client/ browser application.</p><h2 id="debugging-with-chrome-devtools" tabindex="-1"><a class="header-anchor" href="#debugging-with-chrome-devtools" aria-hidden="true">#</a> Debugging with Chrome DevTools</h2><h3 id="client-side-code" tabindex="-1"><a class="header-anchor" href="#client-side-code" aria-hidden="true">#</a> Client-side code</h3><p>Start your development server as usual by running<code>next dev</code>,<code>npm run dev</code>, or<code>yarn dev</code>. Once the server starts, open<code>http://localhost:3000</code>(or your alternate URL) in Chrome. Next, open Chrome&#39;s Developer Tools (Ctrl+Shift+Jon Windows/Linux,⌥+⌘+Ion macOS), then go to the<strong>Sources</strong>tab.</p>`,10),k={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger",target:"_blank",rel:"noopener noreferrer"},b=e("code",null,"debugger",-1),m=e("code",null,"webpack://_N_E/./",-1),q=e("h3",{id:"server-side-code",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#server-side-code","aria-hidden":"true"},"#"),n(" Server-side code")],-1),v={href:"https://nodejs.org/api/cli.html#cli_inspect_host_port",target:"_blank",rel:"noopener noreferrer"},f=e("code",null,"--inspect",-1),_=t(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">NODE_OPTIONS</span><span class="token operator">=</span><span class="token string">&#39;--inspect&#39;</span> next dev

</code></pre></div><p>If you&#39;re using<code>npm run dev</code>or<code>yarn dev</code>(see<a href="/docs/getting-started">Getting Started</a>) then you should update the<code>dev</code>script on your<code>package.json</code>:</p><div class="language-json" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;NODE_OPTIONS=&#39;--inspect&#39; next dev&quot;</span>

</code></pre></div><p>Launching the Next.js dev server with the<code>--inspect</code>flag will look something like this:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>Debugger listening on ws://127.0.0.1:9229/0cf90313-350d-4466-a748-cd60f4e47c95
For help, see: https://nodejs.org/en/docs/inspector
ready - started server on <span class="token number">0.0</span>.0.0:3000, url: http://localhost:3000

</code></pre></div><blockquote><p>Be aware that running<code>NODE_OPTIONS=&#39;--inspect&#39; npm run dev</code>or<code>NODE_OPTIONS=&#39;--inspect&#39; yarn dev</code>won&#39;t work. This would try to start multiple debuggers on the same port: one for the npm/yarn process and one for Next.js. You would then get an error like<code>Starting inspector on 127.0.0.1:9229 failed: address already in use</code>in your console.</p></blockquote><p>Once the server starts, open a new tab in Chrome and visit<code>chrome://inspect</code>, where you should see your Next.js application inside the<strong>Remote Target</strong>section. Click<strong>inspect</strong>under your application to open a separate DevTools window, then go to the<strong>Sources</strong>tab.</p><p>Debugging server-side code here works much like debugging client-side code with Chrome DevTools, except that when you search for files here withCtrl+Por⌘+P, your source files will have paths starting with<code>webpack://{application-name}/./</code>(where<code>{application-name}</code>will be replaced with the name of your application according to your<code>package.json</code>file).</p><h3 id="debugging-on-windows" tabindex="-1"><a class="header-anchor" href="#debugging-on-windows" aria-hidden="true">#</a> Debugging on Windows</h3>`,9),w=e("code",null,"NODE_OPTIONS='--inspect'",-1),y={href:"https://www.npmjs.com/package/cross-env",target:"_blank",rel:"noopener noreferrer"},x=e("code",null,"cross-env",-1),N=e("code",null,"-D",-1),j=e("code",null,"npm",-1),D=e("code",null,"yarn",-1),S=e("code",null,"dev",-1),O=t(`<div class="language-json" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cross-env NODE_OPTIONS=&#39;--inspect&#39; next dev&quot;</span><span class="token punctuation">,</span>

</code></pre></div><p><code>cross-env</code>will set the<code>NODE_OPTIONS</code>environment variable regardless of which platform you are on (including Mac, Linux, and Windows) and allow you to debug consistently across devices and operating systems.</p><h2 id="more-information" tabindex="-1"><a class="header-anchor" href="#more-information" aria-hidden="true">#</a> More information</h2><p>To learn more about how to use a JavaScript debugger, take a look at the following documentation:</p>`,4),C={href:"https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_breakpoints",target:"_blank",rel:"noopener noreferrer"},T={href:"https://developers.google.com/web/tools/chrome-devtools/javascript",target:"_blank",rel:"noopener noreferrer"};function E(I,P){const o=r("ExternalLinkIcon");return p(),c("div",null,[d,e("p",null,[n("This documentation explains how you can debug your Next.js frontend and backend code with full source maps support using either the"),e("a",l,[n("VS Code debugger"),s(o)]),n("or"),e("a",u,[n("Chrome DevTools"),s(o)]),n(".")]),e("p",null,[n("Any debugger that can attach to Node.js can also be used to debug a Next.js application. You can find more details in the Node.js"),e("a",h,[n("Debugging Guide"),s(o)]),n(".")]),g,e("p",null,[n("Now, any time your client-side code reaches a"),e("a",k,[b,s(o)]),n("statement, code execution will pause and that file will appear in the debug area. You can also pressCtrl+Pon Windows/Linux or⌘+Pon macOS to search for a file and set breakpoints manually. Note that when searching here, your source files will have paths starting with"),m,n(".")]),q,e("p",null,[n("To debug server-side Next.js code with Chrome DevTools, you need to pass the"),e("a",v,[f,s(o)]),n("flag to the underlying Node.js process:")]),_,e("p",null,[n("Windows users may run into an issue when using"),w,n("as that syntax is not supported on Windows platforms. To get around this, install the"),e("a",y,[x,s(o)]),n("package as a development dependency ("),N,n("with"),j,n("and"),D,n(") and replace the"),S,n("script with the following.")]),O,e("ul",null,[e("li",null,[e("a",C,[n("Node.js debugging in VS Code: Breakpoints"),s(o)]),n("- "),e("a",T,[n("Chrome DevTools: Debug JavaScript"),s(o)])])])])}const L=a(i,[["render",E],["__file","debugging.html.vue"]]);export{L as default};
