import{_ as s,r as n,o as c,c as r,b as t,d as e,e as i,a as o}from"./app.1ad2624e.js";const d={},p=o('<h1 id="cdn-support-with-asset-prefix" tabindex="-1"><a class="header-anchor" href="#cdn-support-with-asset-prefix" aria-hidden="true">#</a> CDN Support with Asset Prefix</h1><blockquote><p><strong>Attention</strong>:<a href="/docs/deployment">Deploying to Vercel</a>automatically configures a global CDN for your Next.js project. You do not need to manually setup an Asset Prefix.</p></blockquote><blockquote><p><strong>Note</strong>: Next.js 9.5+ added support for a customizable<a href="/docs/guide/api-reference/next.config.js/basepath">Base Path</a>, which is better suited for hosting your application on a sub-path like<code>/docs</code>. We do not suggest you use a custom Asset Prefix for this use case.</p></blockquote>',3),l={href:"https://en.wikipedia.org/wiki/Content_delivery_network",target:"_blank",rel:"noopener noreferrer"},u=o(`<p>Open<code>next.config.js</code>and add the<code>assetPrefix</code>config:</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> isProd <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;production&#39;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// Use the CDN in production and localhost for development.</span>
  <span class="token literal-property property">assetPrefix</span><span class="token operator">:</span> isProd <span class="token operator">?</span> <span class="token string">&#39;https://cdn.mydomain.com&#39;</span> <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

</code></pre></div><p>Next.js will automatically use your asset prefix for the JavaScript and CSS files it loads from the<code>/_next/</code>path (<code>.next/static/</code>folder). For example, with the above configuration, the following request for a JS chunk:</p><div class="language-text" data-ext="text"><pre class="language-text"><code>/_next/static/chunks/4b9b41aaa062cbbfeff4add70f256968c51ece5d.4d708494b3aed70c04f0.js

</code></pre></div><p>Would instead become:</p><div class="language-text" data-ext="text"><pre class="language-text"><code>https://cdn.mydomain.com/_next/static/chunks/4b9b41aaa062cbbfeff4add70f256968c51ece5d.4d708494b3aed70c04f0.js

</code></pre></div><p>The exact configuration for uploading your files to a given CDN will depend on your CDN of choice. The only folder you need to host on your CDN is the contents of<code>.next/static/</code>, which should be uploaded as<code>_next/static/</code>as the above URL request indicates.<strong>Do not upload the rest of your<code>.next/</code>folder</strong>, as you should not expose your server code and other configuration to the public.</p><p>While<code>assetPrefix</code>covers requests to<code>_next/static</code>, it does not influence the following paths:</p><ul><li>Files in the<a href="/docs/guide/basic-features/static-file-serving">public</a>folder; if you want to serve those assets over a CDN, you&#39;ll have to introduce the prefix yourself- <code>/_next/data/</code>requests for<code>getServerSideProps</code>pages. These requests will always be made against the main domain since they&#39;re not static.- <code>/_next/data/</code>requests for<code>getStaticProps</code>pages. These requests will always be made against the main domain to support<a href="/docs/guide/basic-features/data-fetching/incremental-static-regeneration">Incremental Static Generation</a>, even if you&#39;re not using it (for consistency).</li></ul><h2 id="related" tabindex="-1"><a class="header-anchor" href="#related" aria-hidden="true">#</a> Related</h2>`,10);function f(h,g){const a=n("ExternalLinkIcon");return c(),r("div",null,[p,t("p",null,[e("To set up a"),t("a",l,[e("CDN"),i(a)]),e(", you can set up an asset prefix and configure your CDN's origin to resolve to the domain that Next.js is hosted on.")]),u])}const k=s(d,[["render",f],["__file","cdn-support-with-asset-prefix.html.vue"]]);export{k as default};
