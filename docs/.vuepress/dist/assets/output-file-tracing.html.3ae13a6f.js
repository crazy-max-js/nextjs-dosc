import{_ as o,r as c,o as p,c as r,b as a,d as e,e as s,a as t}from"./app.1ad2624e.js";const l={},i=t('<h1 id="output-file-tracing" tabindex="-1"><a class="header-anchor" href="#output-file-tracing" aria-hidden="true">#</a> Output File Tracing</h1><p>During a build, Next.js will automatically trace each page and its dependencies to determine all of the files that are needed for deploying a production version of your application.</p><p>This feature helps reduce the size of deployments drastically. Previously, when deploying with Docker you would need to have all files from your package&#39;s<code>dependencies</code>installed to run<code>next start</code>. Starting with Next.js 12, you can leverage Output File Tracing in the<code>.next/</code>directory to only include the necessary files.</p><p>Furthermore, this removes the need for the deprecated<code>serverless</code>target which can cause various issues and also creates unnecessary duplication.</p><h2 id="how-it-works" tabindex="-1"><a class="header-anchor" href="#how-it-works" aria-hidden="true">#</a> How It Works</h2>',5),d=a("code",null,"next build",-1),u={href:"https://github.com/vercel/nft",target:"_blank",rel:"noopener noreferrer"},h=a("code",null,"@vercel/nft",-1),f=a("code",null,"import",-1),m=a("code",null,"require",-1),g=a("code",null,"fs",-1),k=t(`<p>Next.js&#39; production server is also traced for its needed files and output at<code>.next/next-server.js.nft.json</code>which can be leveraged in production.</p><p>To leverage the<code>.nft.json</code>files emitted to the<code>.next</code>output directory, you can read the list of files in each trace that are relative to the<code>.nft.json</code>file and then copy them to your deployment location.</p><h2 id="automatically-copying-traced-files" tabindex="-1"><a class="header-anchor" href="#automatically-copying-traced-files" aria-hidden="true">#</a> Automatically Copying Traced Files</h2><p>Next.js can automatically create a<code>standalone</code>folder that copies only the necessary files for a production deployment including select files in<code>node_modules</code>.</p><p>To leverage this automatic copying you can enable it in your<code>next.config.js</code>:</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token string">&#39;standalone&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

</code></pre></div><p>This will create a folder at<code>.next/standalone</code>which can then be deployed on its own without installing<code>node_modules</code>.</p><p>Additionally, a minimal<code>server.js</code>file is also output which can be used instead of<code>next start</code>. This minimal server does not copy the<code>public</code>or<code>.next/static</code>folders by default as these should ideally be handled by a CDN instead, although these folders can be copied to the<code>standalone/public</code>and<code>standalone/.next/static</code>folders manually, after which<code>server.js</code>file will serve these automatically.</p><p>Note:<code>next.config.js</code>is read during<code>next build</code>and serialized into the<code>server.js</code>output file. If the legacy<a href="/docs/guide/api-reference/next.config.js/runtime-configuration"><code>serverRuntimeConfig</code>or<code>publicRuntimeConfig</code>options</a>are being used, the values will be specific to values at build time.</p><p>If your project uses<a href="/docs/guide/basic-features/image-optimization">Image Optimization</a>with the default<code>loader</code>, you must install<code>sharp</code>as a dependency:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i sharp

</code></pre></div><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> sharp

</code></pre></div><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> sharp

</code></pre></div><h2 id="caveats" tabindex="-1"><a class="header-anchor" href="#caveats" aria-hidden="true">#</a> Caveats</h2><ul><li>While tracing in monorepo setups, the project directory is used for tracing by default. For<code>next build packages/web-app</code>,<code>packages/web-app</code>would be the tracing root and any files outside of that folder will not be included. To include files outside of this folder you can set<code>experimental.outputFileTracingRoot</code>in your<code>next.config.js</code>.</li></ul><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// packages/web-app/next.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">experimental</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// this includes files from the monorepo base two directories up</span>
    <span class="token literal-property property">outputFileTracingRoot</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;../../&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

</code></pre></div>`,16),y=a("code",null,"unstable_includeFiles",-1),b=a("code",null,"unstable_excludeFiles",-1),x={href:"https://www.npmjs.com/package/minimatch",target:"_blank",rel:"noopener noreferrer"},v=a("code",null,".nft.json",-1),_={href:"https://vercel.com",target:"_blank",rel:"noopener noreferrer"},w=a("code",null,".nft.json",-1),j=t(`<h2 id="experimental-turbotrace" tabindex="-1"><a class="header-anchor" href="#experimental-turbotrace" aria-hidden="true">#</a> Experimental turbotrace</h2><p>Tracing dependencies can be slow because it requires very complex computations and analysis. We created<code>turbotrace</code>in Rust as a faster and smarter alternative to the JavaScript implementation.</p><p>To enable it, you can add the following configuration to your<code>next.config.js</code>:</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// next.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">experimental</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">turbotrace</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// control the log level of the turbotrace, default is \`error\`</span>
      logLevel<span class="token operator">?</span><span class="token operator">:</span>
      <span class="token operator">|</span> <span class="token string">&#39;bug&#39;</span>
      <span class="token operator">|</span> <span class="token string">&#39;fatal&#39;</span>
      <span class="token operator">|</span> <span class="token string">&#39;error&#39;</span>
      <span class="token operator">|</span> <span class="token string">&#39;warning&#39;</span>
      <span class="token operator">|</span> <span class="token string">&#39;hint&#39;</span>
      <span class="token operator">|</span> <span class="token string">&#39;note&#39;</span>
      <span class="token operator">|</span> <span class="token string">&#39;suggestions&#39;</span>
      <span class="token operator">|</span> <span class="token string">&#39;info&#39;</span><span class="token punctuation">,</span>
      <span class="token comment">// control if the log of turbotrace should contain the details of the analysis, default is \`false\`</span>
      logDetail<span class="token operator">?</span><span class="token operator">:</span> boolean
      <span class="token comment">// show all log messages without limit</span>
      <span class="token comment">// turbotrace only show 1 log message for each categories by default</span>
      logAll<span class="token operator">?</span><span class="token operator">:</span> boolean
      <span class="token comment">// control the context directory of the turbotrace</span>
      <span class="token comment">// files outside of the context directory will not be traced</span>
      <span class="token comment">// set the \`experimental.outputFileTracingRoot\` has the same effect</span>
      <span class="token comment">// if the \`experimental.outputFileTracingRoot\` and this option are both set, the \`experimental.turbotrace.contextDirectory\` will be used</span>
      contextDirectory<span class="token operator">?</span><span class="token operator">:</span> string
      <span class="token comment">// if there is \`process.cwd()\` expression in your code, you can set this option to tell \`turbotrace\` the value of \`process.cwd()\` while tracing.</span>
      <span class="token comment">// for example the require(process.cwd() + &#39;/package.json&#39;) will be traced as require(&#39;/path/to/cwd/package.json&#39;)</span>
      processCwd<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
      <span class="token comment">// control the maximum number of files that are passed to the \`turbotrace\`</span>
      <span class="token comment">// default is 128</span>
      maxFiles<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

</code></pre></div>`,4);function T(F,N){const n=c("ExternalLinkIcon");return p(),r("div",null,[i,a("p",null,[e("During"),d,e(", Next.js will use"),a("a",u,[h,s(n)]),e("to statically analyze"),f,e(","),m,e(", and"),g,e("usage to determine all files that a page might load.")]),k,a("ul",null,[a("li",null,[e("There are some cases in which Next.js might fail to include required files, or might incorrectly include unused files. In those cases, you can export page configs props"),y,e("and"),b,e("respectively. Each prop accepts an array of"),a("a",x,[e("minimatch globs"),s(n)]),e("relative to the project's root to either include or exclude in the trace.- Currently, Next.js does not do anything with the emitted"),v,e("files. The files must be read by your deployment platform, for example"),a("a",_,[e("Vercel"),s(n)]),e(", to create a minimal deployment. In a future release, a new command is planned to utilize these"),w,e("files.")])]),j])}const I=o(l,[["render",T],["__file","output-file-tracing.html.vue"]]);export{I as default};
