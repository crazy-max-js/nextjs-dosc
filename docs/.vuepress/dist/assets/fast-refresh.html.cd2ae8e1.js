import{_ as n,r as s,o as i,c as d,b as e,d as t,e as a,a as r}from"./app.1ad2624e.js";const c={},l=e("h1",{id:"fast-refresh",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#fast-refresh","aria-hidden":"true"},"#"),t(" Fast Refresh")],-1),h={class:"custom-container details"},u=e("summary",null,"示例",-1),p={href:"https://github.com/vercel/next.js/tree/canary/examples/fast-refresh-demo",target:"_blank",rel:"noopener noreferrer"},f=r('<p>Fast Refresh is a Next.js feature that gives you instantaneous feedback on edits made to your React components. Fast Refresh is enabled by default in all Next.js applications on<strong>9.4 or newer</strong>. With Next.js Fast Refresh enabled, most edits should be visible within a second,<strong>without losing component state</strong>.</p><h2 id="how-it-works" tabindex="-1"><a class="header-anchor" href="#how-it-works" aria-hidden="true">#</a> How It Works</h2><ul><li>If you edit a file that<strong>only exports React component(s)</strong>, Fast Refresh will update the code only for that file, and re-render your component. You can edit anything in that file, including styles, rendering logic, event handlers, or effects.- If you edit a file with exports thataren&#39;tReact components, Fast Refresh will re-run both that file, and the other files importing it. So if both<code>Button.js</code>and<code>Modal.js</code>import<code>theme.js</code>, editing<code>theme.js</code>will update both components.- Finally, if you<strong>edit a file</strong>that&#39;s<strong>imported by files outside of the React tree</strong>, Fast Refresh<strong>will fall back to doing a full reload</strong>. You might have a file which renders a React component but also exports a value that is imported by a<strong>non-React component</strong>. For example, maybe your component also exports a constant, and a non-React utility file imports it. In that case, consider migrating the constant to a separate file and importing it into both files. This will re-enable Fast Refresh to work. Other cases can usually be solved in a similar way.</li></ul><h2 id="error-resilience" tabindex="-1"><a class="header-anchor" href="#error-resilience" aria-hidden="true">#</a> Error Resilience</h2><h3 id="syntax-errors" tabindex="-1"><a class="header-anchor" href="#syntax-errors" aria-hidden="true">#</a> Syntax Errors</h3><p>If you make a syntax error during development, you can fix it and save the file again. The error will disappear automatically, so you won&#39;t need to reload the app.<strong>You will not lose component state</strong>.</p><h3 id="runtime-errors" tabindex="-1"><a class="header-anchor" href="#runtime-errors" aria-hidden="true">#</a> Runtime Errors</h3><p>If you make a mistake that leads to a runtime error inside your component, you&#39;ll be greeted with a contextual overlay. Fixing the error will automatically dismiss the overlay, without reloading the app.</p><p>Component state will be retained if the error did not occur during rendering. If the error did occur during rendering, React will remount your application using the updated code.</p>',9),m={href:"https://reactjs.org/docs/error-boundaries.html",target:"_blank",rel:"noopener noreferrer"},g=r('<h2 id="limitations" tabindex="-1"><a class="header-anchor" href="#limitations" aria-hidden="true">#</a> Limitations</h2><p>Fast Refresh tries to preserve local React state in the component you&#39;re editing, but only if it&#39;s safe to do so. Here&#39;s a few reasons why you might see local state being reset on every edit to a file:</p><ul><li>Local state is not preserved for class components (only function components and Hooks preserve state).- The file you&#39;re editing might haveotherexports in addition to a React component.- Sometimes, a file would export the result of calling a higher-order component like<code>HOC(WrappedComponent)</code>. If the returned component is a class, its state will be reset.- Anonymous arrow functions like<code>export default () =&gt; &lt;div /&gt;;</code>cause Fast Refresh to not preserve local component state. For large codebases you can use our<a href="/docs/guide/advanced-features/codemods#name-default-component"><code>name-default-component</code>codemod</a>.</li></ul><p>As more of your codebase moves to function components and Hooks, you can expect state to be preserved in more cases.</p><h2 id="tips" tabindex="-1"><a class="header-anchor" href="#tips" aria-hidden="true">#</a> Tips</h2><ul><li>Fast Refresh preserves React local state in function components (and Hooks) by default.- Sometimes you might want toforcethe state to be reset, and a component to be remounted. For example, this can be handy if you&#39;re tweaking an animation that only happens on mount. To do this, you can add<code>// @refresh reset</code>anywhere in the file you&#39;re editing. This directive is local to the file, and instructs Fast Refresh to remount components defined in that file on every edit.- You can put<code>console.log</code>or<code>debugger;</code>into the components you edit during development.</li></ul><h2 id="fast-refresh-and-hooks" tabindex="-1"><a class="header-anchor" href="#fast-refresh-and-hooks" aria-hidden="true">#</a> Fast Refresh and Hooks</h2><p>When possible, Fast Refresh attempts to preserve the state of your component between edits. In particular,<code>useState</code>and<code>useRef</code>preserve their previous values as long as you don&#39;t change their arguments or the order of the Hook calls.</p><p>Hooks with dependencies—such as<code>useEffect</code>,<code>useMemo</code>, and<code>useCallback</code>—willalwaysupdate during Fast Refresh. Their list of dependencies will be ignored while Fast Refresh is happening.</p><p>For example, when you edit<code>useMemo(() =&gt; x * 2, [x])</code>to<code>useMemo(() =&gt; x * 10, [x])</code>, it will re-run even though<code>x</code>(the dependency) has not changed. If React didn&#39;t do that, your edit wouldn&#39;t reflect on the screen!</p><p>Sometimes, this can lead to unexpected results. For example, even a<code>useEffect</code>with an empty array of dependencies would still re-run once during Fast Refresh.</p><p>However, writing code resilient to occasional re-running of<code>useEffect</code>is a good practice even without Fast Refresh. It will make it easier for you to introduce new dependencies to it later on and it&#39;s enforced by<a href="/docs/guide/api-reference/next.config.js/react-strict-mode">React Strict Mode</a>, which we highly recommend enabling.</p>',12);function y(w,b){const o=s("ExternalLinkIcon");return i(),d("div",null,[l,e("details",h,[u,e("ul",null,[e("li",null,[e("a",p,[t("Fast Refresh Demo"),a(o)])])])]),f,e("p",null,[t("If you have"),e("a",m,[t("error boundaries"),a(o)]),t("in your app (which is a good idea for graceful failures in production), they will retry rendering on the next edit after a rendering error. This means having an error boundary can prevent you from always getting reset to the root app state. However, keep in mind that error boundaries shouldn't betoogranular. They are used by React in production, and should always be designed intentionally.")]),g])}const v=n(c,[["render",y],["__file","fast-refresh.html.vue"]]);export{v as default};
