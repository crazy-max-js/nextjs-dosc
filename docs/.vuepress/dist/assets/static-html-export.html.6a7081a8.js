import{_ as o,r as i,o as r,c,b as e,d as t,e as n,a as d}from"./app.1ad2624e.js";const s={},p=e("h1",{id:"static-html-export",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#static-html-export","aria-hidden":"true"},"#"),t(" Static HTML Export")],-1),u={class:"custom-container details"},l=e("summary",null,"示例",-1),g={href:"https://github.com/vercel/next.js/tree/canary/examples/with-static-export",target:"_blank",rel:"noopener noreferrer"},h=d(`<p><code>next export</code>allows you to export your Next.js application to static HTML, which can be run standalone without the need of a Node.js server. It is recommended to only use<code>next export</code>if you don&#39;t need any of the<a href="#unsupported-features">unsupported features</a>requiring a server.</p><p>If you&#39;re looking to build a hybrid site where onlysomepages are prerendered to static HTML, Next.js already does that automatically. Learn more about<a href="/docs/guide/advanced-features/automatic-static-optimization">Automatic Static Optimization</a>and<a href="/docs/guide/basic-features/data-fetching/incremental-static-regeneration">Incremental Static Regeneration</a>.</p><h2 id="next-export" tabindex="-1"><a class="header-anchor" href="#next-export" aria-hidden="true">#</a> next export</h2><p>Update your build script in<code>package.json</code>to use<code>next export</code>:</p><div class="language-json" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;next build &amp;&amp; next export&quot;</span>
<span class="token punctuation">}</span>

</code></pre></div><p>Running<code>npm run build</code>will generate an<code>out</code>directory.</p><p><code>next export</code>builds an HTML version of your app. During<code>next build</code>,<a href="/docs/guide/basic-features/data-fetching/get-static-props"><code>getStaticProps</code></a>and<a href="/docs/guide/basic-features/data-fetching/get-static-paths"><code>getStaticPaths</code></a>will generate an HTML file for each page in your<code>pages</code>directory (or more for<a href="/docs/guide/routing/dynamic-routes">dynamic routes</a>). Then,<code>next export</code>will copy the already exported files into the correct directory.<code>getInitialProps</code>will generate the HTML files during<code>next export</code>instead of<code>next build</code>.</p><p>For more advanced scenarios, you can define a parameter called<a href="/docs/guide/api-reference/next.config.js/exportPathMap"><code>exportPathMap</code></a>in your<a href="/docs/guide/api-reference/next.config.js/introduction"><code>next.config.js</code></a>file to configure exactly which pages will be generated.</p><blockquote><p><strong>Warning</strong>: Using<code>exportPathMap</code>for defining routes with any<code>getStaticPaths</code>powered page is now ignored and gets overridden. We recommend not to use them together.</p></blockquote><h2 id="supported-features" tabindex="-1"><a class="header-anchor" href="#supported-features" aria-hidden="true">#</a> Supported Features</h2><p>The majority of core Next.js features needed to build a static site are supported, including:</p><ul><li><a href="/docs/guide/routing/dynamic-routes">Dynamic Routes when using<code>getStaticPaths</code></a>- Prefetching with<code>next/link</code>- Preloading JavaScript- <a href="/docs/guide/advanced-features/dynamic-import">Dynamic Imports</a>- Any styling options (e.g. CSS Modules, styled-jsx)- <a href="/docs/guide/basic-features/data-fetching/client-side">Client-side data fetching</a>- <a href="/docs/guide/basic-features/data-fetching/get-static-props"><code>getStaticProps</code></a>- <a href="/docs/guide/basic-features/data-fetching/get-static-paths"><code>getStaticPaths</code></a>- <a href="/docs/guide/basic-features/image-optimization">Image Optimization</a>using a<a href="/docs/guide/basic-features/image-optimization#loaders">custom loader</a></li></ul><h2 id="unsupported-features" tabindex="-1"><a class="header-anchor" href="#unsupported-features" aria-hidden="true">#</a> Unsupported Features</h2><p>Features that require a Node.js server, or dynamic logic that cannot be computed during the build process, are not supported:</p><ul><li><a href="/docs/guide/basic-features/image-optimization">Image Optimization</a>(default loader)- <a href="/docs/guide/advanced-features/i18n-routing">Internationalized Routing</a>- <a href="/docs/guide/api-routes/introduction">API Routes</a>- <a href="/docs/guide/api-reference/next.config.js/rewrites">Rewrites</a>- <a href="/docs/guide/api-reference/next.config.js/redirects">Redirects</a>- <a href="/docs/guide/api-reference/next.config.js/headers">Headers</a>- <a href="/docs/middleware">Middleware</a>- <a href="/docs/guide/basic-features/data-fetching/incremental-static-regeneration">Incremental Static Regeneration</a>- <a href="/docs/guide/api-reference/data-fetching/get-static-paths#fallback-true"><code>fallback: true</code></a>- <a href="/docs/guide/basic-features/data-fetching/get-server-side-props"><code>getServerSideProps</code></a></li></ul><h3 id="getinitialprops" tabindex="-1"><a class="header-anchor" href="#getinitialprops" aria-hidden="true">#</a> getInitialProps</h3><p>It&#39;s possible to use the<a href="/docs/guide/api-reference/data-fetching/get-initial-props"><code>getInitialProps</code></a>API instead of<code>getStaticProps</code>, but it comes with a few caveats:</p><ul><li><code>getInitialProps</code>cannot be used alongside<code>getStaticProps</code>or<code>getStaticPaths</code>on any given page. If you have dynamic routes, instead of using<code>getStaticPaths</code>you&#39;ll need to configure the<a href="/docs/guide/api-reference/next.config.js/exportPathMap"><code>exportPathMap</code></a>parameter in your<a href="/docs/guide/api-reference/next.config.js/introduction"><code>next.config.js</code></a>file to let the exporter know which HTML files it should output.- When<code>getInitialProps</code>is called during export, the<code>req</code>and<code>res</code>fields of its<a href="/docs/guide/api-reference/data-fetching/get-initial-props#context-object"><code>context</code></a>parameter will be empty objects, since during export there is no server running.- <code>getInitialProps</code><strong>will be called on every client-side navigation</strong>, if you&#39;d like to only fetch data at build-time, switch to<code>getStaticProps</code>.- <code>getInitialProps</code>should fetch from an API and cannot use Node.js-specific libraries or the file system like<code>getStaticProps</code>can.</li></ul><p>We recommend migrating towards<code>getStaticProps</code>over<code>getInitialProps</code>whenever possible.</p>`,19);function f(m,x){const a=i("ExternalLinkIcon");return r(),c("div",null,[p,e("details",u,[l,e("ul",null,[e("li",null,[e("a",g,[t("Static Export"),n(a)])])])]),h])}const y=o(s,[["render",f],["__file","static-html-export.html.vue"]]);export{y as default};
